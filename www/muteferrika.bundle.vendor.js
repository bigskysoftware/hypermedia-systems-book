const makeSlug = (str)=>str.split(/[^\p{L}\p{N}]/u).map(slugWord).filter((s)=>s.length > 0).join("-");
const slugWord = (word)=>word.toLowerCase();
function tokenize(source) {
    const tokens = [];
    let type = "string";
    let trimNext = false;
    let position = 0;
    try {
        while(source.length > 0){
            if (type === "string") {
                const index = source.indexOf("{{");
                const code = index === -1 ? source : source.slice(0, index);
                if (trimNext) {
                    tokens.push([
                        type,
                        code.trimStart(),
                        position
                    ]);
                    trimNext = false;
                } else {
                    tokens.push([
                        type,
                        code,
                        position
                    ]);
                }
                if (index === -1) {
                    break;
                }
                position += index;
                source = source.slice(index);
                type = source.startsWith("{{#") ? "comment" : "tag";
                continue;
            }
            if (type === "comment") {
                source = source.slice(3);
                const index = source.indexOf("#}}");
                const comment = index === -1 ? source : source.slice(0, index);
                tokens.push([
                    type,
                    comment,
                    position
                ]);
                if (index === -1) {
                    break;
                }
                position += index + 3;
                source = source.slice(index + 3);
                type = "string";
                continue;
            }
            if (type === "tag") {
                const indexes = parseTag(source);
                const lastIndex = indexes.length - 1;
                let tag;
                indexes.reduce((prev, curr, index)=>{
                    let code = source.slice(prev, curr - 2);
                    if (index === 1) {
                        if (code.startsWith("-")) {
                            code = code.slice(1);
                            const lastToken = tokens[tokens.length - 1];
                            lastToken[1] = lastToken[1].trimEnd();
                        }
                        if (code.endsWith("-") && index === lastIndex) {
                            code = code.slice(0, -1);
                            trimNext = true;
                        }
                        tag = [
                            type,
                            code.trim(),
                            position
                        ];
                        tokens.push(tag);
                        return curr;
                    }
                    if (index === lastIndex && code.endsWith("-")) {
                        code = code.slice(0, -1);
                        trimNext = true;
                    }
                    tokens.push([
                        "filter",
                        code.trim()
                    ]);
                    return curr;
                });
                position += indexes[lastIndex];
                source = source.slice(indexes[lastIndex]);
                type = "string";
                if (tag?.[1] === "echo") {
                    const end = source.match(/{{\s*\/echo\s*}}/);
                    if (!end) {
                        throw new Error("Unclosed echo tag");
                    }
                    const rawCode = source.slice(0, end.index);
                    tag[1] = `echo ${JSON.stringify(rawCode)}`;
                    const length = Number(end.index) + end[0].length;
                    source = source.slice(length);
                    position += length;
                }
                continue;
            }
        }
    } catch (error) {
        return {
            tokens,
            position,
            error
        };
    }
    return {
        tokens,
        position,
        error: undefined
    };
}
function parseTag(source) {
    const length = source.length;
    const statuses = [];
    const indexes = [
        2
    ];
    let index = 0;
    while(index < length){
        const __char = source.charAt(index++);
        switch(__char){
            case "{":
                {
                    const status = statuses[0];
                    if (status === "literal" && source.charAt(index - 2) === "$") {
                        statuses.unshift("bracket");
                    } else if (status !== "comment" && status !== "single-quote" && status !== "double-quote" && status !== "literal" && status !== "regex" && status !== "line-comment") {
                        statuses.unshift("bracket");
                    }
                    break;
                }
            case "}":
                {
                    const status = statuses[0];
                    if (status === "bracket") {
                        statuses.shift();
                        if (statuses.length === 0) {
                            indexes.push(index);
                            return indexes;
                        }
                    }
                    break;
                }
            case '"':
                {
                    const status = statuses[0];
                    if (status === "double-quote") {
                        statuses.shift();
                    } else if (status !== "comment" && status !== "single-quote" && status !== "literal" && status !== "regex" && status !== "line-comment") {
                        statuses.unshift("double-quote");
                    }
                    break;
                }
            case "'":
                {
                    const status = statuses[0];
                    if (status === "single-quote") {
                        statuses.shift();
                    } else if (status !== "comment" && status !== "double-quote" && status !== "literal" && status !== "regex" && status !== "line-comment") {
                        statuses.unshift("single-quote");
                    }
                    break;
                }
            case "`":
                {
                    const status = statuses[0];
                    if (status === "literal") {
                        statuses.shift();
                    } else if (status !== "comment" && status !== "double-quote" && status !== "single-quote" && status !== "regex" && status !== "line-comment") {
                        statuses.unshift("literal");
                    }
                    break;
                }
            case "/":
                {
                    const status = statuses[0];
                    if (status === "single-quote" || status === "double-quote" || status === "literal" || status === "line-comment") {
                        break;
                    }
                    if (status === "comment") {
                        if (source.charAt(index - 2) === "*") {
                            statuses.shift();
                        }
                        break;
                    }
                    if (status === "regex") {
                        if (source.charAt(index - 2) !== "\\") {
                            statuses.shift();
                        }
                        break;
                    }
                    if (source.charAt(index) === "*") {
                        statuses.unshift("comment");
                        break;
                    }
                    if (source.charAt(index - 2) === "/") {
                        statuses.unshift("line-comment");
                        break;
                    }
                    const prev = prevChar(source, index - 1);
                    if (prev === "(" || prev === "=" || prev === ":" || prev === ",") {
                        statuses.unshift("regex");
                    }
                    break;
                }
            case "\n":
                {
                    const status = statuses[0];
                    if (status === "line-comment") {
                        statuses.shift();
                    }
                    break;
                }
            case "|":
                {
                    const status = statuses[0];
                    if (status === "bracket" && source.charAt(index) === ">") {
                        indexes.push(index + 1);
                    }
                    break;
                }
        }
    }
    throw new Error("Unclosed tag");
}
function prevChar(source, index) {
    while(index > 0){
        const __char = source.charAt(--index);
        if (__char !== " " && __char !== "\n" && __char !== "\r" && __char !== "\t") {
            return __char;
        }
    }
    return "";
}
class Environment {
    cache = new Map();
    options;
    tags = [];
    filters = {};
    utils = {};
    constructor(options){
        this.options = options;
    }
    use(plugin) {
        plugin(this);
    }
    async run(file, data, from) {
        const template = await this.load(file, from);
        return await template(data);
    }
    async runString(source, data, file) {
        if (file) {
            const cached = this.cache.get(file);
            if (cached) {
                return await cached(data);
            }
            const template = this.compile(source, file);
            this.cache.set(file, template);
            return await template(data);
        }
        const template = this.compile(source, file);
        return await template(data);
    }
    runStringSync(source, data) {
        const template = this.compile(source, "", {}, true);
        return template(data);
    }
    compile(source, path, defaults, sync = false) {
        const { tokens, position, error } = tokenize(source);
        if (error) {
            throw this.createError(path || "unknown", source, position, error);
        }
        const code = this.compileTokens(tokens).join("\n");
        const { dataVarname, useWith } = this.options;
        const constructor = new Function("__file", "__env", "__defaults", `return${sync ? "" : " async"} function (${dataVarname}) {
        let __pos = 0;
        try {
          ${dataVarname} = Object.assign({}, __defaults, ${dataVarname});
          const __exports = { content: "" };
          ${useWith ? `with (${dataVarname}) {${code}}` : code}
          return __exports;
        } catch (cause) {
          const template = __env.cache.get(__file);
          throw __env.createError(__file, template?.source || "", __pos, cause);
        }
      }
      `);
        const template = constructor(path, this, defaults);
        template.file = path;
        template.code = code;
        template.source = source;
        return template;
    }
    async load(file, from) {
        const path = from ? this.options.loader.resolve(from, file) : file;
        if (!this.cache.has(path)) {
            const { source, data } = await this.options.loader.load(path);
            const template = this.compile(source, path, data);
            this.cache.set(path, template);
        }
        return this.cache.get(path);
    }
    compileTokens(tokens, outputVar = "__exports.content", stopAt) {
        const compiled = [];
        tokens: while(tokens.length > 0){
            if (stopAt && tokens[0][0] === "tag" && stopAt.includes(tokens[0][1])) {
                break;
            }
            const [type, code, pos] = tokens.shift();
            if (type === "comment") {
                continue;
            }
            if (type === "string") {
                compiled.push(`${outputVar} += ${JSON.stringify(code)};`);
                continue;
            }
            if (type === "tag") {
                compiled.push(`__pos = ${pos};`);
                for (const tag of this.tags){
                    const compiledTag = tag(this, code, outputVar, tokens);
                    if (typeof compiledTag === "string") {
                        compiled.push(compiledTag);
                        continue tokens;
                    }
                }
                const expression = this.compileFilters(tokens, code, this.options.autoescape);
                compiled.push(`${outputVar} += (${expression}) ?? "";`);
                continue;
            }
            throw new Error(`Unknown token type "${type}"`);
        }
        return compiled;
    }
    compileFilters(tokens, output, autoescape = false) {
        let unescaped = false;
        while(tokens.length > 0 && tokens[0][0] === "filter"){
            const [, code] = tokens.shift();
            const match = code.match(/^(await\s+)?([\w.]+)(?:\((.*)\))?$/);
            if (!match) {
                throw new Error(`Invalid filter: ${code}`);
            }
            const [_, isAsync, name, args] = match;
            if (!this.filters[name]) {
                if (name === "safe") {
                    unescaped = true;
                } else if (isGlobal(name)) {
                    output = `${isAsync ? "await " : ""}${name}(${output}${args ? `, ${args}` : ""})`;
                } else {
                    output = `${isAsync ? "await " : ""}(${output})?.${name}?.(${args ? args : ""})`;
                }
            } else {
                const { dataVarname } = this.options;
                output = `${isAsync || checkAsync(this.filters[name]) ? "await " : ""}__env.filters.${name}.call({data:${dataVarname},env:__env}, ${output}${args ? `, ${args}` : ""})`;
            }
        }
        if (autoescape && !unescaped) {
            output = `__env.filters.escape(${output})`;
        }
        return output;
    }
    createError(path, source, position, cause) {
        if (!source) {
            return cause;
        }
        const [line, column, code] = errorLine(source, position);
        return new Error(`Error in the template ${path}:${line}:${column}\n\n${code.trim()}\n\n> ${cause.message}\n`, {
            cause
        });
    }
}
function isGlobal(name) {
    if (globalThis[name]) {
        return true;
    }
    if (name.includes(".")) {
        const [obj, prop] = name.split(".");
        return typeof globalThis[obj]?.[prop] === "function";
    }
}
function errorLine(source, pos) {
    let line = 1;
    let column = 1;
    for(let index = 0; index < pos; index++){
        if (source[index] === "\n" || source[index] === "\r" && source[index + 1] === "\n") {
            line++;
            column = 1;
            if (source[index] === "\r") {
                index++;
            }
        } else {
            column++;
        }
    }
    return [
        line,
        column,
        source.split("\n")[line - 1]
    ];
}
function checkAsync(fn) {
    return fn.constructor?.name === "AsyncFunction";
}
const osType = (()=>{
    const { Deno: Deno1 } = globalThis;
    if (typeof Deno1?.build?.os === "string") {
        return Deno1.build.os;
    }
    const { navigator } = globalThis;
    if (navigator?.appVersion?.includes?.("Win")) {
        return "windows";
    }
    return "linux";
})();
const isWindows = osType === "windows";
function assertPath(path) {
    if (typeof path !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);
    }
}
function stripSuffix(name, suffix) {
    if (suffix.length >= name.length) {
        return name;
    }
    const lenDiff = name.length - suffix.length;
    for(let i1 = suffix.length - 1; i1 >= 0; --i1){
        if (name.charCodeAt(lenDiff + i1) !== suffix.charCodeAt(i1)) {
            return name;
        }
    }
    return name.slice(0, -suffix.length);
}
function lastPathSegment(path, isSep, start = 0) {
    let matchedNonSeparator = false;
    let end = path.length;
    for(let i1 = path.length - 1; i1 >= start; --i1){
        if (isSep(path.charCodeAt(i1))) {
            if (matchedNonSeparator) {
                start = i1 + 1;
                break;
            }
        } else if (!matchedNonSeparator) {
            matchedNonSeparator = true;
            end = i1 + 1;
        }
    }
    return path.slice(start, end);
}
function assertArgs(path, suffix) {
    assertPath(path);
    if (path.length === 0) return path;
    if (typeof suffix !== "string") {
        throw new TypeError(`Suffix must be a string. Received ${JSON.stringify(suffix)}`);
    }
}
const CHAR_FORWARD_SLASH = 47;
function stripTrailingSeparators(segment, isSep) {
    if (segment.length <= 1) {
        return segment;
    }
    let end = segment.length;
    for(let i1 = segment.length - 1; i1 > 0; i1--){
        if (isSep(segment.charCodeAt(i1))) {
            end = i1;
        } else {
            break;
        }
    }
    return segment.slice(0, end);
}
function isPosixPathSeparator(code) {
    return code === 47;
}
function isPathSeparator(code) {
    return code === 47 || code === 92;
}
function isWindowsDeviceRoot(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function basename(path, suffix = "") {
    assertArgs(path, suffix);
    let start = 0;
    if (path.length >= 2) {
        const drive = path.charCodeAt(0);
        if (isWindowsDeviceRoot(drive)) {
            if (path.charCodeAt(1) === 58) start = 2;
        }
    }
    const lastSegment = lastPathSegment(path, isPathSeparator, start);
    const strippedSegment = stripTrailingSeparators(lastSegment, isPathSeparator);
    return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
function assertArg(path) {
    assertPath(path);
    if (path.length === 0) return ".";
}
function dirname(path) {
    assertArg(path);
    const len = path.length;
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return path;
                        }
                        if (j !== last) {
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return path;
    }
    for(let i1 = len - 1; i1 >= offset; --i1){
        if (isPathSeparator(path.charCodeAt(i1))) {
            if (!matchedSlash) {
                end = i1;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return stripTrailingSeparators(path.slice(0, end), isPosixPathSeparator);
}
function extname(path) {
    assertPath(path);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path.length >= 2 && path.charCodeAt(1) === 58 && isWindowsDeviceRoot(path.charCodeAt(0))) {
        start = startPart = 2;
    }
    for(let i1 = path.length - 1; i1 >= start; --i1){
        const code = path.charCodeAt(i1);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i1 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i1 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i1;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function _format(sep, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (base === sep) return dir;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
function assertArg1(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
}
function format(pathObject) {
    assertArg1(pathObject);
    return _format("\\", pathObject);
}
function assertArg2(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol !== "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return url;
}
function fromFileUrl(url) {
    url = assertArg2(url);
    let path = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname !== "") {
        path = `\\\\${url.hostname}${path}`;
    }
    return path;
}
function isAbsolute(path) {
    assertPath(path);
    const len = path.length;
    if (len === 0) return false;
    const code = path.charCodeAt(0);
    if (isPathSeparator(code)) {
        return true;
    } else if (isWindowsDeviceRoot(code)) {
        if (len > 2 && path.charCodeAt(1) === 58) {
            if (isPathSeparator(path.charCodeAt(2))) return true;
        }
    }
    return false;
}
class AssertionError extends Error {
    constructor(message){
        super(message);
        this.name = "AssertionError";
    }
}
function assert(expr, msg = "") {
    if (!expr) {
        throw new AssertionError(msg);
    }
}
function assertArg3(path) {
    assertPath(path);
    if (path.length === 0) return ".";
}
function normalizeString(path, allowAboveRoot, separator, isPathSeparator) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i1 = 0, len = path.length; i1 <= len; ++i1){
        if (i1 < len) code = path.charCodeAt(i1);
        else if (isPathSeparator(code)) break;
        else code = CHAR_FORWARD_SLASH;
        if (isPathSeparator(code)) {
            if (lastSlash === i1 - 1 || dots === 1) {} else if (lastSlash !== i1 - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i1;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i1;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path.slice(lastSlash + 1, i1);
                else res = path.slice(lastSlash + 1, i1);
                lastSegmentLength = i1 - lastSlash - 1;
            }
            lastSlash = i1;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function normalize(path) {
    assertArg3(path);
    const len = path.length;
    let rootEnd = 0;
    let device;
    let isAbsolute = false;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            isAbsolute = true;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    const firstPart = path.slice(last, j);
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return `\\\\${firstPart}\\${path.slice(last)}\\`;
                        } else if (j !== last) {
                            device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                device = path.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) {
                        isAbsolute = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString(path.slice(rootEnd), !isAbsolute, "\\", isPathSeparator);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute) tail = ".";
    if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function join(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i1 = 0; i1 < paths.length; ++i1){
        const path = paths[i1];
        assertPath(path);
        if (path.length > 0) {
            if (joined === undefined) joined = firstPart = path;
            else joined += `\\${path}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert(firstPart !== null);
    if (isPathSeparator(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize(joined);
}
function parse(path) {
    assertPath(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            rootEnd = j;
                        } else if (j !== last) {
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path;
                            ret.base = "\\";
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        ret.root = ret.dir = path;
        ret.base = "\\";
        return ret;
    }
    if (rootEnd > 0) ret.root = path.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i1 = path.length - 1;
    let preDotState = 0;
    for(; i1 >= rootEnd; --i1){
        code = path.charCodeAt(i1);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i1 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i1 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i1;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path.slice(startPart, end);
        }
    } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
        ret.ext = path.slice(startDot, end);
    }
    ret.base = ret.base || "\\";
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function resolve(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i1 = pathSegments.length - 1; i1 >= -1; i1--){
        let path;
        const { Deno: Deno1 } = globalThis;
        if (i1 >= 0) {
            path = pathSegments[i1];
        } else if (!resolvedDevice) {
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path = Deno1.cwd();
        } else {
            if (typeof Deno1?.env?.get !== "function" || typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
            if (path === undefined || path.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path = `${resolvedDevice}\\`;
            }
        }
        assertPath(path);
        const len = path.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator(code)) {
                isAbsolute = true;
                if (isPathSeparator(path.charCodeAt(1))) {
                    let j = 2;
                    let last = j;
                    for(; j < len; ++j){
                        if (isPathSeparator(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path.slice(last, j);
                        last = j;
                        for(; j < len; ++j){
                            if (!isPathSeparator(path.charCodeAt(j))) break;
                        }
                        if (j < len && j !== last) {
                            last = j;
                            for(; j < len; ++j){
                                if (isPathSeparator(path.charCodeAt(j))) break;
                            }
                            if (j === len) {
                                device = `\\\\${firstPart}\\${path.slice(last)}`;
                                rootEnd = j;
                            } else if (j !== last) {
                                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot(code)) {
                if (path.charCodeAt(1) === 58) {
                    device = path.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator(path.charCodeAt(2))) {
                            isAbsolute = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator(code)) {
            rootEnd = 1;
            isAbsolute = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function assertArgs1(from, to) {
    assertPath(from);
    assertPath(to);
    if (from === to) return "";
}
function relative(from, to) {
    assertArgs1(from, to);
    const fromOrig = resolve(from);
    const toOrig = resolve(to);
    if (fromOrig === toOrig) return "";
    from = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from === to) return "";
    let fromStart = 0;
    let fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i1 = 0;
    for(; i1 <= length; ++i1){
        if (i1 === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i1) === 92) {
                    return toOrig.slice(toStart + i1 + 1);
                } else if (i1 === 2) {
                    return toOrig.slice(toStart + i1);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i1) === 92) {
                    lastCommonSep = i1;
                } else if (i1 === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i1);
        const toCode = to.charCodeAt(toStart + i1);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i1;
    }
    if (i1 !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i1 = fromStart + lastCommonSep + 1; i1 <= fromEnd; ++i1){
        if (i1 === fromEnd || from.charCodeAt(i1) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
const WHITESPACE_ENCODINGS = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace(string) {
    return string.replaceAll(/[\s]/g, (c)=>{
        return WHITESPACE_ENCODINGS[c] ?? c;
    });
}
function toFileUrl(path) {
    if (!isAbsolute(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(pathname.replace(/%/g, "%25"));
    if (hostname !== undefined && hostname !== "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
function toNamespacedPath(path) {
    if (typeof path !== "string") return path;
    if (path.length === 0) return "";
    const resolvedPath = resolve(path);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path;
}
function _common(paths, sep) {
    const [first = "", ...remaining] = paths;
    if (first === "" || remaining.length === 0) {
        return first.substring(0, first.lastIndexOf(sep) + 1);
    }
    const parts = first.split(sep);
    let endOfPrefix = parts.length;
    for (const path of remaining){
        const compare = path.split(sep);
        for(let i1 = 0; i1 < endOfPrefix; i1++){
            if (compare[i1] !== parts[i1]) {
                endOfPrefix = i1;
            }
        }
        if (endOfPrefix === 0) {
            return "";
        }
    }
    const prefix = parts.slice(0, endOfPrefix).join(sep);
    return prefix.endsWith(sep) ? prefix : `${prefix}${sep}`;
}
const SEP = "\\";
const SEP_PATTERN = /[\\/]+/;
function common(paths, sep = SEP) {
    return _common(paths, sep);
}
const regExpEscapeChars = [
    "!",
    "$",
    "(",
    ")",
    "*",
    "+",
    ".",
    "=",
    "?",
    "[",
    "\\",
    "^",
    "{",
    "|"
];
const rangeEscapeChars = [
    "-",
    "\\",
    "]"
];
function _globToRegExp(c, glob, { extended = true, globstar: globstarOption = true, caseInsensitive = false } = {}) {
    if (glob === "") {
        return /(?!)/;
    }
    let newLength = glob.length;
    for(; newLength > 1 && c.seps.includes(glob[newLength - 1]); newLength--);
    glob = glob.slice(0, newLength);
    let regExpString = "";
    for(let j = 0; j < glob.length;){
        let segment = "";
        const groupStack = [];
        let inRange = false;
        let inEscape = false;
        let endsWithSep = false;
        let i1 = j;
        for(; i1 < glob.length && !c.seps.includes(glob[i1]); i1++){
            if (inEscape) {
                inEscape = false;
                const escapeChars = inRange ? rangeEscapeChars : regExpEscapeChars;
                segment += escapeChars.includes(glob[i1]) ? `\\${glob[i1]}` : glob[i1];
                continue;
            }
            if (glob[i1] === c.escapePrefix) {
                inEscape = true;
                continue;
            }
            if (glob[i1] === "[") {
                if (!inRange) {
                    inRange = true;
                    segment += "[";
                    if (glob[i1 + 1] === "!") {
                        i1++;
                        segment += "^";
                    } else if (glob[i1 + 1] === "^") {
                        i1++;
                        segment += "\\^";
                    }
                    continue;
                } else if (glob[i1 + 1] === ":") {
                    let k = i1 + 1;
                    let value = "";
                    while(glob[k + 1] !== undefined && glob[k + 1] !== ":"){
                        value += glob[k + 1];
                        k++;
                    }
                    if (glob[k + 1] === ":" && glob[k + 2] === "]") {
                        i1 = k + 2;
                        if (value === "alnum") segment += "\\dA-Za-z";
                        else if (value === "alpha") segment += "A-Za-z";
                        else if (value === "ascii") segment += "\x00-\x7F";
                        else if (value === "blank") segment += "\t ";
                        else if (value === "cntrl") segment += "\x00-\x1F\x7F";
                        else if (value === "digit") segment += "\\d";
                        else if (value === "graph") segment += "\x21-\x7E";
                        else if (value === "lower") segment += "a-z";
                        else if (value === "print") segment += "\x20-\x7E";
                        else if (value === "punct") {
                            segment += "!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_‘{|}~";
                        } else if (value === "space") segment += "\\s\v";
                        else if (value === "upper") segment += "A-Z";
                        else if (value === "word") segment += "\\w";
                        else if (value === "xdigit") segment += "\\dA-Fa-f";
                        continue;
                    }
                }
            }
            if (glob[i1] === "]" && inRange) {
                inRange = false;
                segment += "]";
                continue;
            }
            if (inRange) {
                if (glob[i1] === "\\") {
                    segment += `\\\\`;
                } else {
                    segment += glob[i1];
                }
                continue;
            }
            if (glob[i1] === ")" && groupStack.length > 0 && groupStack[groupStack.length - 1] !== "BRACE") {
                segment += ")";
                const type = groupStack.pop();
                if (type === "!") {
                    segment += c.wildcard;
                } else if (type !== "@") {
                    segment += type;
                }
                continue;
            }
            if (glob[i1] === "|" && groupStack.length > 0 && groupStack[groupStack.length - 1] !== "BRACE") {
                segment += "|";
                continue;
            }
            if (glob[i1] === "+" && extended && glob[i1 + 1] === "(") {
                i1++;
                groupStack.push("+");
                segment += "(?:";
                continue;
            }
            if (glob[i1] === "@" && extended && glob[i1 + 1] === "(") {
                i1++;
                groupStack.push("@");
                segment += "(?:";
                continue;
            }
            if (glob[i1] === "?") {
                if (extended && glob[i1 + 1] === "(") {
                    i1++;
                    groupStack.push("?");
                    segment += "(?:";
                } else {
                    segment += ".";
                }
                continue;
            }
            if (glob[i1] === "!" && extended && glob[i1 + 1] === "(") {
                i1++;
                groupStack.push("!");
                segment += "(?!";
                continue;
            }
            if (glob[i1] === "{") {
                groupStack.push("BRACE");
                segment += "(?:";
                continue;
            }
            if (glob[i1] === "}" && groupStack[groupStack.length - 1] === "BRACE") {
                groupStack.pop();
                segment += ")";
                continue;
            }
            if (glob[i1] === "," && groupStack[groupStack.length - 1] === "BRACE") {
                segment += "|";
                continue;
            }
            if (glob[i1] === "*") {
                if (extended && glob[i1 + 1] === "(") {
                    i1++;
                    groupStack.push("*");
                    segment += "(?:";
                } else {
                    const prevChar = glob[i1 - 1];
                    let numStars = 1;
                    while(glob[i1 + 1] === "*"){
                        i1++;
                        numStars++;
                    }
                    const nextChar = glob[i1 + 1];
                    if (globstarOption && numStars === 2 && [
                        ...c.seps,
                        undefined
                    ].includes(prevChar) && [
                        ...c.seps,
                        undefined
                    ].includes(nextChar)) {
                        segment += c.globstar;
                        endsWithSep = true;
                    } else {
                        segment += c.wildcard;
                    }
                }
                continue;
            }
            segment += regExpEscapeChars.includes(glob[i1]) ? `\\${glob[i1]}` : glob[i1];
        }
        if (groupStack.length > 0 || inRange || inEscape) {
            segment = "";
            for (const c of glob.slice(j, i1)){
                segment += regExpEscapeChars.includes(c) ? `\\${c}` : c;
                endsWithSep = false;
            }
        }
        regExpString += segment;
        if (!endsWithSep) {
            regExpString += i1 < glob.length ? c.sep : c.sepMaybe;
            endsWithSep = true;
        }
        while(c.seps.includes(glob[i1]))i1++;
        if (!(i1 > j)) {
            throw new Error("Assertion failure: i > j (potential infinite loop)");
        }
        j = i1;
    }
    regExpString = `^${regExpString}$`;
    return new RegExp(regExpString, caseInsensitive ? "i" : "");
}
const constants = {
    sep: "(?:\\\\|/)+",
    sepMaybe: "(?:\\\\|/)*",
    seps: [
        "\\",
        "/"
    ],
    globstar: "(?:[^\\\\/]*(?:\\\\|/|$)+)*",
    wildcard: "[^\\\\/]*",
    escapePrefix: "`"
};
function globToRegExp(glob, options = {}) {
    return _globToRegExp(constants, glob, options);
}
function isGlob(str) {
    const chars = {
        "{": "}",
        "(": ")",
        "[": "]"
    };
    const regex = /\\(.)|(^!|\*|\?|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/;
    if (str === "") {
        return false;
    }
    let match;
    while(match = regex.exec(str)){
        if (match[2]) return true;
        let idx = match.index + match[0].length;
        const open = match[1];
        const close = open ? chars[open] : null;
        if (open && close) {
            const n = str.indexOf(close, idx);
            if (n !== -1) {
                idx = n + 1;
            }
        }
        str = str.slice(idx);
    }
    return false;
}
function normalizeGlob(glob, { globstar = false } = {}) {
    if (glob.match(/\0/g)) {
        throw new Error(`Glob contains invalid characters: "${glob}"`);
    }
    if (!globstar) {
        return normalize(glob);
    }
    const s = SEP_PATTERN.source;
    const badParentPattern = new RegExp(`(?<=(${s}|^)\\*\\*${s})\\.\\.(?=${s}|$)`, "g");
    return normalize(glob.replace(badParentPattern, "\0")).replace(/\0/g, "..");
}
function joinGlobs(globs, { extended = true, globstar = false } = {}) {
    if (!globstar || globs.length === 0) {
        return join(...globs);
    }
    if (globs.length === 0) return ".";
    let joined;
    for (const glob of globs){
        const path = glob;
        if (path.length > 0) {
            if (!joined) joined = path;
            else joined += `${SEP}${path}`;
        }
    }
    if (!joined) return ".";
    return normalizeGlob(joined, {
        extended,
        globstar
    });
}
const sep = "\\";
const delimiter = ";";
const mod = {
    sep: sep,
    delimiter: delimiter,
    basename,
    dirname,
    extname,
    format,
    fromFileUrl,
    isAbsolute,
    join,
    normalize,
    parse,
    relative,
    resolve,
    toFileUrl,
    toNamespacedPath,
    common,
    SEP,
    SEP_PATTERN,
    globToRegExp,
    isGlob,
    joinGlobs,
    normalizeGlob
};
function isPosixPathSeparator1(code) {
    return code === 47;
}
function basename1(path, suffix = "") {
    assertArgs(path, suffix);
    const lastSegment = lastPathSegment(path, isPosixPathSeparator1);
    const strippedSegment = stripTrailingSeparators(lastSegment, isPosixPathSeparator1);
    return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
function dirname1(path) {
    assertArg(path);
    let end = -1;
    let matchedNonSeparator = false;
    for(let i1 = path.length - 1; i1 >= 1; --i1){
        if (isPosixPathSeparator1(path.charCodeAt(i1))) {
            if (matchedNonSeparator) {
                end = i1;
                break;
            }
        } else {
            matchedNonSeparator = true;
        }
    }
    if (end === -1) {
        return isPosixPathSeparator1(path.charCodeAt(0)) ? "/" : ".";
    }
    return stripTrailingSeparators(path.slice(0, end), isPosixPathSeparator1);
}
function extname1(path) {
    assertPath(path);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i1 = path.length - 1; i1 >= 0; --i1){
        const code = path.charCodeAt(i1);
        if (isPosixPathSeparator1(code)) {
            if (!matchedSlash) {
                startPart = i1 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i1 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i1;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function format1(pathObject) {
    assertArg1(pathObject);
    return _format("/", pathObject);
}
function fromFileUrl1(url) {
    url = assertArg2(url);
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function isAbsolute1(path) {
    assertPath(path);
    return path.length > 0 && isPosixPathSeparator1(path.charCodeAt(0));
}
function normalize1(path) {
    assertArg3(path);
    const isAbsolute = isPosixPathSeparator1(path.charCodeAt(0));
    const trailingSeparator = isPosixPathSeparator1(path.charCodeAt(path.length - 1));
    path = normalizeString(path, !isAbsolute, "/", isPosixPathSeparator1);
    if (path.length === 0 && !isAbsolute) path = ".";
    if (path.length > 0 && trailingSeparator) path += "/";
    if (isAbsolute) return `/${path}`;
    return path;
}
function join1(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i1 = 0, len = paths.length; i1 < len; ++i1){
        const path = paths[i1];
        assertPath(path);
        if (path.length > 0) {
            if (!joined) joined = path;
            else joined += `/${path}`;
        }
    }
    if (!joined) return ".";
    return normalize1(joined);
}
function parse1(path) {
    assertPath(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path.length === 0) return ret;
    const isAbsolute = isPosixPathSeparator1(path.charCodeAt(0));
    let start;
    if (isAbsolute) {
        ret.root = "/";
        start = 1;
    } else {
        start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i1 = path.length - 1;
    let preDotState = 0;
    for(; i1 >= start; --i1){
        const code = path.charCodeAt(i1);
        if (isPosixPathSeparator1(code)) {
            if (!matchedSlash) {
                startPart = i1 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i1 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i1;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute) {
                ret.base = ret.name = path.slice(1, end);
            } else {
                ret.base = ret.name = path.slice(startPart, end);
            }
        }
        ret.base = ret.base || "/";
    } else {
        if (startPart === 0 && isAbsolute) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
        } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
        }
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0) {
        ret.dir = stripTrailingSeparators(path.slice(0, startPart - 1), isPosixPathSeparator1);
    } else if (isAbsolute) ret.dir = "/";
    return ret;
}
function resolve1(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i1 = pathSegments.length - 1; i1 >= -1 && !resolvedAbsolute; i1--){
        let path;
        if (i1 >= 0) path = pathSegments[i1];
        else {
            const { Deno: Deno1 } = globalThis;
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
        }
        assertPath(path);
        if (path.length === 0) {
            continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = isPosixPathSeparator1(path.charCodeAt(0));
    }
    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator1);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function relative1(from, to) {
    assertArgs1(from, to);
    from = resolve1(from);
    to = resolve1(to);
    if (from === to) return "";
    let fromStart = 1;
    const fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (!isPosixPathSeparator1(from.charCodeAt(fromStart))) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (!isPosixPathSeparator1(to.charCodeAt(toStart))) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i1 = 0;
    for(; i1 <= length; ++i1){
        if (i1 === length) {
            if (toLen > length) {
                if (isPosixPathSeparator1(to.charCodeAt(toStart + i1))) {
                    return to.slice(toStart + i1 + 1);
                } else if (i1 === 0) {
                    return to.slice(toStart + i1);
                }
            } else if (fromLen > length) {
                if (isPosixPathSeparator1(from.charCodeAt(fromStart + i1))) {
                    lastCommonSep = i1;
                } else if (i1 === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i1);
        const toCode = to.charCodeAt(toStart + i1);
        if (fromCode !== toCode) break;
        else if (isPosixPathSeparator1(fromCode)) lastCommonSep = i1;
    }
    let out = "";
    for(i1 = fromStart + lastCommonSep + 1; i1 <= fromEnd; ++i1){
        if (i1 === fromEnd || isPosixPathSeparator1(from.charCodeAt(i1))) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (isPosixPathSeparator1(to.charCodeAt(toStart))) ++toStart;
        return to.slice(toStart);
    }
}
function toFileUrl1(path) {
    if (!isAbsolute1(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(path.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
function toNamespacedPath1(path) {
    return path;
}
const SEP1 = "/";
const SEP_PATTERN1 = /\/+/;
function common1(paths, sep = SEP1) {
    return _common(paths, sep);
}
const constants1 = {
    sep: "/+",
    sepMaybe: "/*",
    seps: [
        "/"
    ],
    globstar: "(?:[^/]*(?:/|$)+)*",
    wildcard: "[^/]*",
    escapePrefix: "\\"
};
function globToRegExp1(glob, options = {}) {
    return _globToRegExp(constants1, glob, options);
}
function normalizeGlob1(glob, { globstar = false } = {}) {
    if (glob.match(/\0/g)) {
        throw new Error(`Glob contains invalid characters: "${glob}"`);
    }
    if (!globstar) {
        return normalize1(glob);
    }
    const s = SEP_PATTERN1.source;
    const badParentPattern = new RegExp(`(?<=(${s}|^)\\*\\*${s})\\.\\.(?=${s}|$)`, "g");
    return normalize1(glob.replace(badParentPattern, "\0")).replace(/\0/g, "..");
}
function joinGlobs1(globs, { extended = true, globstar = false } = {}) {
    if (!globstar || globs.length === 0) {
        return join1(...globs);
    }
    if (globs.length === 0) return ".";
    let joined;
    for (const glob of globs){
        const path = glob;
        if (path.length > 0) {
            if (!joined) joined = path;
            else joined += `${SEP1}${path}`;
        }
    }
    if (!joined) return ".";
    return normalizeGlob1(joined, {
        extended,
        globstar
    });
}
const sep1 = "/";
const delimiter1 = ":";
const mod1 = {
    sep: sep1,
    delimiter: delimiter1,
    basename: basename1,
    dirname: dirname1,
    extname: extname1,
    format: format1,
    fromFileUrl: fromFileUrl1,
    isAbsolute: isAbsolute1,
    join: join1,
    normalize: normalize1,
    parse: parse1,
    relative: relative1,
    resolve: resolve1,
    toFileUrl: toFileUrl1,
    toNamespacedPath: toNamespacedPath1,
    common: common1,
    SEP: SEP1,
    SEP_PATTERN: SEP_PATTERN1,
    globToRegExp: globToRegExp1,
    isGlob,
    joinGlobs: joinGlobs1,
    normalizeGlob: normalizeGlob1
};
function basename2(path, suffix = "") {
    return isWindows ? basename(path, suffix) : basename1(path, suffix);
}
function dirname2(path) {
    return isWindows ? dirname(path) : dirname1(path);
}
function extname2(path) {
    return isWindows ? extname(path) : extname1(path);
}
function format2(pathObject) {
    return isWindows ? format(pathObject) : format1(pathObject);
}
function fromFileUrl2(url) {
    return isWindows ? fromFileUrl(url) : fromFileUrl1(url);
}
function isAbsolute2(path) {
    return isWindows ? isAbsolute(path) : isAbsolute1(path);
}
function join2(...paths) {
    return isWindows ? join(...paths) : join1(...paths);
}
function normalize2(path) {
    return isWindows ? normalize(path) : normalize1(path);
}
function parse2(path) {
    return isWindows ? parse(path) : parse1(path);
}
function relative2(from, to) {
    return isWindows ? relative(from, to) : relative1(from, to);
}
function resolve2(...pathSegments) {
    return isWindows ? resolve(...pathSegments) : resolve1(...pathSegments);
}
function toFileUrl2(path) {
    return isWindows ? toFileUrl(path) : toFileUrl1(path);
}
function toNamespacedPath2(path) {
    return isWindows ? toNamespacedPath(path) : toNamespacedPath1(path);
}
const SEP2 = isWindows ? "\\" : "/";
const SEP_PATTERN2 = isWindows ? /[\\/]+/ : /\/+/;
function common2(paths, sep = SEP2) {
    return _common(paths, sep);
}
function globToRegExp2(glob, options = {}) {
    return options.os === "windows" || !options.os && isWindows ? globToRegExp(glob, options) : globToRegExp1(glob, options);
}
function joinGlobs2(globs, options = {}) {
    return isWindows ? joinGlobs(globs, options) : joinGlobs1(globs, options);
}
function normalizeGlob2(glob, options = {}) {
    return isWindows ? normalizeGlob(glob, options) : normalizeGlob1(glob, options);
}
const sep2 = isWindows ? mod.sep : mod1.sep;
const delimiter2 = isWindows ? mod.delimiter : mod1.delimiter;
const mod2 = {
    win32: mod,
    posix: mod1,
    sep: sep2,
    delimiter: delimiter2,
    isGlob,
    basename: basename2,
    dirname: dirname2,
    extname: extname2,
    format: format2,
    fromFileUrl: fromFileUrl2,
    isAbsolute: isAbsolute2,
    join: join2,
    normalize: normalize2,
    parse: parse2,
    relative: relative2,
    resolve: resolve2,
    toFileUrl: toFileUrl2,
    toNamespacedPath: toNamespacedPath2,
    common: common2,
    SEP: SEP2,
    SEP_PATTERN: SEP_PATTERN2,
    globToRegExp: globToRegExp2,
    joinGlobs: joinGlobs2,
    normalizeGlob: normalizeGlob2
};
const rawToEntityEntries = [
    [
        "&",
        "&amp;"
    ],
    [
        "<",
        "&lt;"
    ],
    [
        ">",
        "&gt;"
    ],
    [
        '"',
        "&quot;"
    ],
    [
        "'",
        "&#39;"
    ]
];
const defaultEntityList = Object.fromEntries([
    ...rawToEntityEntries.map(([raw, entity])=>[
            entity,
            raw
        ]),
    [
        "&apos;",
        "'"
    ],
    [
        "&nbsp;",
        "\xa0"
    ]
]);
const rawToEntity = new Map(rawToEntityEntries);
const rawRe = new RegExp(`[${[
    ...rawToEntity.keys()
].join("")}]`, "g");
function escape(str) {
    return str.replaceAll(rawRe, (m)=>rawToEntity.get(m));
}
const defaultUnescapeOptions = {
    entityList: defaultEntityList
};
const RX_DEC_ENTITY = /&#([0-9]+);/g;
const RX_HEX_ENTITY = /&#x(\p{AHex}+);/gu;
const entityListRegexCache = new WeakMap();
function unescape(str, options = {}) {
    const { entityList } = {
        ...defaultUnescapeOptions,
        ...options
    };
    let entityRe = entityListRegexCache.get(entityList);
    if (!entityRe) {
        entityRe = new RegExp(`(${Object.keys(entityList).sort((a, b)=>b.length - a.length).join("|")})`, "g");
        entityListRegexCache.set(entityList, entityRe);
    }
    return str.replaceAll(entityRe, (m)=>entityList[m]).replaceAll(RX_DEC_ENTITY, (_, dec)=>codePointStrToChar(dec, 10)).replaceAll(RX_HEX_ENTITY, (_, hex)=>codePointStrToChar(hex, 16));
}
function codePointStrToChar(codePointStr, radix) {
    const codePoint = parseInt(codePointStr, radix);
    return codePoint > 0x10ffff ? "�" : String.fromCodePoint(codePoint);
}
const mod3 = {
    escape,
    unescape
};
class FileLoader {
    #root;
    constructor(root){
        this.#root = root;
    }
    async load(file) {
        return {
            source: await Deno.readTextFile(file)
        };
    }
    resolve(from, file) {
        if (file.startsWith(".")) {
            return mod2.join(mod2.dirname(from), file);
        }
        return mod2.join(this.#root, file);
    }
}
function __default() {
    return (env)=>{
        env.tags.push(ifTag);
        env.tags.push(elseTag);
    };
}
function ifTag(env, code, output, tokens) {
    if (!code.startsWith("if ")) {
        return;
    }
    const condition = code.replace(/^if\s+/, "").trim();
    const compiled = [];
    compiled.push(`if (${condition}) {`);
    compiled.push(...env.compileTokens(tokens, output, [
        "/if"
    ]));
    tokens.shift();
    compiled.push("}");
    return compiled.join("\n");
}
function elseTag(_env, code) {
    if (!code.startsWith("else ") && code !== "else") {
        return;
    }
    const match = code.match(/^else(\s+if\s+(.*))?$/);
    if (!match) {
        throw new Error(`Invalid else: ${code}`);
    }
    const [_, ifTag, condition] = match;
    if (ifTag) {
        return `} else if (${condition}) {`;
    }
    return "} else {";
}
function __default1() {
    return (env)=>{
        env.tags.push(forTag);
        env.utils.toIterator = toIterator;
    };
}
function forTag(env, code, output, tokens) {
    if (!code.startsWith("for ")) {
        return;
    }
    const compiled = [];
    const match = code.match(/^for\s+(await\s+)?(\w+)(?:,\s*(\w+))?\s+of\s+([\s|\S]+)$/);
    if (!match) {
        throw new Error(`Invalid for loop: ${code}`);
    }
    const [_, aw, var1, var2, collection] = match;
    if (var2) {
        compiled.push(`for ${aw || ""}(let [${var1}, ${var2}] of __env.utils.toIterator(${env.compileFilters(tokens, collection)}, true)) {`);
    } else {
        compiled.push(`for ${aw || ""}(let ${var1} of __env.utils.toIterator(${env.compileFilters(tokens, collection)})) {`);
    }
    compiled.push(...env.compileTokens(tokens, output, [
        "/for"
    ]));
    tokens.shift();
    compiled.push("}");
    return compiled.join("\n");
}
function toIterator(item, withKeys = false) {
    if (item === undefined || item === null) {
        return [];
    }
    if (Array.isArray(item)) {
        return withKeys ? Object.entries(item) : item;
    }
    if (typeof item === "function") {
        return toIterator(item(), withKeys);
    }
    if (typeof item === "object" && item !== null) {
        return withKeys ? Object.entries(item) : Object.values(item);
    }
    if (typeof item === "string") {
        return toIterator(item.split(""), withKeys);
    }
    if (typeof item === "number") {
        return toIterator(new Array(item).fill(0).map((_, i1)=>i1 + 1), withKeys);
    }
    return toIterator([
        item
    ], withKeys);
}
function __default2() {
    return (env)=>{
        env.tags.push(includeTag);
    };
}
function includeTag(env, code, output, tokens) {
    if (!code.startsWith("include ")) {
        return;
    }
    const match = code?.match(/^include\s+([^{]+|`[^`]+`)+(?:\{([\s|\S]*)\})?$/);
    if (!match) {
        throw new Error(`Invalid include: ${code}`);
    }
    const [_, file, data] = match;
    const { dataVarname } = env.options;
    return `{
    const __tmp = await __env.run(${file},
      {...${dataVarname}${data ? `, ${data}` : ""}},
      __file
    );
    ${output} += ${env.compileFilters(tokens, "__tmp.content")};
  }`;
}
function __default3() {
    return (env)=>{
        env.tags.push(setTag);
    };
}
function setTag(env, code, _output, tokens) {
    if (!code.startsWith("set ")) {
        return;
    }
    const expression = code.replace(/^set\s+/, "");
    const { dataVarname } = env.options;
    if (expression.includes("=")) {
        const match = code.match(/^set\s+([\w]+)\s*=\s*([\s\S]+)$/);
        if (!match) {
            throw new Error(`Invalid set tag: ${code}`);
        }
        const [, variable, value] = match;
        const val = env.compileFilters(tokens, value);
        return `if (${dataVarname}.hasOwnProperty("${variable}")) {
      ${variable} = ${val};
    } else {
      var ${variable} = ${val};
    }
    ${dataVarname}["${variable}"] = ${variable};
    `;
    }
    const compiled = [];
    const compiledFilters = env.compileFilters(tokens, expression);
    compiled.push(`if (${dataVarname}.hasOwnProperty("${expression}")) {
    ${expression} = "";
  } else {
    var ${expression} = "";
  }
  `);
    compiled.push(...env.compileTokens(tokens, expression, [
        "/set"
    ]));
    if (tokens.length && (tokens[0][0] !== "tag" || tokens[0][1] !== "/set")) {
        throw new Error(`Missing closing tag for set tag: ${code}`);
    }
    tokens.shift();
    compiled.push(`${expression} = ${compiledFilters};`);
    compiled.push(`${dataVarname}["${expression.trim()}"] = ${expression};`);
    return compiled.join("\n");
}
function __default4() {
    return (env)=>{
        env.tags.push(jsTag);
    };
}
function jsTag(_env, code) {
    if (!code.startsWith(">")) {
        return;
    }
    return code.replace(/^>\s+/, "");
}
function __default5() {
    return (env)=>{
        env.tags.push(layoutTag);
    };
}
function layoutTag(env, code, output, tokens) {
    if (!code.startsWith("layout ")) {
        return;
    }
    const match = code?.match(/^layout\s+([^{]+|`[^`]+`)+(?:\{([\s|\S]*)\})?$/);
    if (!match) {
        throw new Error(`Invalid wrap: ${code}`);
    }
    const [_, file, data] = match;
    const varname = "__content";
    const compiled = [];
    const compiledFilters = env.compileFilters(tokens, varname);
    compiled.push("{");
    compiled.push(`let ${varname} = "";`);
    compiled.push(...env.compileTokens(tokens, varname, [
        "/layout"
    ]));
    if (tokens.length && (tokens[0][0] !== "tag" || tokens[0][1] !== "/layout")) {
        throw new Error(`Missing closing tag for layout tag: ${code}`);
    }
    tokens.shift();
    compiled.push(`${varname} = ${compiledFilters};`);
    const { dataVarname } = env.options;
    compiled.push(`const __tmp = await __env.run(${file},
      {...${dataVarname}${data ? `, ${data}` : ""}, content: ${env.compileFilters(tokens, varname)}},
      __file
    );
    ${output} += __tmp.content;`);
    compiled.push("}");
    return compiled.join("\n");
}
function __default6() {
    return (env)=>{
        env.tags.push(functionTag);
    };
}
function functionTag(env, code, _output, tokens) {
    if (!code.match(/(export\s+)?(async\s+)?function\s/)) {
        return;
    }
    const match = code.match(/^(export\s+)?(async\s+)?function\s+(\w+)\s*(\([^)]+\))?$/);
    if (!match) {
        throw new Error(`Invalid function: ${code}`);
    }
    const [_, exp, as, name, args] = match;
    const compiled = [];
    compiled.push(`${as || ""} function ${name} ${args || "()"} {`);
    compiled.push(`let __output = "";`);
    if (exp) {
        compiled.push(...env.compileTokens(tokens, "__output", [
            "/export"
        ]));
        if (tokens.length && (tokens[0][0] !== "tag" || tokens[0][1] !== "/export")) {
            throw new Error(`Missing closing tag for export function tag: ${code}`);
        }
    } else {
        compiled.push(...env.compileTokens(tokens, "__output", [
            "/function"
        ]));
        if (tokens.length && (tokens[0][0] !== "tag" || tokens[0][1] !== "/function")) {
            throw new Error(`Missing closing tag for function tag: ${code}`);
        }
    }
    tokens.shift();
    compiled.push(`return __output;`);
    compiled.push(`}`);
    if (exp) {
        compiled.push(`__exports["${name}"] = ${name}`);
    }
    return compiled.join("\n");
}
function __default7() {
    return (env)=>{
        env.tags.push(importTag);
    };
}
function importTag(env, code) {
    if (!code.startsWith("import ")) {
        return;
    }
    const match = code?.match(/^import\s+(\{[\s|\S]*\}|\w+)\s+from\s+(.+)$/);
    if (!match) {
        throw new Error(`Invalid import: ${code}`);
    }
    const [, vars, file] = match;
    const { dataVarname } = env.options;
    return `let ${vars} = await __env.run(${file}, {...${dataVarname}}, __file);`;
}
function __default8() {
    return (env)=>{
        env.tags.push(exportTag);
    };
}
function exportTag(env, code, _output, tokens) {
    if (!code.startsWith("export ")) {
        return;
    }
    const expression = code.replace(/^export\s+/, "");
    const { dataVarname } = env.options;
    if (expression.includes("=")) {
        const match = code.match(/^export\s+([\w]+)\s*=\s*([\s\S]+)$/);
        if (!match) {
            throw new Error(`Invalid export tag: ${code}`);
        }
        const [, variable, value] = match;
        const val = env.compileFilters(tokens, value);
        return `if (${dataVarname}.hasOwnProperty("${variable}")) {
      ${variable} = ${val};
    } else {
      var ${variable} = ${val};
    }
    ${dataVarname}["${variable}"] = ${variable};
    __exports["${variable}"] = ${variable};
    `;
    }
    const compiled = [];
    const compiledFilters = env.compileFilters(tokens, expression);
    compiled.push(`if (${dataVarname}.hasOwnProperty("${expression}")) {
    ${expression} = "";
  } else {
    var ${expression} = "";
  }
  `);
    compiled.push(...env.compileTokens(tokens, expression, [
        "/export"
    ]));
    if (tokens.length && (tokens[0][0] !== "tag" || tokens[0][1] !== "/export")) {
        throw new Error(`Missing closing tag for export tag: ${code}`);
    }
    tokens.shift();
    compiled.push(`${expression} = ${compiledFilters};`);
    compiled.push(`${dataVarname}["${expression.trim()}"] = ${expression};`);
    compiled.push(`__exports["${expression.trim()}"] = ${expression};`);
    return compiled.join("\n");
}
function __default9() {
    return (env)=>{
        env.tags.push(setTag1);
    };
}
function setTag1(env, code, output, tokens) {
    if (!code.startsWith("echo ")) {
        return;
    }
    const value = code.replace(/^echo\s+/, "");
    const val = env.compileFilters(tokens, value, env.options.autoescape);
    return `${output} += ${val};`;
}
function __default10() {
    return (env)=>{
        env.filters.escape = mod3.escape;
    };
}
function __default11() {
    return (env)=>{
        env.filters.unescape = mod3.unescape;
    };
}
function __default12(options = {}) {
    const loader = typeof options.includes === "object" ? options.includes : new FileLoader(options.includes || Deno.cwd());
    const env = new Environment({
        loader,
        dataVarname: options.dataVarname || "it",
        autoescape: options.autoescape ?? false,
        useWith: options.useWith ?? true
    });
    env.use(__default());
    env.use(__default1());
    env.use(__default4());
    env.use(__default2());
    env.use(__default3());
    env.use(__default5());
    env.use(__default6());
    env.use(__default7());
    env.use(__default8());
    env.use(__default9());
    env.use(__default10());
    env.use(__default11());
    return env;
}
import { micromark } from "npm:micromark@4.0.0";
const render = micromark;
const languages = new Map();
const defineIntl = (templateId, functions)=>{
    for (const [language, template] of Object.entries(functions)){
        let temp;
        const languageFile = languages.get(language) ?? (languages.set(language, temp = new Map()), temp);
        languageFile.set(templateId, template);
    }
};
const intl = (lang)=>(id, ...parts)=>{
        return "1";
        const template = languages.get(lang)?.get(id);
        if (!template) {
            return `No such template ${JSON.stringify(id)} for language ${lang}`;
        }
        return template(parts);
    };
defineIntl("Contents", {
    af: (v)=>`Inhouds`,
    en: (v)=>`Contents`,
    tr: (v)=>`İçindekiler`,
    tok: (v)=>`ijo insa`
});
defineIntl("Previous: {}", {
    af: (v)=>`Vorige: ${v[1]}`,
    en: (v)=>`Previous: ${v[1]}`,
    tr: (v)=>`Önceki: ${v[1]}`,
    tok: (v)=>`lon poka open: ${v[1]}`
});
defineIntl("Next: {}", {
    af: (v)=>`Volgende: ${v[1]}`,
    en: (v)=>`Next: ${v[1]}`,
    tr: (v)=>`Sonraki: ${v[1]}`,
    tok: (v)=>`lon poka pini: ${v[1]}`
});
const importMeta = {
    url: "https://deno.land/x/deno_dom@v0.1.38/build/deno-wasm/deno-wasm.js",
    main: false
};
let wasm;
let WASM_VECTOR_LEN = 0;
let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}
let cachedTextEncoder = new TextEncoder("utf-8");
const encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
} : function(arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
};
function passStringToWasm0(arg, malloc, realloc) {
    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length);
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }
    let len = arg.length;
    let ptr = malloc(len);
    const mem = getUint8Memory0();
    let offset = 0;
    for(; offset < len; offset++){
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }
    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);
        offset += ret.written;
    }
    WASM_VECTOR_LEN = offset;
    return ptr;
}
let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}
let cachedTextDecoder = new TextDecoder("utf-8", {
    ignoreBOM: true,
    fatal: true
});
cachedTextDecoder.decode();
function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
function parse3(html) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        var ptr0 = passStringToWasm0(html, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.parse(retptr, ptr0, len0);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        return getStringFromWasm0(r0, r1);
    } finally{
        wasm.__wbindgen_add_to_stack_pointer(16);
        wasm.__wbindgen_free(r0, r1);
    }
}
function parse_frag(html) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        var ptr0 = passStringToWasm0(html, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.parse_frag(retptr, ptr0, len0);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        return getStringFromWasm0(r0, r1);
    } finally{
        wasm.__wbindgen_add_to_stack_pointer(16);
        wasm.__wbindgen_free(r0, r1);
    }
}
async function load(module1, imports) {
    if (typeof Response === "function" && module1 instanceof Response) {
        if (typeof WebAssembly.instantiateStreaming === "function") {
            try {
                return await WebAssembly.instantiateStreaming(module1, imports);
            } catch (e) {
                if (module1.headers.get("Content-Type") != "application/wasm") {
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
                } else {
                    throw e;
                }
            }
        }
        const bytes = await module1.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);
    } else {
        const instance = await WebAssembly.instantiate(module1, imports);
        if (instance instanceof WebAssembly.Instance) {
            return {
                instance,
                module: module1
            };
        } else {
            return instance;
        }
    }
}
async function init(input) {
    if (typeof input === "undefined") {
        input = new URL("deno-wasm_bg.wasm", importMeta.url);
    }
    const imports = {};
    imports.env = {
        now () {}
    };
    input = Uint8Array.from(atob(""), (c)=>c.charCodeAt(0));
    const { instance, module: module1 } = await load(input, imports);
    wasm = instance.exports;
    init.__wbindgen_wasm_module = module1;
    return wasm;
}
let parse4 = (_html)=>{
    console.error("Error: deno-dom: No parser registered");
    Deno.exit(1);
};
let parseFrag = (_html)=>{
    console.error("Error: deno-dom: No parser registered");
    Deno.exit(1);
};
const originalParse = parse4;
function register(func, fragFunc) {
    if (parse4 !== originalParse) {
        return;
    }
    parse4 = func;
    parseFrag = fragFunc;
}
const __default13 = {
    Element: null,
    Document: null,
    DocumentFragment: null
};
(()=>{
    var _computedKey;
    _computedKey = Symbol.hasInstance;
    return class HTMLCollection {
        constructor(){
            throw new TypeError("Illegal constructor");
        }
        static [_computedKey](value) {
            return value.constructor === HTMLCollectionClass;
        }
    };
})();
const HTMLCollectionMutatorSym = Symbol();
const HTMLCollectionClass = (()=>{
    class HTMLCollection extends Array {
        forEach(cb, thisArg = undefined) {
            super.forEach(cb, thisArg);
        }
        item(index) {
            return this[index] ?? null;
        }
        [HTMLCollectionMutatorSym]() {
            return {
                push: Array.prototype.push.bind(this),
                splice: Array.prototype.splice.bind(this),
                indexOf: Array.prototype.indexOf.bind(this)
            };
        }
        toString() {
            return "[object HTMLCollection]";
        }
    }
    return HTMLCollection;
})();
for (const staticMethod of [
    "from",
    "isArray",
    "of"
]){
    HTMLCollectionClass[staticMethod] = undefined;
}
for (const instanceMethod of [
    "concat",
    "copyWithin",
    "every",
    "fill",
    "filter",
    "find",
    "findIndex",
    "flat",
    "flatMap",
    "includes",
    "indexOf",
    "join",
    "lastIndexOf",
    "map",
    "pop",
    "push",
    "reduce",
    "reduceRight",
    "reverse",
    "shift",
    "slice",
    "some",
    "sort",
    "splice",
    "toLocaleString",
    "unshift",
    "entries",
    "forEach",
    "keys",
    "values"
]){
    HTMLCollectionClass.prototype[instanceMethod] = undefined;
}
const HTMLCollection = HTMLCollectionClass;
const CTOR_KEY = Symbol();
var NodeType;
(()=>{
    var _computedKey;
    _computedKey = Symbol.hasInstance;
    return class NodeList {
        constructor(){
            throw new TypeError("Illegal constructor");
        }
        static [_computedKey](value) {
            return value.constructor === NodeListClass;
        }
    };
})();
(function(NodeType) {
    NodeType[NodeType["ELEMENT_NODE"] = 1] = "ELEMENT_NODE";
    NodeType[NodeType["ATTRIBUTE_NODE"] = 2] = "ATTRIBUTE_NODE";
    NodeType[NodeType["TEXT_NODE"] = 3] = "TEXT_NODE";
    NodeType[NodeType["CDATA_SECTION_NODE"] = 4] = "CDATA_SECTION_NODE";
    NodeType[NodeType["ENTITY_REFERENCE_NODE"] = 5] = "ENTITY_REFERENCE_NODE";
    NodeType[NodeType["ENTITY_NODE"] = 6] = "ENTITY_NODE";
    NodeType[NodeType["PROCESSING_INSTRUCTION_NODE"] = 7] = "PROCESSING_INSTRUCTION_NODE";
    NodeType[NodeType["COMMENT_NODE"] = 8] = "COMMENT_NODE";
    NodeType[NodeType["DOCUMENT_NODE"] = 9] = "DOCUMENT_NODE";
    NodeType[NodeType["DOCUMENT_TYPE_NODE"] = 10] = "DOCUMENT_TYPE_NODE";
    NodeType[NodeType["DOCUMENT_FRAGMENT_NODE"] = 11] = "DOCUMENT_FRAGMENT_NODE";
    NodeType[NodeType["NOTATION_NODE"] = 12] = "NOTATION_NODE";
})(NodeType || (NodeType = {}));
function getElementsByClassName(element, className, search) {
    for (const child of element.childNodes){
        if (child.nodeType === NodeType.ELEMENT_NODE) {
            const classList = className.trim().split(/\s+/);
            let matchesCount = 0;
            for (const singleClassName of classList){
                if (child.classList.contains(singleClassName)) {
                    matchesCount++;
                }
            }
            if (matchesCount === classList.length) {
                search.push(child);
            }
            getElementsByClassName(child, className, search);
        }
    }
    return search;
}
function getOuterHTMLOpeningTag(parentElement) {
    return "<" + parentElement.localName + getElementAttributesString(parentElement) + ">";
}
const voidElements = new Set([
    "area",
    "base",
    "br",
    "col",
    "embed",
    "hr",
    "img",
    "input",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
]);
function getOuterOrInnerHtml(parentElement, asOuterHtml) {
    let outerHTMLOpeningTag = "";
    let outerHTMLClosingTag = "";
    let innerHTML = "";
    if (asOuterHtml) {
        outerHTMLOpeningTag = getOuterHTMLOpeningTag(parentElement);
        outerHTMLClosingTag = `</${parentElement.localName}>`;
        if (voidElements.has(parentElement.localName)) {
            return outerHTMLOpeningTag;
        }
    }
    const initialChildNodes = parentElement.localName === "template" ? parentElement.content.childNodes : parentElement.childNodes;
    const childNodeDepth = [
        initialChildNodes
    ];
    const indexDepth = [
        0
    ];
    const closingTagDepth = [
        outerHTMLClosingTag
    ];
    let depth = 0;
    depthLoop: while(depth > -1){
        const child = childNodeDepth[depth][indexDepth[depth]];
        if (child) {
            switch(child.nodeType){
                case NodeType.ELEMENT_NODE:
                    {
                        innerHTML += getOuterHTMLOpeningTag(child);
                        const childLocalName = child.localName;
                        if (!voidElements.has(childLocalName)) {
                            if (childLocalName === "template") {
                                childNodeDepth.push(child.content.childNodes);
                            } else {
                                childNodeDepth.push(child.childNodes);
                            }
                            indexDepth.push(0);
                            closingTagDepth.push(`</${childLocalName}>`);
                            depth++;
                            continue depthLoop;
                        }
                        break;
                    }
                case NodeType.COMMENT_NODE:
                    innerHTML += `<!--${child.data}-->`;
                    break;
                case NodeType.TEXT_NODE:
                    switch(child.parentNode.localName){
                        case "style":
                        case "script":
                        case "xmp":
                        case "iframe":
                        case "noembed":
                        case "noframes":
                        case "plaintext":
                            innerHTML += child.data;
                            break;
                        default:
                            innerHTML += child.data.replace(/&/g, "&amp;").replace(/\xA0/g, "&nbsp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                            break;
                    }
                    break;
            }
        } else {
            depth--;
            indexDepth.pop();
            childNodeDepth.pop();
            innerHTML += closingTagDepth.pop();
        }
        indexDepth[depth]++;
    }
    return outerHTMLOpeningTag + innerHTML;
}
function getElementAttributesString(element) {
    let out = "";
    for (const attribute of element.getAttributeNames()){
        out += ` ${attribute.toLowerCase()}`;
        out += `="${element.getAttribute(attribute).replace(/&/g, "&amp;").replace(/\xA0/g, "&nbsp;").replace(/"/g, "&quot;")}"`;
    }
    return out;
}
function isDocumentFragment(node) {
    let obj = node;
    if (!(obj && typeof obj === "object")) {
        return false;
    }
    while(true){
        switch(obj.constructor){
            case __default13.DocumentFragment:
                return true;
            case Node:
            case __default13.Element:
                return false;
            case Object:
            case null:
            case undefined:
                return false;
            default:
                obj = Reflect.getPrototypeOf(obj);
        }
    }
}
function moveDocumentFragmentChildren(fragment, newParent) {
    const childCount = fragment.childNodes.length;
    for (const child of fragment.childNodes){
        child._setParent(newParent);
    }
    const mutator = fragment._getChildNodesMutator();
    mutator.splice(0, childCount);
}
const nodesAndTextNodes = (nodes, parentNode)=>{
    return nodes.flatMap((n)=>{
        if (isDocumentFragment(n)) {
            const children = Array.from(n.childNodes);
            moveDocumentFragmentChildren(n, parentNode);
            return children;
        } else {
            const node = n instanceof Node ? n : new Text("" + n);
            if (n === node && parentNode) {
                parentNode._assertNotAncestor(node);
            }
            node._remove(true);
            node._setParent(parentNode, true);
            return [
                node
            ];
        }
    });
};
function insertBeforeAfter(node, nodes, before) {
    const parentNode = node.parentNode;
    const mutator = parentNode._getChildNodesMutator();
    let viablePrevNextSibling = null;
    {
        const difference = before ? -1 : +1;
        for(let i1 = mutator.indexOf(node) + difference; 0 <= i1 && i1 < parentNode.childNodes.length; i1 += difference){
            if (!nodes.includes(parentNode.childNodes[i1])) {
                viablePrevNextSibling = parentNode.childNodes[i1];
                break;
            }
        }
    }
    nodes = nodesAndTextNodes(nodes, parentNode);
    let index;
    if (viablePrevNextSibling) {
        index = mutator.indexOf(viablePrevNextSibling) + (before ? 1 : 0);
    } else {
        index = before ? 0 : parentNode.childNodes.length;
    }
    mutator.splice(index, 0, ...nodes);
}
const nodeListMutatorSym = Symbol();
const nodeListCachedMutator = Symbol();
const { push, splice, slice, indexOf, filter } = Array.prototype;
class Node extends EventTarget {
    nodeName;
    nodeType;
    #nodeValue;
    childNodes;
    parentNode;
    parentElement;
    #childNodesMutator;
    #ownerDocument;
    _ancestors;
    static ELEMENT_NODE = NodeType.ELEMENT_NODE;
    static ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE;
    static TEXT_NODE = NodeType.TEXT_NODE;
    static CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE;
    static ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE;
    static ENTITY_NODE = NodeType.ENTITY_NODE;
    static PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE;
    static COMMENT_NODE = NodeType.COMMENT_NODE;
    static DOCUMENT_NODE = NodeType.DOCUMENT_NODE;
    static DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE;
    static DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE;
    static NOTATION_NODE = NodeType.NOTATION_NODE;
    constructor(nodeName, nodeType, parentNode, key){
        if (key !== CTOR_KEY) {
            throw new TypeError("Illegal constructor.");
        }
        super();
        this.nodeName = nodeName;
        this.nodeType = nodeType;
        this.#nodeValue = null;
        this.parentNode = null;
        this.#ownerDocument = null;
        this._ancestors = new Set();
        this.#nodeValue = null;
        this.childNodes = new NodeList();
        this.#childNodesMutator = this.childNodes[nodeListMutatorSym]();
        this.parentElement = parentNode;
        if (parentNode) {
            parentNode.appendChild(this);
        }
    }
    _getChildNodesMutator() {
        return this.#childNodesMutator;
    }
    _setParent(newParent, force = false) {
        const sameParent = this.parentNode === newParent;
        const shouldUpdateParentAndAncestors = !sameParent || force;
        if (shouldUpdateParentAndAncestors) {
            this.parentNode = newParent;
            if (newParent) {
                if (!sameParent) {
                    if (newParent.nodeType === NodeType.ELEMENT_NODE) {
                        this.parentElement = newParent;
                    } else {
                        this.parentElement = null;
                    }
                    this._setOwnerDocument(newParent.#ownerDocument);
                }
                this._ancestors = new Set(newParent._ancestors);
                this._ancestors.add(newParent);
            } else {
                this.parentElement = null;
                this._ancestors.clear();
            }
            for (const child of this.childNodes){
                child._setParent(this, shouldUpdateParentAndAncestors);
            }
        }
    }
    _assertNotAncestor(child) {
        if (child.contains(this)) {
            throw new DOMException("The new child is an ancestor of the parent");
        }
    }
    _setOwnerDocument(document1) {
        if (this.#ownerDocument !== document1) {
            this.#ownerDocument = document1;
            for (const child of this.childNodes){
                child._setOwnerDocument(document1);
            }
        }
    }
    contains(child) {
        return child._ancestors.has(this) || child === this;
    }
    get ownerDocument() {
        return this.#ownerDocument;
    }
    get nodeValue() {
        return this.#nodeValue;
    }
    set nodeValue(value) {}
    get textContent() {
        let out = "";
        for (const child of this.childNodes){
            switch(child.nodeType){
                case NodeType.TEXT_NODE:
                    out += child.nodeValue;
                    break;
                case NodeType.ELEMENT_NODE:
                    out += child.textContent;
                    break;
            }
        }
        return out;
    }
    set textContent(content) {
        for (const child of this.childNodes){
            child._setParent(null);
        }
        this._getChildNodesMutator().splice(0, this.childNodes.length);
        this.appendChild(new Text(content));
    }
    get firstChild() {
        return this.childNodes[0] || null;
    }
    get lastChild() {
        return this.childNodes[this.childNodes.length - 1] || null;
    }
    hasChildNodes() {
        return Boolean(this.childNodes.length);
    }
    cloneNode(deep = false) {
        const copy = this._shallowClone();
        copy._setOwnerDocument(this.ownerDocument);
        if (deep) {
            for (const child of this.childNodes){
                copy.appendChild(child.cloneNode(true));
            }
        }
        return copy;
    }
    _shallowClone() {
        throw new Error("Illegal invocation");
    }
    _remove(skipSetParent = false) {
        const parent = this.parentNode;
        if (parent) {
            const nodeList = parent._getChildNodesMutator();
            const idx = nodeList.indexOf(this);
            nodeList.splice(idx, 1);
            if (!skipSetParent) {
                this._setParent(null);
            }
        }
    }
    appendChild(child) {
        if (isDocumentFragment(child)) {
            const mutator = this._getChildNodesMutator();
            mutator.push(...child.childNodes);
            moveDocumentFragmentChildren(child, this);
            return child;
        } else {
            return child._appendTo(this);
        }
    }
    _appendTo(parentNode) {
        parentNode._assertNotAncestor(this);
        const oldParentNode = this.parentNode;
        if (oldParentNode === parentNode) {
            if (parentNode._getChildNodesMutator().indexOf(this) !== -1) {
                return this;
            }
        } else if (oldParentNode) {
            this._remove();
        }
        this._setParent(parentNode, true);
        parentNode._getChildNodesMutator().push(this);
        return this;
    }
    removeChild(child) {
        if (child && typeof child === "object") {
            if (child.parentNode === this) {
                child._remove();
                return child;
            } else {
                throw new DOMException("Node.removeChild: The node to be removed is not a child of this node");
            }
        } else {
            throw new TypeError("Node.removeChild: Argument 1 is not an object.");
        }
    }
    replaceChild(newChild, oldChild) {
        if (oldChild.parentNode !== this) {
            throw new Error("Old child's parent is not the current node.");
        }
        oldChild._replaceWith(newChild);
        return oldChild;
    }
    insertBefore(newNode, refNode) {
        this._assertNotAncestor(newNode);
        const mutator = this._getChildNodesMutator();
        if (refNode === null) {
            this.appendChild(newNode);
            return newNode;
        }
        const index = mutator.indexOf(refNode);
        if (index === -1) {
            throw new Error("DOMException: Child to insert before is not a child of this node");
        }
        if (isDocumentFragment(newNode)) {
            mutator.splice(index, 0, ...newNode.childNodes);
            moveDocumentFragmentChildren(newNode, this);
        } else {
            const oldParentNode = newNode.parentNode;
            const oldMutator = oldParentNode?._getChildNodesMutator();
            if (oldMutator) {
                oldMutator.splice(oldMutator.indexOf(newNode), 1);
            }
            newNode._setParent(this, oldParentNode !== this);
            mutator.splice(index, 0, newNode);
        }
        return newNode;
    }
    _replaceWith(...nodes) {
        if (this.parentNode) {
            const parentNode = this.parentNode;
            const mutator = parentNode._getChildNodesMutator();
            let viableNextSibling = null;
            {
                const thisIndex = mutator.indexOf(this);
                for(let i1 = thisIndex + 1; i1 < parentNode.childNodes.length; i1++){
                    if (!nodes.includes(parentNode.childNodes[i1])) {
                        viableNextSibling = parentNode.childNodes[i1];
                        break;
                    }
                }
            }
            nodes = nodesAndTextNodes(nodes, parentNode);
            let index = viableNextSibling ? mutator.indexOf(viableNextSibling) : parentNode.childNodes.length;
            let deleteNumber;
            if (parentNode.childNodes[index - 1] === this) {
                index--;
                deleteNumber = 1;
            } else {
                deleteNumber = 0;
            }
            mutator.splice(index, deleteNumber, ...nodes);
            this._setParent(null);
        }
    }
    get nextSibling() {
        const parent = this.parentNode;
        if (!parent) {
            return null;
        }
        const index = parent._getChildNodesMutator().indexOf(this);
        const next = parent.childNodes[index + 1] || null;
        return next;
    }
    get previousSibling() {
        const parent = this.parentNode;
        if (!parent) {
            return null;
        }
        const index = parent._getChildNodesMutator().indexOf(this);
        const prev = parent.childNodes[index - 1] || null;
        return prev;
    }
    static DOCUMENT_POSITION_DISCONNECTED = 1;
    static DOCUMENT_POSITION_PRECEDING = 2;
    static DOCUMENT_POSITION_FOLLOWING = 4;
    static DOCUMENT_POSITION_CONTAINS = 8;
    static DOCUMENT_POSITION_CONTAINED_BY = 16;
    static DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
    compareDocumentPosition(other) {
        if (other === this) {
            return 0;
        }
        if (!(other instanceof Node)) {
            throw new TypeError("Node.compareDocumentPosition: Argument 1 does not implement interface Node.");
        }
        let node1Root = other;
        let node2Root = this;
        const node1Hierarchy = [
            node1Root
        ];
        const node2Hierarchy = [
            node2Root
        ];
        while(node1Root.parentNode ?? node2Root.parentNode){
            node1Root = node1Root.parentNode ? (node1Hierarchy.push(node1Root.parentNode), node1Root.parentNode) : node1Root;
            node2Root = node2Root.parentNode ? (node2Hierarchy.push(node2Root.parentNode), node2Root.parentNode) : node2Root;
        }
        if (node1Root !== node2Root) {
            return Node.DOCUMENT_POSITION_DISCONNECTED | Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | Node.DOCUMENT_POSITION_PRECEDING;
        }
        const longerHierarchy = node1Hierarchy.length > node2Hierarchy.length ? node1Hierarchy : node2Hierarchy;
        const shorterHierarchy = longerHierarchy === node1Hierarchy ? node2Hierarchy : node1Hierarchy;
        if (longerHierarchy[longerHierarchy.length - shorterHierarchy.length] === shorterHierarchy[0]) {
            return longerHierarchy === node1Hierarchy ? Node.DOCUMENT_POSITION_CONTAINED_BY | Node.DOCUMENT_POSITION_FOLLOWING : Node.DOCUMENT_POSITION_CONTAINS | Node.DOCUMENT_POSITION_PRECEDING;
        }
        const longerStart = longerHierarchy.length - shorterHierarchy.length;
        for(let i1 = shorterHierarchy.length - 1; i1 >= 0; i1--){
            const shorterHierarchyNode = shorterHierarchy[i1];
            const longerHierarchyNode = longerHierarchy[longerStart + i1];
            if (longerHierarchyNode !== shorterHierarchyNode) {
                const siblings = shorterHierarchyNode.parentNode._getChildNodesMutator();
                if (siblings.indexOf(shorterHierarchyNode) < siblings.indexOf(longerHierarchyNode)) {
                    if (shorterHierarchy === node1Hierarchy) {
                        return Node.DOCUMENT_POSITION_PRECEDING;
                    } else {
                        return Node.DOCUMENT_POSITION_FOLLOWING;
                    }
                } else {
                    if (longerHierarchy === node1Hierarchy) {
                        return Node.DOCUMENT_POSITION_PRECEDING;
                    } else {
                        return Node.DOCUMENT_POSITION_FOLLOWING;
                    }
                }
            }
        }
        return Node.DOCUMENT_POSITION_FOLLOWING;
    }
    getRootNode(opts = {}) {
        if (this.parentNode) {
            return this.parentNode.getRootNode(opts);
        }
        if (opts.composed && this.host) {
            return this.host.getRootNode(opts);
        }
        return this;
    }
}
Node.prototype.ELEMENT_NODE = NodeType.ELEMENT_NODE;
Node.prototype.ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE;
Node.prototype.TEXT_NODE = NodeType.TEXT_NODE;
Node.prototype.CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE;
Node.prototype.ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE;
Node.prototype.ENTITY_NODE = NodeType.ENTITY_NODE;
Node.prototype.PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE;
Node.prototype.COMMENT_NODE = NodeType.COMMENT_NODE;
Node.prototype.DOCUMENT_NODE = NodeType.DOCUMENT_NODE;
Node.prototype.DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE;
Node.prototype.DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE;
Node.prototype.NOTATION_NODE = NodeType.NOTATION_NODE;
class NodeListMutatorImpl {
    arrayInstance;
    elementViews;
    constructor(arrayInstance){
        this.arrayInstance = arrayInstance;
        this.elementViews = [];
    }
    push(...items) {
        for (const view of this.elementViews){
            for (const item of items){
                if (item.nodeType === Node.ELEMENT_NODE) {
                    push.call(view, item);
                }
            }
        }
        return push.call(this.arrayInstance, ...items);
    }
    splice(index, deleteCount = 0, ...items) {
        for (const view of this.elementViews){
            const toDelete = filter.call(slice.call(this.arrayInstance, index, index + deleteCount), (item)=>item.nodeType === Node.ELEMENT_NODE);
            const toInsert = items.filter((item)=>item.nodeType === Node.ELEMENT_NODE);
            let elementViewSpliceIndex = -1;
            for(let idx = index; idx < this.arrayInstance.length; idx++){
                const item = this.arrayInstance[idx];
                if (item.nodeType === Node.ELEMENT_NODE) {
                    elementViewSpliceIndex = indexOf.call(view, item);
                    break;
                }
            }
            if (elementViewSpliceIndex === -1) {
                elementViewSpliceIndex = view.length;
            }
            if (toDelete.length) {
                splice.call(view, elementViewSpliceIndex, toDelete.length);
            }
            splice.call(view, elementViewSpliceIndex, 0, ...toInsert);
        }
        return splice.call(this.arrayInstance, index, deleteCount, ...items);
    }
    indexOf(item, fromIndex = 0) {
        return indexOf.call(this.arrayInstance, item, fromIndex);
    }
    indexOfElementsView(item, fromIndex = 0) {
        return indexOf.call(this.elementsView(), item, fromIndex);
    }
    elementsView() {
        let view = this.elementViews[0];
        if (!view) {
            view = new HTMLCollection();
            this.elementViews.push(view);
            push.call(view, ...filter.call(this.arrayInstance, (item)=>item.nodeType === Node.ELEMENT_NODE));
        }
        return view;
    }
}
const NodeListClass = (()=>{
    class NodeList extends Array {
        forEach(cb, thisArg = undefined) {
            super.forEach(cb, thisArg);
        }
        item(index) {
            return this[index] ?? null;
        }
        [nodeListMutatorSym]() {
            const cachedMutator = this[nodeListCachedMutator];
            if (cachedMutator) {
                return cachedMutator;
            } else {
                const cachedMutator = new NodeListMutatorImpl(this);
                this[nodeListCachedMutator] = cachedMutator;
                return cachedMutator;
            }
        }
        toString() {
            return "[object NodeList]";
        }
    }
    return NodeList;
})();
for (const staticMethod of [
    "from",
    "isArray",
    "of"
]){
    NodeListClass[staticMethod] = undefined;
}
for (const instanceMethod of [
    "concat",
    "copyWithin",
    "every",
    "fill",
    "filter",
    "find",
    "findIndex",
    "flat",
    "flatMap",
    "includes",
    "indexOf",
    "join",
    "lastIndexOf",
    "map",
    "pop",
    "push",
    "reduce",
    "reduceRight",
    "reverse",
    "shift",
    "slice",
    "some",
    "sort",
    "splice",
    "toLocaleString",
    "unshift"
]){
    NodeListClass.prototype[instanceMethod] = undefined;
}
const NodeList = NodeListClass;
class CharacterData extends Node {
    #nodeValue = "";
    constructor(data, nodeName, nodeType, parentNode, key){
        super(nodeName, nodeType, parentNode, key);
        this.#nodeValue = data;
    }
    get nodeValue() {
        return this.#nodeValue;
    }
    set nodeValue(value) {
        this.#nodeValue = String(value ?? "");
    }
    get data() {
        return this.#nodeValue;
    }
    set data(value) {
        this.nodeValue = value;
    }
    get textContent() {
        return this.#nodeValue;
    }
    set textContent(value) {
        this.nodeValue = value;
    }
    get length() {
        return this.data.length;
    }
    before(...nodes) {
        if (this.parentNode) {
            insertBeforeAfter(this, nodes, true);
        }
    }
    after(...nodes) {
        if (this.parentNode) {
            insertBeforeAfter(this, nodes, false);
        }
    }
    remove() {
        this._remove();
    }
    replaceWith(...nodes) {
        this._replaceWith(...nodes);
    }
}
class Text extends CharacterData {
    constructor(text = ""){
        super(String(text), "#text", NodeType.TEXT_NODE, null, CTOR_KEY);
    }
    _shallowClone() {
        return new Text(this.textContent);
    }
    get textContent() {
        return this.nodeValue;
    }
}
class Comment extends CharacterData {
    constructor(text = ""){
        super(String(text), "#comment", NodeType.COMMENT_NODE, null, CTOR_KEY);
    }
    _shallowClone() {
        return new Comment(this.textContent);
    }
    get textContent() {
        return this.nodeValue;
    }
}
const customByTagNameSym = Symbol();
const customByClassNameSym = Symbol();
class DocumentFragment1 extends Node {
    constructor(){
        super("#document-fragment", NodeType.DOCUMENT_FRAGMENT_NODE, null, CTOR_KEY);
    }
    get childElementCount() {
        return this._getChildNodesMutator().elementsView().length;
    }
    get children() {
        return this._getChildNodesMutator().elementsView();
    }
    get firstElementChild() {
        const elements = this._getChildNodesMutator().elementsView();
        return elements[0] ?? null;
    }
    get lastElementChild() {
        const elements = this._getChildNodesMutator().elementsView();
        return elements[elements.length - 1] ?? null;
    }
    append(...nodes) {
        const mutator = this._getChildNodesMutator();
        mutator.push(...nodesAndTextNodes(nodes, this));
    }
    prepend(...nodes) {
        const mutator = this._getChildNodesMutator();
        mutator.splice(0, 0, ...nodesAndTextNodes(nodes, this));
    }
    replaceChildren(...nodes) {
        const mutator = this._getChildNodesMutator();
        for (const child of this.childNodes){
            child._setParent(null);
        }
        mutator.splice(0, this.childNodes.length);
        mutator.splice(0, 0, ...nodesAndTextNodes(nodes, this));
    }
    getElementById(id) {
        for (const child of this.childNodes){
            if (child.nodeType === NodeType.ELEMENT_NODE) {
                if (child.id === id) {
                    return child;
                }
                const search = child.getElementById(id);
                if (search) {
                    return search;
                }
            }
        }
        return null;
    }
    querySelector(selectors) {
        if (!this.ownerDocument) {
            throw new Error("DocumentFragment must have an owner document");
        }
        return this.ownerDocument._nwapi.first(selectors, this);
    }
    querySelectorAll(selectors) {
        if (!this.ownerDocument) {
            throw new Error("DocumentFragment must have an owner document");
        }
        const nodeList = new NodeList();
        const mutator = nodeList[nodeListMutatorSym]();
        mutator.push(...this.ownerDocument._nwapi.select(selectors, this));
        return nodeList;
    }
}
__default13.DocumentFragment = DocumentFragment1;
function documentFragmentGetElementsByTagName(tagName) {
    const search = [];
    if (tagName === "*") {
        return documentFragmentGetElementsByTagNameWildcard(this, search);
    }
    for (const child of this.childNodes){
        if (child.nodeType === NodeType.ELEMENT_NODE) {
            if (child.tagName === tagName) {
                search.push(child);
            }
            child._getElementsByTagName(tagName, search);
        }
    }
    return search;
}
function documentFragmentGetElementsByClassName(className) {
    return getElementsByClassName(this, className, []);
}
function documentFragmentGetElementsByTagNameWildcard(fragment, search) {
    for (const child of fragment.childNodes){
        if (child.nodeType === NodeType.ELEMENT_NODE) {
            search.push(child);
            child._getElementsByTagNameWildcard(search);
        }
    }
    return search;
}
DocumentFragment1.prototype[customByTagNameSym] = documentFragmentGetElementsByTagName;
DocumentFragment1.prototype[customByClassNameSym] = documentFragmentGetElementsByClassName;
const __default14 = (document1)=>{
    const NW = Factory({
        document: document1,
        DOMException
    }, "null");
    NW.configure({
        IDS_DUPES: false,
        LOGERRORS: false
    });
    return NW;
};
function Factory(global, Export) {
    var version = 'nwsapi-2.2.0', doc = global.document, root = doc.documentElement, slice = Array.prototype.slice, WSP = '[\\x20\\t\\r\\n\\f]', CFG = {
        operators: '[~*^$|]=|=',
        combinators: '[\\x20\\t>+~](?=[^>+~])'
    }, NOT = {
        double_enc: '(?=(?:[^"]*["][^"]*["])*[^"]*$)',
        single_enc: "(?=(?:[^']*['][^']*['])*[^']*$)",
        parens_enc: '(?![^\\x28]*\\x29)',
        square_enc: '(?![^\\x5b]*\\x5d)'
    }, REX = {
        HasEscapes: RegExp('\\\\'),
        HexNumbers: RegExp('^[0-9a-fA-F]'),
        EscOrQuote: RegExp('^\\\\|[\\x22\\x27]'),
        RegExpChar: RegExp('(?:(?!\\\\)[\\\\^$.*+?()[\\]{}|\\/])', 'g'),
        TrimSpaces: RegExp('[\\r\\n\\f]|^' + WSP + '+|' + WSP + '+$', 'g'),
        CommaGroup: RegExp('(\\s*,\\s*)' + NOT.square_enc + NOT.parens_enc, 'g'),
        SplitGroup: RegExp('((?:\\x28[^\\x29]*\\x29|\\[[^\\]]*\\]|\\\\.|[^,])+)', 'g'),
        FixEscapes: RegExp('\\\\([0-9a-fA-F]{1,6}' + WSP + '?|.)|([\\x22\\x27])', 'g'),
        CombineWSP: RegExp('[\\n\\r\\f\\x20]+' + NOT.single_enc + NOT.double_enc, 'g'),
        TabCharWSP: RegExp('(\\x20?\\t+\\x20?)' + NOT.single_enc + NOT.double_enc, 'g'),
        PseudosWSP: RegExp('\\s+([-+])\\s+' + NOT.square_enc, 'g')
    }, STD = {
        combinator: RegExp('\\s?([>+~])\\s?', 'g'),
        apimethods: RegExp('^(?:[a-z]+|\\*)\\|', 'i'),
        namespaces: RegExp('(\\*|[a-z]+)\\|[-a-z]+', 'i')
    }, GROUPS = {
        linguistic: '(dir|lang)\\x28\\s?([-\\w]{2,})\\s?(?:\\x29|$)',
        logicalsel: '(is|where|matches|not)\\x28\\s?([^()]*|[^\\x28]*\\x28[^\\x29]*\\x29)\\s?(?:\\x29|$)',
        treestruct: '(nth(?:-last)?(?:-child|-of-type))(?:\\x28\\s?(even|odd|(?:[-+]?\\d*)(?:n\\s?[-+]?\\s?\\d*)?)\\s?(?:\\x29|$))',
        locationpc: '(any-link|link|visited|target)\\b',
        useraction: '(hover|active|focus|focus-within)\\b',
        structural: '(root|empty|(?:(?:first|last|only)(?:-child|-of-type)))\\b',
        inputstate: '(enabled|disabled|read-only|read-write|placeholder-shown|default)\\b',
        inputvalue: '(checked|indeterminate|required|optional|valid|invalid|in-range|out-of-range)\\b',
        pseudo_sng: '(after|before|first-letter|first-line)\\b',
        pseudo_dbl: ':(after|before|first-letter|first-line|selection|placeholder|-webkit-[-a-zA-Z0-9]{2,})\\b'
    }, Patterns = {
        treestruct: RegExp('^:(?:' + GROUPS.treestruct + ')(.*)', 'i'),
        structural: RegExp('^:(?:' + GROUPS.structural + ')(.*)', 'i'),
        linguistic: RegExp('^:(?:' + GROUPS.linguistic + ')(.*)', 'i'),
        useraction: RegExp('^:(?:' + GROUPS.useraction + ')(.*)', 'i'),
        inputstate: RegExp('^:(?:' + GROUPS.inputstate + ')(.*)', 'i'),
        inputvalue: RegExp('^:(?:' + GROUPS.inputvalue + ')(.*)', 'i'),
        locationpc: RegExp('^:(?:' + GROUPS.locationpc + ')(.*)', 'i'),
        logicalsel: RegExp('^:(?:' + GROUPS.logicalsel + ')(.*)', 'i'),
        pseudo_dbl: RegExp('^:(?:' + GROUPS.pseudo_dbl + ')(.*)', 'i'),
        pseudo_sng: RegExp('^:(?:' + GROUPS.pseudo_sng + ')(.*)', 'i'),
        children: RegExp('^' + WSP + '?\\>' + WSP + '?(.*)'),
        adjacent: RegExp('^' + WSP + '?\\+' + WSP + '?(.*)'),
        relative: RegExp('^' + WSP + '?\\~' + WSP + '?(.*)'),
        ancestor: RegExp('^' + WSP + '+(.*)'),
        universal: RegExp('^\\*(.*)'),
        namespace: RegExp('^(\\w+|\\*)?\\|(.*)')
    }, RTL = RegExp('^[\\u0591-\\u08ff\\ufb1d-\\ufdfd\\ufe70-\\ufefc ]+$'), qsNotArgs = 'Not enough arguments', qsInvalid = ' is not a valid selector', reNthElem = RegExp('(:nth(?:-last)?-child)', 'i'), reNthType = RegExp('(:nth(?:-last)?-of-type)', 'i'), reOptimizer, reValidator, Config = {
        IDS_DUPES: true,
        MIXEDCASE: true,
        LOGERRORS: true,
        VERBOSITY: true
    }, NAMESPACE, QUIRKS_MODE, HTML_DOCUMENT, ATTR_STD_OPS = {
        '=': 1,
        '^=': 1,
        '$=': 1,
        '|=': 1,
        '*=': 1,
        '~=': 1
    }, HTML_TABLE = {
        'accept': 1,
        'accept-charset': 1,
        'align': 1,
        'alink': 1,
        'axis': 1,
        'bgcolor': 1,
        'charset': 1,
        'checked': 1,
        'clear': 1,
        'codetype': 1,
        'color': 1,
        'compact': 1,
        'declare': 1,
        'defer': 1,
        'dir': 1,
        'direction': 1,
        'disabled': 1,
        'enctype': 1,
        'face': 1,
        'frame': 1,
        'hreflang': 1,
        'http-equiv': 1,
        'lang': 1,
        'language': 1,
        'link': 1,
        'media': 1,
        'method': 1,
        'multiple': 1,
        'nohref': 1,
        'noresize': 1,
        'noshade': 1,
        'nowrap': 1,
        'readonly': 1,
        'rel': 1,
        'rev': 1,
        'rules': 1,
        'scope': 1,
        'scrolling': 1,
        'selected': 1,
        'shape': 1,
        'target': 1,
        'text': 1,
        'type': 1,
        'valign': 1,
        'valuetype': 1,
        'vlink': 1
    }, Combinators = {}, Selectors = {}, Operators = {
        '=': {
            p1: '^',
            p2: '$',
            p3: 'true'
        },
        '^=': {
            p1: '^',
            p2: '',
            p3: 'true'
        },
        '$=': {
            p1: '',
            p2: '$',
            p3: 'true'
        },
        '*=': {
            p1: '',
            p2: '',
            p3: 'true'
        },
        '|=': {
            p1: '^',
            p2: '(-|$)',
            p3: 'true'
        },
        '~=': {
            p1: '(^|\\s)',
            p2: '(\\s|$)',
            p3: 'true'
        }
    }, concatCall = function(nodes, callback) {
        var i1 = 0, l1 = nodes.length, list = Array(l1);
        while(l1 > i1){
            if (false === callback(list[i1] = nodes[i1])) break;
            ++i1;
        }
        return list;
    }, concatList = function(list, nodes) {
        var i1 = -1, l1 = nodes.length;
        while(l1--){
            list[list.length] = nodes[++i1];
        }
        return list;
    }, documentOrder = function(a, b) {
        if (!hasDupes && a === b) {
            hasDupes = true;
            return 0;
        }
        return a.compareDocumentPosition(b) & 4 ? -1 : 1;
    }, hasDupes = false, unique = function(nodes) {
        var i1 = 0, j = -1, l1 = nodes.length + 1, list = [];
        while(--l1){
            if (nodes[i1++] === nodes[i1]) continue;
            list[++j] = nodes[i1 - 1];
        }
        hasDupes = false;
        return list;
    }, hasMixedCaseTagNames = function(context) {
        var ns, api = 'getElementsByTagNameNS';
        context = context.ownerDocument || context;
        ns = context.documentElement.namespaceURI || 'http://www.w3.org/1999/xhtml';
        return context[api]('*', '*').length - context[api](ns, '*').length > 0;
    }, switchContext = function(context, force) {
        var oldDoc = doc;
        doc = context.ownerDocument || context;
        if (force || oldDoc !== doc) {
            root = doc.documentElement;
            HTML_DOCUMENT = isHTML(doc);
            QUIRKS_MODE = HTML_DOCUMENT && doc.compatMode.indexOf('CSS') < 0;
            NAMESPACE = root && root.namespaceURI;
            Snapshot.doc = doc;
            Snapshot.root = root;
        }
        return Snapshot.from = context;
    }, codePointToUTF16 = function(codePoint) {
        if (codePoint < 1 || codePoint > 0x10ffff || codePoint > 0xd7ff && codePoint < 0xe000) {
            return '\\ufffd';
        }
        if (codePoint < 0x10000) {
            var lowHex = '000' + codePoint.toString(16);
            return '\\u' + lowHex.substr(lowHex.length - 4);
        }
        return '\\u' + ((codePoint - 0x10000 >> 0x0a) + 0xd800).toString(16) + '\\u' + ((codePoint - 0x10000) % 0x400 + 0xdc00).toString(16);
    }, stringFromCodePoint = function(codePoint) {
        if (codePoint < 1 || codePoint > 0x10ffff || codePoint > 0xd7ff && codePoint < 0xe000) {
            return '\ufffd';
        }
        if (codePoint < 0x10000) {
            return String.fromCharCode(codePoint);
        }
        return String.fromCodePoint ? String.fromCodePoint(codePoint) : String.fromCharCode((codePoint - 0x10000 >> 0x0a) + 0xd800, (codePoint - 0x10000) % 0x400 + 0xdc00);
    }, convertEscapes = function(str) {
        return REX.HasEscapes.test(str) ? str.replace(REX.FixEscapes, function(substring, p1, p2) {
            return p2 ? '\\' + p2 : REX.HexNumbers.test(p1) ? codePointToUTF16(parseInt(p1, 16)) : REX.EscOrQuote.test(p1) ? substring : p1;
        }) : str;
    }, unescapeIdentifier = function(str) {
        return REX.HasEscapes.test(str) ? str.replace(REX.FixEscapes, function(substring, p1, p2) {
            return p2 ? p2 : REX.HexNumbers.test(p1) ? stringFromCodePoint(parseInt(p1, 16)) : REX.EscOrQuote.test(p1) ? substring : p1;
        }) : str;
    }, method = {
        '#': 'getElementById',
        '*': 'getElementsByTagNameNS',
        '.': 'getElementsByClassName'
    }, compat = {
        '#': function(c, n) {
            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));
            return function(e, f) {
                return byId(n, c);
            };
        },
        '*': function(c, n) {
            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));
            return function(e, f) {
                return byTag(n, c);
            };
        },
        '.': function(c, n) {
            REX.HasEscapes.test(n) && (n = unescapeIdentifier(n));
            return function(e, f) {
                return byClass(n, c);
            };
        }
    }, byIdRaw = function(id, context) {
        var node = context, nodes = [], next = node.firstElementChild;
        while(node = next){
            node.id == id && (nodes[nodes.length] = node);
            if (next = node.firstElementChild || node.nextElementSibling) continue;
            while(!next && (node = node.parentElement) && node !== context){
                next = node.nextElementSibling;
            }
        }
        return nodes;
    }, byId = function(id, context) {
        var e, nodes, api = method['#'];
        if (Config.IDS_DUPES === false) {
            if (api in context) {
                return (e = context[api](id)) ? [
                    e
                ] : none;
            }
        } else {
            if ('all' in context) {
                if (e = context.all[id]) {
                    if (e.nodeType == 1) return e.getAttribute('id') != id ? [] : [
                        e
                    ];
                    else if (id == 'length') return (e = context[api](id)) ? [
                        e
                    ] : none;
                    for(i = 0, l = e.length, nodes = []; l > i; ++i){
                        if (e[i].id == id) nodes[nodes.length] = e[i];
                    }
                    return nodes && nodes.length ? nodes : [
                        nodes
                    ];
                } else return none;
            }
        }
        return byIdRaw(id, context);
    }, byTag = function(tag, context) {
        var e, nodes, api = method['*'];
        if (api in context) {
            return slice.call(context[api]('*', tag));
        } else {
            tag = tag.toLowerCase();
            if (e = context.firstElementChild) {
                if (!(e.nextElementSibling || tag == '*' || e.localName == tag)) {
                    return slice.call(e[api]('*', tag));
                } else {
                    nodes = [];
                    do {
                        if (tag == '*' || e.localName == tag) nodes[nodes.length] = e;
                        concatList(nodes, e[api]('*', tag));
                    }while (e = e.nextElementSibling)
                }
            } else nodes = none;
        }
        return nodes;
    }, byClass = function(cls, context) {
        var e, nodes, api = method['.'], reCls;
        if (api in context) {
            return slice.call(context[api](cls));
        } else {
            if (e = context.firstElementChild) {
                reCls = RegExp('(^|\\s)' + cls + '(\\s|$)', QUIRKS_MODE ? 'i' : '');
                if (!(e.nextElementSibling || reCls.test(e.className))) {
                    return slice.call(e[api](cls));
                } else {
                    nodes = [];
                    do {
                        if (reCls.test(e.className)) nodes[nodes.length] = e;
                        concatList(nodes, e[api](cls));
                    }while (e = e.nextElementSibling)
                }
            } else nodes = none;
        }
        return nodes;
    }, hasAttributeNS = function(e, name) {
        var i1, l1, attr = e.getAttributeNames();
        name = RegExp(':?' + name + '$', HTML_DOCUMENT ? 'i' : '');
        for(i1 = 0, l1 = attr.length; l1 > i1; ++i1){
            if (name.test(attr[i1])) return true;
        }
        return false;
    }, nthElement = function() {
        var idx = 0, len = 0, set = 0, parent = undefined, parents = Array(), nodes = Array();
        return function(element, dir) {
            if (dir == 2) {
                idx = 0;
                len = 0;
                set = 0;
                nodes.length = 0;
                parents.length = 0;
                parent = undefined;
                return -1;
            }
            var e, i1, j, k, l1;
            if (parent === element.parentElement) {
                i1 = set;
                j = idx;
                l1 = len;
            } else {
                l1 = parents.length;
                parent = element.parentElement;
                for(i1 = -1, j = 0, k = l1 - 1; l1 > j; ++j, --k){
                    if (parents[j] === parent) {
                        i1 = j;
                        break;
                    }
                    if (parents[k] === parent) {
                        i1 = k;
                        break;
                    }
                }
                if (i1 < 0) {
                    parents[i1 = l1] = parent;
                    l1 = 0;
                    nodes[i1] = Array();
                    e = parent && parent.firstElementChild || element;
                    while(e){
                        nodes[i1][l1] = e;
                        if (e === element) j = l1;
                        e = e.nextElementSibling;
                        ++l1;
                    }
                    set = i1;
                    idx = 0;
                    len = l1;
                    if (l1 < 2) return l1;
                } else {
                    l1 = nodes[i1].length;
                    set = i1;
                }
            }
            if (element !== nodes[i1][j] && element !== nodes[i1][j = 0]) {
                for(j = 0, e = nodes[i1], k = l1 - 1; l1 > j; ++j, --k){
                    if (e[j] === element) {
                        break;
                    }
                    if (e[k] === element) {
                        j = k;
                        break;
                    }
                }
            }
            idx = j + 1;
            len = l1;
            return dir ? l1 - j : idx;
        };
    }(), nthOfType = function() {
        var idx = 0, len = 0, set = 0, parent = undefined, parents = Array(), nodes = Array();
        return function(element, dir) {
            if (dir == 2) {
                idx = 0;
                len = 0;
                set = 0;
                nodes.length = 0;
                parents.length = 0;
                parent = undefined;
                return -1;
            }
            var e, i1, j, k, l1, name = element.localName;
            if (nodes[set] && nodes[set][name] && parent === element.parentElement) {
                i1 = set;
                j = idx;
                l1 = len;
            } else {
                l1 = parents.length;
                parent = element.parentElement;
                for(i1 = -1, j = 0, k = l1 - 1; l1 > j; ++j, --k){
                    if (parents[j] === parent) {
                        i1 = j;
                        break;
                    }
                    if (parents[k] === parent) {
                        i1 = k;
                        break;
                    }
                }
                if (i1 < 0 || !nodes[i1][name]) {
                    parents[i1 = l1] = parent;
                    nodes[i1] || (nodes[i1] = Object());
                    l1 = 0;
                    nodes[i1][name] = Array();
                    e = parent && parent.firstElementChild || element;
                    while(e){
                        if (e === element) j = l1;
                        if (e.localName == name) {
                            nodes[i1][name][l1] = e;
                            ++l1;
                        }
                        e = e.nextElementSibling;
                    }
                    set = i1;
                    idx = j;
                    len = l1;
                    if (l1 < 2) return l1;
                } else {
                    l1 = nodes[i1][name].length;
                    set = i1;
                }
            }
            if (element !== nodes[i1][name][j] && element !== nodes[i1][name][j = 0]) {
                for(j = 0, e = nodes[i1][name], k = l1 - 1; l1 > j; ++j, --k){
                    if (e[j] === element) {
                        break;
                    }
                    if (e[k] === element) {
                        j = k;
                        break;
                    }
                }
            }
            idx = j + 1;
            len = l1;
            return dir ? l1 - j : idx;
        };
    }(), isHTML = function(node) {
        var doc = node.ownerDocument || node;
        return doc.nodeType == 9 && 'contentType' in doc ? doc.contentType.indexOf('/html') > 0 : doc.createElement('DiV').localName == 'div';
    }, configure = function(option, clear) {
        if (typeof option == 'string') {
            return !!Config[option];
        }
        if (typeof option != 'object') {
            return Config;
        }
        for(var i1 in option){
            Config[i1] = !!option[i1];
        }
        if (clear) {
            matchResolvers = {};
            selectResolvers = {};
        }
        setIdentifierSyntax();
        return true;
    }, emit = function(message, proto) {
        var err;
        if (Config.VERBOSITY) {
            if (proto) {
                err = new proto(message);
            } else {
                err = new global.DOMException(message, 'SyntaxError');
            }
            throw err;
        }
        if (Config.LOGERRORS && console && console.log) {
            console.log(message);
        }
    }, initialize = function(doc) {
        setIdentifierSyntax();
        lastContext = switchContext(doc, true);
    }, setIdentifierSyntax = function() {
        var identifier = '(?=[^0-9])' + '(?:-{2}' + '|[a-zA-Z0-9-_]' + '|[^\\x00-\\x9f]' + '|\\\\[^\\r\\n\\f0-9a-fA-F]' + '|\\\\[0-9a-fA-F]{1,6}(?:\\r\\n|\\s)?' + '|\\\\.' + ')+', pseudonames = '[-\\w]+', pseudoparms = '(?:[-+]?\\d*)(?:n\\s?[-+]?\\s?\\d*)', doublequote = '"[^"\\\\]*(?:\\\\.[^"\\\\]*)*(?:"|$)', singlequote = "'[^'\\\\]*(?:\\\\.[^'\\\\]*)*(?:'|$)", attrparser = identifier + '|' + doublequote + '|' + singlequote, attrvalues = '([\\x22\\x27]?)((?!\\3)*|(?:\\\\?.)*?)(?:\\3|$)', attributes = '\\[' + '(?:\\*\\|)?' + WSP + '?' + '(' + identifier + '(?::' + identifier + ')?)' + WSP + '?' + '(?:' + '(' + CFG.operators + ')' + WSP + '?' + '(?:' + attrparser + ')' + ')?' + WSP + '?' + '(i)?' + WSP + '?' + '(?:\\]|$)', attrmatcher = attributes.replace(attrparser, attrvalues), pseudoclass = '(?:\\x28' + WSP + '*' + '(?:' + pseudoparms + '?)?|' + '(?:\\*|\\|)|' + '(?:' + '(?::' + pseudonames + '(?:\\x28' + pseudoparms + '?(?:\\x29|$))?|' + ')|' + '(?:[.#]?' + identifier + ')|' + '(?:' + attributes + ')' + ')+|' + '(?:' + WSP + '?,' + WSP + '?)|' + '(?:' + WSP + '?)|' + '(?:\\x29|$))*', standardValidator = '(?=' + WSP + '?[^>+~(){}<>])' + '(?:' + '(?:\\*|\\|)|' + '(?:[.#]?' + identifier + ')+|' + '(?:' + attributes + ')+|' + '(?:::?' + pseudonames + pseudoclass + ')|' + '(?:' + WSP + '?' + CFG.combinators + WSP + '?)|' + '(?:' + WSP + '?,' + WSP + '?)|' + '(?:' + WSP + '?)' + ')+';
        reOptimizer = RegExp('(?:([.:#*]?)' + '(' + identifier + ')' + '(?:' + ':[-\\w]+|' + '\\[[^\\]]+(?:\\]|$)|' + '\\x28[^\\x29]+(?:\\x29|$)' + ')*)$');
        reValidator = RegExp(standardValidator, 'g');
        Patterns.id = RegExp('^#(' + identifier + ')(.*)');
        Patterns.tagName = RegExp('^(' + identifier + ')(.*)');
        Patterns.className = RegExp('^\\.(' + identifier + ')(.*)');
        Patterns.attribute = RegExp('^(?:' + attrmatcher + ')(.*)');
    }, F_INIT = '"use strict";return function Resolver(c,f,x,r)', S_HEAD = 'var e,n,o,j=r.length-1,k=-1', M_HEAD = 'var e,n,o', S_LOOP = 'main:while((e=c[++k]))', N_LOOP = 'main:while((e=c.item(++k)))', M_LOOP = 'e=c;', S_BODY = 'r[++j]=c[k];', N_BODY = 'r[++j]=c.item(k);', M_BODY = '', S_TAIL = 'continue main;', M_TAIL = 'r=true;', S_TEST = 'if(f(c[k])){break main;}', N_TEST = 'if(f(c.item(k))){break main;}', M_TEST = 'f(c);', S_VARS = [], M_VARS = [], compile = function(selector, mode, callback) {
        var factory, head = '', loop = '', macro = '', source = '', vars = '';
        switch(mode){
            case true:
                if (selectLambdas[selector]) {
                    return selectLambdas[selector];
                }
                macro = S_BODY + (callback ? S_TEST : '') + S_TAIL;
                head = S_HEAD;
                loop = S_LOOP;
                break;
            case false:
                if (matchLambdas[selector]) {
                    return matchLambdas[selector];
                }
                macro = M_BODY + (callback ? M_TEST : '') + M_TAIL;
                head = M_HEAD;
                loop = M_LOOP;
                break;
            case null:
                if (selectLambdas[selector]) {
                    return selectLambdas[selector];
                }
                macro = N_BODY + (callback ? N_TEST : '') + S_TAIL;
                head = S_HEAD;
                loop = N_LOOP;
                break;
            default:
                break;
        }
        source = compileSelector(selector, macro, mode, callback, false);
        loop += mode || mode === null ? '{' + source + '}' : source;
        if (mode || mode === null && selector.includes(':nth')) {
            loop += reNthElem.test(selector) ? 's.nthElement(null, 2);' : '';
            loop += reNthType.test(selector) ? 's.nthOfType(null, 2);' : '';
        }
        if (S_VARS[0] || M_VARS[0]) {
            vars = ',' + (S_VARS.join(',') || M_VARS.join(','));
            S_VARS.length = 0;
            M_VARS.length = 0;
        }
        factory = Function('s', F_INIT + '{' + head + vars + ';' + loop + 'return r;}')(Snapshot);
        return mode || mode === null ? selectLambdas[selector] = factory : matchLambdas[selector] = factory;
    }, compileSelector = function(expression, source, mode, callback, not) {
        var a, b, n, f, name, NS, N = not ? '!' : '', D = not ? '' : '!', compat, expr, match, result1, status, symbol, test, type, selector = expression, selector_string, vars;
        selector_string = mode ? lastSelected : lastMatched;
        selector = selector.replace(STD.combinator, '$1');
        while(selector){
            symbol = STD.apimethods.test(selector) ? '|' : selector[0];
            switch(symbol){
                case '*':
                    match = selector.match(Patterns.universal);
                    if (N == '!') {
                        source = 'if(' + N + 'true' + '){' + source + '}';
                    }
                    break;
                case '#':
                    match = selector.match(Patterns.id);
                    source = 'if(' + N + '(/^' + match[1] + '$/.test(e.getAttribute("id"))' + ')){' + source + '}';
                    break;
                case '.':
                    match = selector.match(Patterns.className);
                    compat = (QUIRKS_MODE ? 'i' : '') + '.test(e.getAttribute("class"))';
                    source = 'if(' + N + '(/(^|\\s)' + match[1] + '(\\s|$)/' + compat + ')){' + source + '}';
                    break;
                case /[_a-z]/i.test(symbol) ? symbol : undefined:
                    match = selector.match(Patterns.tagName);
                    source = 'if(' + N + '(e.localName' + (Config.MIXEDCASE || hasMixedCaseTagNames(doc) ? '=="' + match[1].toLowerCase() + '"' : '=="' + match[1].toUpperCase() + '"') + ')){' + source + '}';
                    break;
                case '|':
                    match = selector.match(Patterns.namespace);
                    if (match[1] == '*') {
                        source = 'if(' + N + 'true){' + source + '}';
                    } else if (!match[1]) {
                        source = 'if(' + N + '(!e.namespaceURI)){' + source + '}';
                    } else if (typeof match[1] == 'string' && root.prefix == match[1]) {
                        source = 'if(' + N + '(e.namespaceURI=="' + NAMESPACE + '")){' + source + '}';
                    } else {
                        emit('\'' + selector_string + '\'' + qsInvalid);
                    }
                    break;
                case '[':
                    match = selector.match(Patterns.attribute);
                    NS = match[0].match(STD.namespaces);
                    name = match[1];
                    expr = name.split(':');
                    expr = expr.length == 2 ? expr[1] : expr[0];
                    if (match[2] && !(test = Operators[match[2]])) {
                        emit('\'' + selector_string + '\'' + qsInvalid);
                        return '';
                    }
                    if (match[4] === '') {
                        test = match[2] == '~=' ? {
                            p1: '^\\s',
                            p2: '+$',
                            p3: 'true'
                        } : match[2] in ATTR_STD_OPS && match[2] != '~=' ? {
                            p1: '^',
                            p2: '$',
                            p3: 'true'
                        } : test;
                    } else if (match[2] == '~=' && match[4].includes(' ')) {
                        source = 'if(' + N + 'false){' + source + '}';
                        break;
                    } else if (match[4]) {
                        match[4] = convertEscapes(match[4]).replace(REX.RegExpChar, '\\$&');
                    }
                    type = match[5] == 'i' || HTML_DOCUMENT && HTML_TABLE[expr.toLowerCase()] ? 'i' : '';
                    source = 'if(' + N + '(' + (!match[2] ? NS ? 's.hasAttributeNS(e,"' + name + '")' : 'e.hasAttribute&&e.hasAttribute("' + name + '")' : !match[4] && ATTR_STD_OPS[match[2]] && match[2] != '~=' ? 'e.getAttribute&&e.getAttribute("' + name + '")==""' : '(/' + test.p1 + match[4] + test.p2 + '/' + type + ').test(e.getAttribute&&e.getAttribute("' + name + '"))==' + test.p3) + ')){' + source + '}';
                    break;
                case '~':
                    match = selector.match(Patterns.relative);
                    source = 'n=e;while((e=e.previousElementSibling)){' + source + '}e=n;';
                    break;
                case '+':
                    match = selector.match(Patterns.adjacent);
                    source = 'n=e;if((e=e.previousElementSibling)){' + source + '}e=n;';
                    break;
                case '\x09':
                case '\x20':
                    match = selector.match(Patterns.ancestor);
                    source = 'n=e;while((e=e.parentElement)){' + source + '}e=n;';
                    break;
                case '>':
                    match = selector.match(Patterns.children);
                    source = 'n=e;if((e=e.parentElement)){' + source + '}e=n;';
                    break;
                case symbol in Combinators ? symbol : undefined:
                    match[match.length - 1] = '*';
                    source = Combinators[symbol](match) + source;
                    break;
                case ':':
                    if (match = selector.match(Patterns.structural)) {
                        match[1] = match[1].toLowerCase();
                        switch(match[1]){
                            case 'root':
                                source = 'if(' + N + '(e===s.root)){' + source + (mode ? 'break main;' : '') + '}';
                                break;
                            case 'empty':
                                source = 'n=e.firstChild;while(n&&!(/1|3/).test(n.nodeType)){n=n.nextSibling}if(' + D + 'n){' + source + '}';
                                break;
                            case 'only-child':
                                source = 'if(' + N + '(!e.nextElementSibling&&!e.previousElementSibling)){' + source + '}';
                                break;
                            case 'last-child':
                                source = 'if(' + N + '(!e.nextElementSibling)){' + source + '}';
                                break;
                            case 'first-child':
                                source = 'if(' + N + '(!e.previousElementSibling)){' + source + '}';
                                break;
                            case 'only-of-type':
                                source = 'o=e.localName;' + 'n=e;while((n=n.nextElementSibling)&&n.localName!=o);if(!n){' + 'n=e;while((n=n.previousElementSibling)&&n.localName!=o);}if(' + D + 'n){' + source + '}';
                                break;
                            case 'last-of-type':
                                source = 'n=e;o=e.localName;while((n=n.nextElementSibling)&&n.localName!=o);if(' + D + 'n){' + source + '}';
                                break;
                            case 'first-of-type':
                                source = 'n=e;o=e.localName;while((n=n.previousElementSibling)&&n.localName!=o);if(' + D + 'n){' + source + '}';
                                break;
                            default:
                                emit('\'' + selector_string + '\'' + qsInvalid);
                                break;
                        }
                    } else if (match = selector.match(Patterns.treestruct)) {
                        match[1] = match[1].toLowerCase();
                        switch(match[1]){
                            case 'nth-child':
                            case 'nth-of-type':
                            case 'nth-last-child':
                            case 'nth-last-of-type':
                                expr = /-of-type/i.test(match[1]);
                                if (match[1] && match[2]) {
                                    type = /last/i.test(match[1]);
                                    if (match[2] == 'n') {
                                        source = 'if(' + N + 'true){' + source + '}';
                                        break;
                                    } else if (match[2] == '1') {
                                        test = type ? 'next' : 'previous';
                                        source = expr ? 'n=e;o=e.localName;' + 'while((n=n.' + test + 'ElementSibling)&&n.localName!=o);if(' + D + 'n){' + source + '}' : 'if(' + N + '!e.' + test + 'ElementSibling){' + source + '}';
                                        break;
                                    } else if (match[2] == 'even' || match[2] == '2n0' || match[2] == '2n+0' || match[2] == '2n') {
                                        test = 'n%2==0';
                                    } else if (match[2] == 'odd' || match[2] == '2n1' || match[2] == '2n+1') {
                                        test = 'n%2==1';
                                    } else {
                                        f = /n/i.test(match[2]);
                                        n = match[2].split('n');
                                        a = parseInt(n[0], 10) || 0;
                                        b = parseInt(n[1], 10) || 0;
                                        if (n[0] == '-') {
                                            a = -1;
                                        }
                                        if (n[0] == '+') {
                                            a = +1;
                                        }
                                        test = (b ? '(n' + (b > 0 ? '-' : '+') + Math.abs(b) + ')' : 'n') + '%' + a + '==0';
                                        test = a >= +1 ? f ? 'n>' + (b - 1) + (Math.abs(a) != 1 ? '&&' + test : '') : 'n==' + a : a <= -1 ? f ? 'n<' + (b + 1) + (Math.abs(a) != 1 ? '&&' + test : '') : 'n==' + a : a === 0 ? n[0] ? 'n==' + b : 'n>' + (b - 1) : 'false';
                                    }
                                    expr = expr ? 'OfType' : 'Element';
                                    type = type ? 'true' : 'false';
                                    source = 'n=s.nth' + expr + '(e,' + type + ');if(' + N + '(' + test + ')){' + source + '}';
                                } else {
                                    emit('\'' + selector_string + '\'' + qsInvalid);
                                }
                                break;
                            default:
                                emit('\'' + selector_string + '\'' + qsInvalid);
                                break;
                        }
                    } else if (match = selector.match(Patterns.logicalsel)) {
                        match[1] = match[1].toLowerCase();
                        switch(match[1]){
                            case 'is':
                            case 'where':
                            case 'matches':
                                expr = match[2].replace(REX.CommaGroup, ',').replace(REX.TrimSpaces, '');
                                source = 'if(s.match("' + expr.replace(/\x22/g, '\\"') + '",e)){' + source + '}';
                                break;
                            case 'not':
                                expr = match[2].replace(REX.CommaGroup, ',').replace(REX.TrimSpaces, '');
                                source = 'if(!s.match("' + expr.replace(/\x22/g, '\\"') + '",e)){' + source + '}';
                                break;
                            default:
                                emit('\'' + selector_string + '\'' + qsInvalid);
                                break;
                        }
                    } else if (match = selector.match(Patterns.linguistic)) {
                        match[1] = match[1].toLowerCase();
                        switch(match[1]){
                            case 'dir':
                                source = 'var p;if(' + N + '(' + '(/' + match[2] + '/i.test(e.dir))||(p=s.ancestor("[dir]", e))&&' + '(/' + match[2] + '/i.test(p.dir))||(e.dir==""||e.dir=="auto")&&' + '(' + (match[2] == 'ltr' ? '!' : '') + RTL + '.test(e.textContent)))' + '){' + source + '};';
                                break;
                            case 'lang':
                                expr = '(?:^|-)' + match[2] + '(?:-|$)';
                                source = 'var p;if(' + N + '(' + '(e.isConnected&&(e.lang==""&&(p=s.ancestor("[lang]",e)))&&' + '(p.lang=="' + match[2] + '")||/' + expr + '/i.test(e.lang)))' + '){' + source + '};';
                                break;
                            default:
                                emit('\'' + selector_string + '\'' + qsInvalid);
                                break;
                        }
                    } else if (match = selector.match(Patterns.locationpc)) {
                        match[1] = match[1].toLowerCase();
                        switch(match[1]){
                            case 'any-link':
                                source = 'if(' + N + '(/^a|area$/i.test(e.localName)&&e.hasAttribute("href")||e.visited)){' + source + '}';
                                break;
                            case 'link':
                                source = 'if(' + N + '(/^a|area$/i.test(e.localName)&&e.hasAttribute("href"))){' + source + '}';
                                break;
                            case 'visited':
                                source = 'if(' + N + '(/^a|area$/i.test(e.localName)&&e.hasAttribute("href")&&e.visited)){' + source + '}';
                                break;
                            case 'target':
                                source = 'if(' + N + '((s.doc.compareDocumentPosition(e)&16)&&s.doc.location.hash&&e.id==s.doc.location.hash.slice(1))){' + source + '}';
                                break;
                            default:
                                emit('\'' + selector_string + '\'' + qsInvalid);
                                break;
                        }
                    } else if (match = selector.match(Patterns.useraction)) {
                        match[1] = match[1].toLowerCase();
                        switch(match[1]){
                            case 'hover':
                                source = 'hasFocus' in doc && doc.hasFocus() ? 'if(' + N + '(e===s.doc.hoverElement)){' + source + '}' : 'if(' + D + 'true){' + source + '}';
                                break;
                            case 'active':
                                source = 'hasFocus' in doc && doc.hasFocus() ? 'if(' + N + '(e===s.doc.activeElement)){' + source + '}' : 'if(' + D + 'true){' + source + '}';
                                break;
                            case 'focus':
                                source = 'hasFocus' in doc ? 'if(' + N + '(e===s.doc.activeElement&&s.doc.hasFocus()&&(e.type||e.href||typeof e.tabIndex=="number"))){' + source + '}' : 'if(' + N + '(e===s.doc.activeElement&&(e.type||e.href))){' + source + '}';
                                break;
                            case 'focus-within':
                                source = 'hasFocus' in doc ? 'n=s.doc.activeElement;while(e){if(e===n||e.parentNode===n)break;}' + 'if(' + N + '(e===n&&s.doc.hasFocus()&&(e.type||e.href||typeof e.tabIndex=="number"))){' + source + '}' : source;
                                break;
                            default:
                                emit('\'' + selector_string + '\'' + qsInvalid);
                                break;
                        }
                    } else if (match = selector.match(Patterns.inputstate)) {
                        match[1] = match[1].toLowerCase();
                        switch(match[1]){
                            case 'enabled':
                                source = 'if(' + N + '(("form" in e||/^optgroup$/i.test(e.localName))&&"disabled" in e &&e.disabled===false' + ')){' + source + '}';
                                break;
                            case 'disabled':
                                source = 'if(' + N + '(("form" in e||/^optgroup$/i.test(e.localName))&&"disabled" in e&&' + '(e.disabled===true||(n=s.ancestor("fieldset",e))&&(n=s.first("legend",n))&&!n.contains(e))' + ')){' + source + '}';
                                break;
                            case 'read-only':
                                source = 'if(' + N + '(' + '(/^textarea$/i.test(e.localName)&&(e.readOnly||e.disabled))||' + '("|password|text|".includes("|"+e.type+"|")&&e.readOnly)' + ')){' + source + '}';
                                break;
                            case 'read-write':
                                source = 'if(' + N + '(' + '((/^textarea$/i.test(e.localName)&&!e.readOnly&&!e.disabled)||' + '("|password|text|".includes("|"+e.type+"|")&&!e.readOnly&&!e.disabled))||' + '(e.hasAttribute("contenteditable")||(s.doc.designMode=="on"))' + ')){' + source + '}';
                                break;
                            case 'placeholder-shown':
                                source = 'if(' + N + '(' + '(/^input|textarea$/i.test(e.localName))&&e.hasAttribute("placeholder")&&' + '("|textarea|password|number|search|email|text|tel|url|".includes("|"+e.type+"|"))&&' + '(!s.match(":focus",e))' + ')){' + source + '}';
                                break;
                            case 'default':
                                source = 'if(' + N + '("form" in e && e.form)){' + 'var x=0;n=[];' + 'if(e.type=="image")n=e.form.getElementsByTagName("input");' + 'if(e.type=="submit")n=e.form.elements;' + 'while(n[x]&&e!==n[x]){' + 'if(n[x].type=="image")break;' + 'if(n[x].type=="submit")break;' + 'x++;' + '}' + '}' + 'if(' + N + '(e.form&&(e===n[x]&&"|image|submit|".includes("|"+e.type+"|"))||' + '((/^option$/i.test(e.localName))&&e.defaultSelected)||' + '(("|radio|checkbox|".includes("|"+e.type+"|"))&&e.defaultChecked)' + ')){' + source + '}';
                                break;
                            default:
                                emit('\'' + selector_string + '\'' + qsInvalid);
                                break;
                        }
                    } else if (match = selector.match(Patterns.inputvalue)) {
                        match[1] = match[1].toLowerCase();
                        switch(match[1]){
                            case 'checked':
                                source = 'if(' + N + '(/^input$/i.test(e.localName)&&' + '("|radio|checkbox|".includes("|"+e.type+"|")&&e.checked)||' + '(/^option$/i.test(e.localName)&&(e.selected||e.checked))' + ')){' + source + '}';
                                break;
                            case 'indeterminate':
                                source = 'if(' + N + '(/^progress$/i.test(e.localName)&&!e.hasAttribute("value"))||' + '(/^input$/i.test(e.localName)&&("checkbox"==e.type&&e.indeterminate)||' + '("radio"==e.type&&e.name&&!s.first("input[name="+e.name+"]:checked",e.form))' + ')){' + source + '}';
                                break;
                            case 'required':
                                source = 'if(' + N + '(/^input|select|textarea$/i.test(e.localName)&&e.required)' + '){' + source + '}';
                                break;
                            case 'optional':
                                source = 'if(' + N + '(/^input|select|textarea$/i.test(e.localName)&&!e.required)' + '){' + source + '}';
                                break;
                            case 'invalid':
                                source = 'if(' + N + '((' + '(/^form$/i.test(e.localName)&&!e.noValidate)||' + '(e.willValidate&&!e.formNoValidate))&&!e.checkValidity())||' + '(/^fieldset$/i.test(e.localName)&&s.first(":invalid",e))' + '){' + source + '}';
                                break;
                            case 'valid':
                                source = 'if(' + N + '((' + '(/^form$/i.test(e.localName)&&!e.noValidate)||' + '(e.willValidate&&!e.formNoValidate))&&e.checkValidity())||' + '(/^fieldset$/i.test(e.localName)&&s.first(":valid",e))' + '){' + source + '}';
                                break;
                            case 'in-range':
                                source = 'if(' + N + '(/^input$/i.test(e.localName))&&' + '(e.willValidate&&!e.formNoValidate)&&' + '(!e.validity.rangeUnderflow&&!e.validity.rangeOverflow)&&' + '("|date|datetime-local|month|number|range|time|week|".includes("|"+e.type+"|"))&&' + '("range"==e.type||e.getAttribute("min")||e.getAttribute("max"))' + '){' + source + '}';
                                break;
                            case 'out-of-range':
                                source = 'if(' + N + '(/^input$/i.test(e.localName))&&' + '(e.willValidate&&!e.formNoValidate)&&' + '(e.validity.rangeUnderflow||e.validity.rangeOverflow)&&' + '("|date|datetime-local|month|number|range|time|week|".includes("|"+e.type+"|"))&&' + '("range"==e.type||e.getAttribute("min")||e.getAttribute("max"))' + '){' + source + '}';
                                break;
                            default:
                                emit('\'' + selector_string + '\'' + qsInvalid);
                                break;
                        }
                    } else if (match = selector.match(Patterns.pseudo_sng)) {
                        source = 'if(e.element&&e.type.toLowerCase()=="' + ':' + match[0].toLowerCase() + '"){e=e.element;' + source + '}';
                    } else if (match = selector.match(Patterns.pseudo_dbl)) {
                        source = 'if(e.element&&e.type.toLowerCase()=="' + match[0].toLowerCase() + '"){e=e.element;' + source + '}';
                    } else {
                        expr = false;
                        status = false;
                        for(expr in Selectors){
                            if (match = selector.match(Selectors[expr].Expression)) {
                                result1 = Selectors[expr].Callback(match, source, mode, callback);
                                if ('match' in result1) {
                                    match = result1.match;
                                }
                                vars = result1.modvar;
                                if (mode) {
                                    vars && S_VARS.indexOf(vars) < 0 && (S_VARS[S_VARS.length] = vars);
                                } else {
                                    vars && M_VARS.indexOf(vars) < 0 && (M_VARS[M_VARS.length] = vars);
                                }
                                source = result1.source;
                                status = result1.status;
                                if (status) {
                                    break;
                                }
                            }
                        }
                        if (!status) {
                            emit('unknown pseudo-class selector \'' + selector + '\'');
                            return '';
                        }
                        if (!expr) {
                            emit('unknown token in selector \'' + selector + '\'');
                            return '';
                        }
                    }
                    break;
                default:
                    emit('\'' + selector_string + '\'' + qsInvalid);
                    break;
            }
            if (!match) {
                emit('\'' + selector_string + '\'' + qsInvalid);
                return '';
            }
            selector = match.pop();
        }
        return source;
    }, makeref = function(selectors, element) {
        return selectors.replace(/:scope/ig, element.localName + (element.id ? '#' + element.id : '') + (element.className ? '.' + element.classList[0] : ''));
    }, ancestor = function _closest(selectors, element, callback) {
        if (/:scope/i.test(selectors)) {
            selectors = makeref(selectors, element);
        }
        while(element){
            if (match(selectors, element, callback)) break;
            element = element.parentElement;
        }
        return element;
    }, match_assert = function(f, element, callback) {
        for(var i1 = 0, l1 = f.length, r = false; l1 > i1; ++i1)f[i1](element, callback, null, false) && (r = true);
        return r;
    }, match_collect = function(selectors, callback) {
        for(var i1 = 0, l1 = selectors.length, f = []; l1 > i1; ++i1)f[i1] = compile(selectors[i1], false, callback);
        return {
            factory: f
        };
    }, match = function _matches(selectors, element, callback) {
        var expressions, parsed;
        if (element && matchResolvers[selectors]) {
            return match_assert(matchResolvers[selectors].factory, element, callback);
        }
        lastMatched = selectors;
        if (arguments.length === 0) {
            emit(qsNotArgs, TypeError);
            return Config.VERBOSITY ? undefined : false;
        } else if (arguments[0] === '') {
            emit('\'\'' + qsInvalid);
            return Config.VERBOSITY ? undefined : false;
        }
        if (typeof selectors != 'string') {
            selectors = '' + selectors;
        }
        if (/:scope/i.test(selectors)) {
            selectors = makeref(selectors, element);
        }
        parsed = selectors.replace(/\x00|\\$/g, '\ufffd').replace(REX.CombineWSP, '\x20').replace(REX.PseudosWSP, '$1').replace(REX.TabCharWSP, '\t').replace(REX.CommaGroup, ',').replace(REX.TrimSpaces, '');
        if ((expressions = parsed.match(reValidator)) && expressions.join('') == parsed) {
            expressions = parsed.match(REX.SplitGroup);
            if (parsed[parsed.length - 1] == ',') {
                emit(qsInvalid);
                return Config.VERBOSITY ? undefined : false;
            }
        } else {
            emit('\'' + selectors + '\'' + qsInvalid);
            return Config.VERBOSITY ? undefined : false;
        }
        matchResolvers[selectors] = match_collect(expressions, callback);
        return match_assert(matchResolvers[selectors].factory, element, callback);
    }, first = function _querySelector(selectors, context, callback) {
        if (arguments.length === 0) {
            emit(qsNotArgs, TypeError);
        }
        return select(selectors, context, typeof callback == 'function' ? function firstMatch(element) {
            callback(element);
            return false;
        } : function firstMatch() {
            return false;
        })[0] || null;
    }, select = function _querySelectorAll(selectors, context, callback) {
        var expressions, nodes, parsed, resolver;
        context || (context = doc);
        if (selectors) {
            if (resolver = selectResolvers[selectors]) {
                if (resolver.context === context && resolver.callback === callback) {
                    var f = resolver.factory, h = resolver.htmlset, n = resolver.nodeset, nodes = [];
                    if (n.length > 1) {
                        for(var i1 = 0, l1 = n.length, list; l1 > i1; ++i1){
                            list = compat[n[i1][0]](context, n[i1].slice(1))();
                            if (f[i1] !== null) {
                                f[i1](list, callback, context, nodes);
                            } else {
                                nodes = nodes.concat(list);
                            }
                        }
                        if (l1 > 1 && nodes.length > 1) {
                            nodes.sort(documentOrder);
                            hasDupes && (nodes = unique(nodes));
                        }
                    } else {
                        if (f[0]) {
                            nodes = f[0](h[0](), callback, context, nodes);
                        } else {
                            nodes = h[0]();
                        }
                    }
                    return typeof callback == 'function' ? concatCall(nodes, callback) : nodes;
                }
            }
        }
        lastSelected = selectors;
        if (arguments.length === 0) {
            emit(qsNotArgs, TypeError);
            return Config.VERBOSITY ? undefined : none;
        } else if (arguments[0] === '') {
            emit('\'\'' + qsInvalid);
            return Config.VERBOSITY ? undefined : none;
        } else if (lastContext !== context) {
            lastContext = switchContext(context);
        }
        if (typeof selectors != 'string') {
            selectors = '' + selectors;
        }
        if (/:scope/i.test(selectors)) {
            selectors = makeref(selectors, context);
        }
        parsed = selectors.replace(/\x00|\\$/g, '\ufffd').replace(REX.CombineWSP, '\x20').replace(REX.PseudosWSP, '$1').replace(REX.TabCharWSP, '\t').replace(REX.CommaGroup, ',').replace(REX.TrimSpaces, '');
        if ((expressions = parsed.match(reValidator)) && expressions.join('') == parsed) {
            expressions = parsed.match(REX.SplitGroup);
            if (parsed[parsed.length - 1] == ',') {
                emit(qsInvalid);
                return Config.VERBOSITY ? undefined : false;
            }
        } else {
            emit('\'' + selectors + '\'' + qsInvalid);
            return Config.VERBOSITY ? undefined : false;
        }
        selectResolvers[selectors] = collect(expressions, context, callback);
        nodes = selectResolvers[selectors].results;
        return typeof callback == 'function' ? concatCall(nodes, callback) : nodes;
    }, optimize = function(selector, token) {
        var index = token.index, length = token[1].length + token[2].length;
        return selector.slice(0, index) + (' >+~'.indexOf(selector.charAt(index - 1)) > -1 ? ':['.indexOf(selector.charAt(index + length + 1)) > -1 ? '*' : '' : '') + selector.slice(index + length - (token[1] == '*' ? 1 : 0));
    }, collect = function(selectors, context, callback) {
        var i1, l1, seen = {}, token = [
            '',
            '*',
            '*'
        ], optimized = selectors, factory = [], htmlset = [], nodeset = [], results = [], type;
        for(i1 = 0, l1 = selectors.length; l1 > i1; ++i1){
            if (!seen[selectors[i1]] && (seen[selectors[i1]] = true)) {
                type = selectors[i1].match(reOptimizer);
                if (type && type[1] != ':' && (token = type)) {
                    token[1] || (token[1] = '*');
                    optimized[i1] = optimize(optimized[i1], token);
                } else {
                    token = [
                        '',
                        '*',
                        '*'
                    ];
                }
            }
            nodeset[i1] = token[1] + token[2];
            htmlset[i1] = compat[token[1]](context, token[2]);
            factory[i1] = compile(optimized[i1], true, null);
            factory[i1] ? factory[i1](htmlset[i1](), callback, context, results) : result.concat(htmlset[i1]());
        }
        if (l1 > 1) {
            results.sort(documentOrder);
            hasDupes && (results = unique(results));
        }
        return {
            callback: callback,
            context: context,
            factory: factory,
            htmlset: htmlset,
            nodeset: nodeset,
            results: results
        };
    }, _closest, _matches, _querySelector, _querySelectorAll, install = function(all) {
        _closest = Element.prototype.closest;
        _matches = Element.prototype.matches;
        _querySelector = Document.prototype.querySelector;
        _querySelectorAll = Document.prototype.querySelectorAll;
        Element.prototype.closest = function closest() {
            var ctor = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
            if (!('nodeType' in this)) {
                emit('\'closest\' called on an object that does not implement interface ' + ctor + '.', TypeError);
            }
            return arguments.length < 1 ? ancestor.apply(this, []) : arguments.length < 2 ? ancestor.apply(this, [
                arguments[0],
                this
            ]) : ancestor.apply(this, [
                arguments[0],
                this,
                typeof arguments[1] == 'function' ? arguments[1] : undefined
            ]);
        };
        Element.prototype.matches = function matches() {
            var ctor = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
            if (!('nodeType' in this)) {
                emit('\'matches\' called on an object that does not implement interface ' + ctor + '.', TypeError);
            }
            return arguments.length < 1 ? match.apply(this, []) : arguments.length < 2 ? match.apply(this, [
                arguments[0],
                this
            ]) : match.apply(this, [
                arguments[0],
                this,
                typeof arguments[1] == 'function' ? arguments[1] : undefined
            ]);
        };
        Element.prototype.querySelector = Document.prototype.querySelector = DocumentFragment.prototype.querySelector = function querySelector() {
            var ctor = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
            if (!('nodeType' in this)) {
                emit('\'querySelector\' called on an object that does not implement interface ' + ctor + '.', TypeError);
            }
            return arguments.length < 1 ? first.apply(this, []) : arguments.length < 2 ? first.apply(this, [
                arguments[0],
                this
            ]) : first.apply(this, [
                arguments[0],
                this,
                typeof arguments[1] == 'function' ? arguments[1] : undefined
            ]);
        };
        Element.prototype.querySelectorAll = Document.prototype.querySelectorAll = DocumentFragment.prototype.querySelectorAll = function querySelectorAll() {
            var ctor = Object.getPrototypeOf(this).__proto__.__proto__.constructor.name;
            if (!('nodeType' in this)) {
                emit('\'querySelectorAll\' called on an object that does not implement interface ' + ctor + '.', TypeError);
            }
            return arguments.length < 1 ? select.apply(this, []) : arguments.length < 2 ? select.apply(this, [
                arguments[0],
                this
            ]) : select.apply(this, [
                arguments[0],
                this,
                typeof arguments[1] == 'function' ? arguments[1] : undefined
            ]);
        };
        if (all) {
            document.addEventListener('load', function(e) {
                var c, d, r, s, t = e.target;
                if (/iframe/i.test(t.localName)) {
                    c = '(' + Export + ')(this, ' + Factory + ');';
                    d = t.contentDocument;
                    s = d.createElement('script');
                    s.textContent = c + 'NW.Dom.install()';
                    r = d.documentElement;
                    r.removeChild(r.insertBefore(s, r.firstChild));
                }
            }, true);
        }
    }, uninstall = function() {
        Element.prototype.closest = _closest;
        Element.prototype.matches = _matches;
        Element.prototype.querySelector = Document.prototype.querySelector = DocumentFragment.prototype.querySelector = _querySelector;
        Element.prototype.querySelectorAll = Document.prototype.querySelectorAll = DocumentFragment.prototype.querySelectorAll = _querySelectorAll;
    }, none = Array(), lastContext, lastMatched, lastSelected, matchLambdas = {}, selectLambdas = {}, matchResolvers = {}, selectResolvers = {}, Snapshot = {
        doc: doc,
        from: doc,
        root: root,
        byTag: byTag,
        first: first,
        match: match,
        ancestor: ancestor,
        nthOfType: nthOfType,
        nthElement: nthElement,
        hasAttributeNS: hasAttributeNS
    }, Dom = {
        lastMatched: lastMatched,
        lastSelected: lastSelected,
        matchLambdas: matchLambdas,
        selectLambdas: selectLambdas,
        matchResolvers: matchResolvers,
        selectResolvers: selectResolvers,
        CFG: CFG,
        M_BODY: M_BODY,
        S_BODY: S_BODY,
        M_TEST: M_TEST,
        S_TEST: S_TEST,
        byId: byId,
        byTag: byTag,
        byClass: byClass,
        match: match,
        first: first,
        select: select,
        closest: ancestor,
        compile: compile,
        configure: configure,
        emit: emit,
        Config: Config,
        Snapshot: Snapshot,
        Version: version,
        install: install,
        uninstall: uninstall,
        Operators: Operators,
        Selectors: Selectors,
        registerCombinator: function(combinator, resolver) {
            var i1 = 0, l1 = combinator.length, symbol;
            for(; l1 > i1; ++i1){
                if (combinator[i1] != '=') {
                    symbol = combinator[i1];
                    break;
                }
            }
            if (CFG.combinators.indexOf(symbol) < 0) {
                CFG.combinators = CFG.combinators.replace('](', symbol + '](');
                CFG.combinators = CFG.combinators.replace('])', symbol + '])');
                Combinators[combinator] = resolver;
                setIdentifierSyntax();
            } else {
                console.warn('Warning: the \'' + combinator + '\' combinator is already registered.');
            }
        },
        registerOperator: function(operator, resolver) {
            var i1 = 0, l1 = operator.length, symbol;
            for(; l1 > i1; ++i1){
                if (operator[i1] != '=') {
                    symbol = operator[i1];
                    break;
                }
            }
            if (CFG.operators.indexOf(symbol) < 0 && !Operators[operator]) {
                CFG.operators = CFG.operators.replace(']=', symbol + ']=');
                Operators[operator] = resolver;
                setIdentifierSyntax();
            } else {
                console.warn('Warning: the \'' + operator + '\' operator is already registered.');
            }
        },
        registerSelector: function(name, rexp, func) {
            Selectors[name] || (Selectors[name] = {
                Expression: rexp,
                Callback: func
            });
        }
    };
    initialize(doc);
    return Dom;
}
function SetupSizzle(window) {
    var i1, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document1, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
        if (a === b) {
            hasDuplicate = true;
        }
        return 0;
    }, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, pushNative = arr.push, push = arr.push, slice = arr.slice, indexOf = function(list, elem) {
        var i1 = 0, len = list.length;
        for(; i1 < len; i1++){
            if (list[i1] === elem) {
                return i1;
            }
        }
        return -1;
    }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
        ID: new RegExp("^#(" + identifier + ")"),
        CLASS: new RegExp("^\\.(" + identifier + ")"),
        TAG: new RegExp("^(" + identifier + "|[*])"),
        ATTR: new RegExp("^" + attributes),
        PSEUDO: new RegExp("^" + pseudos),
        CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
        bool: new RegExp("^(?:" + booleans + ")$", "i"),
        needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    }, rhtml = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
        var high = "0x" + escape.slice(1) - 0x10000;
        return nonHex ? nonHex : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);
    }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
        if (asCodePoint) {
            if (ch === "\0") {
                return "\uFFFD";
            }
            return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
        }
        return "\\" + ch;
    }, unloadHandler = function() {
        setDocument();
    }, inDisabledFieldset = addCombinator(function(elem) {
        return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
    }, {
        dir: "parentNode",
        next: "legend"
    });
    try {
        push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
        arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
        push = {
            apply: arr.length ? function(target, els) {
                pushNative.apply(target, slice.call(els));
            } : function(target, els) {
                var j = target.length, i1 = 0;
                while(target[j++] = els[i1++]){}
                target.length = j - 1;
            }
        };
    }
    function Sizzle(selector, context, results, seed) {
        var m, i1, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
        results = results || [];
        if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results;
        }
        if (!seed) {
            setDocument(context);
            context = context || document1;
            if (documentIsHTML) {
                if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                    if (m = match[1]) {
                        if (nodeType === 9) {
                            if (elem = context.getElementById(m)) {
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }
                    } else if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;
                    } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }
                if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                    newSelector = selector;
                    newContext = context;
                    if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        if (newContext !== context || !support.scope) {
                            if (nid = context.getAttribute("id")) {
                                nid = nid.replace(rcssescape, fcssescape);
                            } else {
                                context.setAttribute("id", nid = expando);
                            }
                        }
                        groups = tokenize(selector);
                        i1 = groups.length;
                        while(i1--){
                            groups[i1] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i1]);
                        }
                        newSelector = groups.join(",");
                    }
                    try {
                        push.apply(results, newContext.querySelectorAll(newSelector));
                        return results;
                    } catch (qsaError) {
                        nonnativeSelectorCache(selector, true);
                    } finally{
                        if (nid === expando) {
                            context.removeAttribute("id");
                        }
                    }
                }
            }
        }
        return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    function createCache() {
        var keys = [];
        function cache(key, value) {
            if (keys.push(key + " ") > Expr.cacheLength) {
                delete cache[keys.shift()];
            }
            return cache[key + " "] = value;
        }
        return cache;
    }
    function markFunction(fn) {
        fn[expando] = true;
        return fn;
    }
    function assert(fn) {
        return true;
        var el = document1.createElement("fieldset");
        try {
            return !!fn(el);
        } catch (e) {
            return false;
        } finally{
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
            el = null;
        }
    }
    function addHandle(attrs, handler) {
        var arr = attrs.split("|"), i1 = arr.length;
        while(i1--){
            Expr.attrHandle[arr[i1]] = handler;
        }
    }
    function siblingCheck(a, b) {
        var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
        if (diff) {
            return diff;
        }
        if (cur) {
            while(cur = cur.nextSibling){
                if (cur === b) {
                    return -1;
                }
            }
        }
        return a ? 1 : -1;
    }
    function createInputPseudo(type) {
        return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
        };
    }
    function createButtonPseudo(type) {
        return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
        };
    }
    function createDisabledPseudo(disabled) {
        return function(elem) {
            if ("form" in elem) {
                if (elem.parentNode && elem.disabled === false) {
                    if ("label" in elem) {
                        if ("label" in elem.parentNode) {
                            return elem.parentNode.disabled === disabled;
                        } else {
                            return elem.disabled === disabled;
                        }
                    }
                    return elem.isDisabled === disabled || elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                }
                return elem.disabled === disabled;
            } else if ("label" in elem) {
                return elem.disabled === disabled;
            }
            return false;
        };
    }
    function createPositionalPseudo(fn) {
        return markFunction(function(argument) {
            argument = +argument;
            return markFunction(function(seed, matches) {
                var j, matchIndexes = fn([], seed.length, argument), i1 = matchIndexes.length;
                while(i1--){
                    if (seed[j = matchIndexes[i1]]) {
                        seed[j] = !(matches[j] = seed[j]);
                    }
                }
            });
        });
    }
    function testContext(context) {
        return context && typeof context.getElementsByTagName !== "undefined" && context;
    }
    support = Sizzle.support = {};
    isXML = Sizzle.isXML = function(elem) {
        var namespace = elem && elem.namespaceURI, docElem = elem && (elem.ownerDocument || elem).documentElement;
        return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
    };
    setDocument = Sizzle.setDocument = function(node) {
        var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
        if (doc == document1 || doc.nodeType !== 9 || !doc.documentElement) {
            return document1;
        }
        document1 = doc;
        docElem = document1.documentElement;
        documentIsHTML = !isXML(document1);
        if (preferredDoc != document1 && (subWindow = document1.defaultView) && subWindow.top !== subWindow) {
            if (subWindow.addEventListener) {
                subWindow.addEventListener("unload", unloadHandler, false);
            } else if (subWindow.attachEvent) {
                subWindow.attachEvent("onunload", unloadHandler);
            }
        }
        support.scope = assert(function(el) {
            docElem.appendChild(el).appendChild(document1.createElement("div"));
            return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
        });
        support.attributes = assert(function(el) {
            el.className = "i";
            return !el.getAttribute("className");
        });
        support.getElementsByTagName = assert(function(el) {
            el.appendChild(document1.createComment(""));
            return !el.getElementsByTagName("*").length;
        });
        support.getElementsByClassName = rnative.test(document1.getElementsByClassName);
        support.getById = assert(function(el) {
            docElem.appendChild(el).id = expando;
            return !document1.getElementsByName || !document1.getElementsByName(expando).length;
        });
        if (support.getById) {
            Expr.filter["ID"] = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                    return elem.getAttribute("id") === attrId;
                };
            };
            Expr.find["ID"] = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                    var elem = context.getElementById(id);
                    return elem ? [
                        elem
                    ] : [];
                }
            };
        } else {
            Expr.filter["ID"] = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                    var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                    return node && node.value === attrId;
                };
            };
            Expr.find["ID"] = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                    var node, i1, elems, elem = context.getElementById(id);
                    if (elem) {
                        node = elem.getAttributeNode("id");
                        if (node && node.value === id) {
                            return [
                                elem
                            ];
                        }
                        elems = context.getElementsByName(id);
                        i1 = 0;
                        while(elem = elems[i1++]){
                            node = elem.getAttributeNode("id");
                            if (node && node.value === id) {
                                return [
                                    elem
                                ];
                            }
                        }
                    }
                    return [];
                }
            };
        }
        Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
            if (typeof context.getElementsByTagName !== "undefined") {
                return context.getElementsByTagName(tag);
            } else if (context[customByTagNameSym]) {
                return context[customByTagNameSym](tag);
            } else if (support.qsa) {
                return context.querySelectorAll(tag);
            }
        } : function(tag, context) {
            var elem, tmp = [], i1 = 0, results = context.getElementsByTagName(tag);
            if (tag === "*") {
                while(elem = results[i1++]){
                    if (elem.nodeType === 1) {
                        tmp.push(elem);
                    }
                }
                return tmp;
            }
            return results;
        };
        Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
            if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                return context.getElementsByClassName(className);
            } else if (context[customByClassNameSym]) {
                return context[customByClassNameSym](className);
            }
        };
        rbuggyMatches = [];
        rbuggyQSA = [];
        if (support.qsa = rnative.test(document1.querySelectorAll)) {
            assert(function(el) {
                var input;
                docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
                if (el.querySelectorAll("[msallowcapture^='']").length) {
                    rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                }
                if (!el.querySelectorAll("[selected]").length) {
                    rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                }
                if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                    rbuggyQSA.push("~=");
                }
                input = document1.createElement("input");
                input.setAttribute("name", "");
                el.appendChild(input);
                if (!el.querySelectorAll("[name='']").length) {
                    rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
                }
                if (!el.querySelectorAll(":checked").length) {
                    rbuggyQSA.push(":checked");
                }
                if (!el.querySelectorAll("a#" + expando + "+*").length) {
                    rbuggyQSA.push(".#.+[+~]");
                }
                el.querySelectorAll("\\\f");
                rbuggyQSA.push("[\\r\\n\\f]");
            });
            assert(function(el) {
                el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";
                var input = document1.createElement("input");
                input.setAttribute("type", "hidden");
                el.appendChild(input).setAttribute("name", "D");
                if (el.querySelectorAll("[name=d]").length) {
                    rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                }
                if (el.querySelectorAll(":enabled").length !== 2) {
                    rbuggyQSA.push(":enabled", ":disabled");
                }
                docElem.appendChild(el).disabled = true;
                if (el.querySelectorAll(":disabled").length !== 2) {
                    rbuggyQSA.push(":enabled", ":disabled");
                }
                el.querySelectorAll("*,:x");
                rbuggyQSA.push(",.*:");
            });
        }
        if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
            assert(function(el) {
                support.disconnectedMatch = matches.call(el, "*");
                matches.call(el, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            });
        }
        rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
        rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
        hasCompare = rnative.test(docElem.compareDocumentPosition);
        contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
            var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
            return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
        } : function(a, b) {
            if (b) {
                while(b = b.parentNode){
                    if (b === a) {
                        return true;
                    }
                }
            }
            return false;
        };
        sortOrder = hasCompare ? function(a, b) {
            if (a === b) {
                hasDuplicate = true;
                return 0;
            }
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if (compare) {
                return compare;
            }
            compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
            if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                if (a == document1 || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
                    return -1;
                }
                if (b == document1 || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
                    return 1;
                }
                return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
            }
            return compare & 4 ? -1 : 1;
        } : function(a, b) {
            if (a === b) {
                hasDuplicate = true;
                return 0;
            }
            var cur, i1 = 0, aup = a.parentNode, bup = b.parentNode, ap = [
                a
            ], bp = [
                b
            ];
            if (!aup || !bup) {
                return a == document1 ? -1 : b == document1 ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
            } else if (aup === bup) {
                return siblingCheck(a, b);
            }
            cur = a;
            while(cur = cur.parentNode){
                ap.unshift(cur);
            }
            cur = b;
            while(cur = cur.parentNode){
                bp.unshift(cur);
            }
            while(ap[i1] === bp[i1]){
                i1++;
            }
            return i1 ? siblingCheck(ap[i1], bp[i1]) : ap[i1] == preferredDoc ? -1 : bp[i1] == preferredDoc ? 1 : 0;
        };
        return document1;
    };
    Sizzle.matches = function(expr, elements) {
        return Sizzle(expr, null, null, elements);
    };
    Sizzle.matchesSelector = function(elem, expr) {
        setDocument(elem);
        if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
                var ret = matches.call(elem, expr);
                if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                    return ret;
                }
            } catch (e) {
                nonnativeSelectorCache(expr, true);
            }
        }
        return Sizzle(expr, document1, null, [
            elem
        ]).length > 0;
    };
    Sizzle.contains = function(context, elem) {
        if ((context.ownerDocument || context) != document1) {
            setDocument(context);
        }
        return contains(context, elem);
    };
    Sizzle.attr = function(elem, name) {
        if ((elem.ownerDocument || elem) != document1) {
            setDocument(elem);
        }
        var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
        return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };
    Sizzle.escape = function(sel) {
        return (sel + "").replace(rcssescape, fcssescape);
    };
    Sizzle.error = function(msg) {
        throw new DOMException(`'${msg}' is not a valid selector`);
    };
    Sizzle.uniqueSort = function(results) {
        var elem, duplicates = [], j = 0, i1 = 0;
        hasDuplicate = !support.detectDuplicates;
        sortInput = !support.sortStable && results.slice(0);
        results.sort(sortOrder);
        if (hasDuplicate) {
            while(elem = results[i1++]){
                if (elem === results[i1]) {
                    j = duplicates.push(i1);
                }
            }
            while(j--){
                results.splice(duplicates[j], 1);
            }
        }
        sortInput = null;
        return results;
    };
    getText = Sizzle.getText = function(elem) {
        var node, ret = "", i1 = 0, nodeType = elem.nodeType;
        if (!nodeType) {
            while(node = elem[i1++]){
                ret += getText(node);
            }
        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            if (typeof elem.textContent === "string") {
                return elem.textContent;
            } else {
                for(elem = elem.firstChild; elem; elem = elem.nextSibling){
                    ret += getText(elem);
                }
            }
        } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue;
        }
        return ret;
    };
    Expr = Sizzle.selectors = {
        cacheLength: 50,
        createPseudo: markFunction,
        match: matchExpr,
        attrHandle: {},
        find: {},
        relative: {
            ">": {
                dir: "parentNode",
                first: true
            },
            " ": {
                dir: "parentNode"
            },
            "+": {
                dir: "previousSibling",
                first: true
            },
            "~": {
                dir: "previousSibling"
            }
        },
        preFilter: {
            ATTR: function(match) {
                match[1] = match[1].replace(runescape, funescape);
                match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                if (match[2] === "~=") {
                    match[3] = " " + match[3] + " ";
                }
                return match.slice(0, 4);
            },
            CHILD: function(match) {
                match[1] = match[1].toLowerCase();
                if (match[1].slice(0, 3) === "nth") {
                    if (!match[3]) {
                        Sizzle.error(match[0]);
                    }
                    match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                    match[5] = +(match[7] + match[8] || match[3] === "odd");
                } else if (match[3]) {
                    Sizzle.error(match[0]);
                }
                return match;
            },
            PSEUDO: function(match) {
                var excess, unquoted = !match[6] && match[2];
                if (matchExpr["CHILD"].test(match[0])) {
                    return null;
                }
                if (match[3]) {
                    match[2] = match[4] || match[5] || "";
                } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                    match[0] = match[0].slice(0, excess);
                    match[2] = unquoted.slice(0, excess);
                }
                return match.slice(0, 3);
            }
        },
        filter: {
            TAG: function(nodeNameSelector) {
                var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                return nodeNameSelector === "*" ? function() {
                    return true;
                } : function(elem) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                };
            },
            CLASS: function(className) {
                var pattern = classCache[className + " "];
                return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                    return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                });
            },
            ATTR: function(name, operator, check) {
                return function(elem) {
                    var result1 = Sizzle.attr(elem, name);
                    if (result1 == null) {
                        return operator === "!=";
                    }
                    if (!operator) {
                        return true;
                    }
                    result1 += "";
                    return operator === "=" ? result1 === check : operator === "!=" ? result1 !== check : operator === "^=" ? check && result1.indexOf(check) === 0 : operator === "*=" ? check && result1.indexOf(check) > -1 : operator === "$=" ? check && result1.slice(-check.length) === check : operator === "~=" ? (" " + result1.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result1 === check || result1.slice(0, check.length + 1) === check + "-" : false;
                };
            },
            CHILD: function(type, what, _argument, first, last) {
                var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                return first === 1 && last === 0 ? function(elem) {
                    return !!elem.parentNode;
                } : function(elem, _context, xml) {
                    var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                    if (parent) {
                        if (simple) {
                            while(dir){
                                node = elem;
                                while(node = node[dir]){
                                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                        return false;
                                    }
                                }
                                start = dir = type === "only" && !start && "nextSibling";
                            }
                            return true;
                        }
                        start = [
                            forward ? parent.firstChild : parent.lastChild
                        ];
                        if (forward && useCache) {
                            node = parent;
                            outerCache = node[expando] || (node[expando] = {});
                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                            cache = uniqueCache[type] || [];
                            nodeIndex = cache[0] === dirruns && cache[1];
                            diff = nodeIndex && cache[2];
                            node = nodeIndex && parent.childNodes[nodeIndex];
                            while(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()){
                                if (node.nodeType === 1 && ++diff && node === elem) {
                                    uniqueCache[type] = [
                                        dirruns,
                                        nodeIndex,
                                        diff
                                    ];
                                    break;
                                }
                            }
                        } else {
                            if (useCache) {
                                node = elem;
                                outerCache = node[expando] || (node[expando] = {});
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex;
                            }
                            if (diff === false) {
                                while(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()){
                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        if (useCache) {
                                            outerCache = node[expando] || (node[expando] = {});
                                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                            uniqueCache[type] = [
                                                dirruns,
                                                diff
                                            ];
                                        }
                                        if (node === elem) {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        diff -= last;
                        return diff === first || diff % first === 0 && diff / first >= 0;
                    }
                };
            },
            PSEUDO: function(pseudo, argument) {
                var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                if (fn[expando]) {
                    return fn(argument);
                }
                if (fn.length > 1) {
                    args = [
                        pseudo,
                        pseudo,
                        "",
                        argument
                    ];
                    return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                        var idx, matched = fn(seed, argument), i1 = matched.length;
                        while(i1--){
                            idx = indexOf(seed, matched[i1]);
                            seed[idx] = !(matches[idx] = matched[i1]);
                        }
                    }) : function(elem) {
                        return fn(elem, 0, args);
                    };
                }
                return fn;
            }
        },
        pseudos: {
            not: markFunction(function(selector) {
                var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                return matcher[expando] ? markFunction(function(seed, matches, _context, xml) {
                    var elem, unmatched = matcher(seed, null, xml, []), i1 = seed.length;
                    while(i1--){
                        if (elem = unmatched[i1]) {
                            seed[i1] = !(matches[i1] = elem);
                        }
                    }
                }) : function(elem, _context, xml) {
                    input[0] = elem;
                    matcher(input, null, xml, results);
                    input[0] = null;
                    return !results.pop();
                };
            }),
            has: markFunction(function(selector) {
                return function(elem) {
                    return Sizzle(selector, elem).length > 0;
                };
            }),
            contains: markFunction(function(text) {
                text = text.replace(runescape, funescape);
                return function(elem) {
                    return (elem.textContent || getText(elem)).indexOf(text) > -1;
                };
            }),
            lang: markFunction(function(lang) {
                if (!ridentifier.test(lang || "")) {
                    Sizzle.error("unsupported lang: " + lang);
                }
                lang = lang.replace(runescape, funescape).toLowerCase();
                return function(elem) {
                    var elemLang;
                    do {
                        if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                            elemLang = elemLang.toLowerCase();
                            return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                        }
                    }while ((elem = elem.parentNode) && elem.nodeType === 1)
                    return false;
                };
            }),
            target: function(elem) {
                var hash = window.location && window.location.hash;
                return hash && hash.slice(1) === elem.id;
            },
            root: function(elem) {
                return elem === docElem;
            },
            focus: function(elem) {
                return elem === document1.activeElement && (!document1.hasFocus || document1.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
            },
            enabled: createDisabledPseudo(false),
            disabled: createDisabledPseudo(true),
            checked: function(elem) {
                var nodeName = elem.nodeName.toLowerCase();
                return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
            },
            selected: function(elem) {
                if (elem.parentNode) {
                    elem.parentNode.selectedIndex;
                }
                return elem.selected === true;
            },
            empty: function(elem) {
                for(elem = elem.firstChild; elem; elem = elem.nextSibling){
                    if (elem.nodeType < 6) {
                        return false;
                    }
                }
                return true;
            },
            parent: function(elem) {
                return !Expr.pseudos["empty"](elem);
            },
            header: function(elem) {
                return rheader.test(elem.nodeName);
            },
            input: function(elem) {
                return rinputs.test(elem.nodeName);
            },
            button: function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === "button" || name === "button";
            },
            text: function(elem) {
                var attr;
                return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
            },
            first: createPositionalPseudo(function() {
                return [
                    0
                ];
            }),
            last: createPositionalPseudo(function(_matchIndexes, length) {
                return [
                    length - 1
                ];
            }),
            eq: createPositionalPseudo(function(_matchIndexes, length, argument) {
                return [
                    argument < 0 ? argument + length : argument
                ];
            }),
            even: createPositionalPseudo(function(matchIndexes, length) {
                var i1 = 0;
                for(; i1 < length; i1 += 2){
                    matchIndexes.push(i1);
                }
                return matchIndexes;
            }),
            odd: createPositionalPseudo(function(matchIndexes, length) {
                var i1 = 1;
                for(; i1 < length; i1 += 2){
                    matchIndexes.push(i1);
                }
                return matchIndexes;
            }),
            lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                var i1 = argument < 0 ? argument + length : argument > length ? length : argument;
                for(; --i1 >= 0;){
                    matchIndexes.push(i1);
                }
                return matchIndexes;
            }),
            gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                var i1 = argument < 0 ? argument + length : argument;
                for(; ++i1 < length;){
                    matchIndexes.push(i1);
                }
                return matchIndexes;
            })
        }
    };
    Expr.pseudos["nth"] = Expr.pseudos["eq"];
    for(i1 in {
        radio: true,
        checkbox: true,
        file: true,
        password: true,
        image: true
    }){
        Expr.pseudos[i1] = createInputPseudo(i1);
    }
    for(i1 in {
        submit: true,
        reset: true
    }){
        Expr.pseudos[i1] = createButtonPseudo(i1);
    }
    function setFilters() {}
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();
    tokenize = Sizzle.tokenize = function(selector, parseOnly) {
        var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
        if (cached) {
            return parseOnly ? 0 : cached.slice(0);
        }
        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;
        while(soFar){
            if (!matched || (match = rcomma.exec(soFar))) {
                if (match) {
                    soFar = soFar.slice(match[0].length) || soFar;
                }
                groups.push(tokens = []);
            }
            matched = false;
            if (match = rcombinators.exec(soFar)) {
                matched = match.shift();
                tokens.push({
                    value: matched,
                    type: match[0].replace(rtrim, " ")
                });
                soFar = soFar.slice(matched.length);
            }
            for(type in Expr.filter){
                if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                    });
                    soFar = soFar.slice(matched.length);
                }
            }
            if (!matched) {
                break;
            }
        }
        return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
    };
    function toSelector(tokens) {
        var i1 = 0, len = tokens.length, selector = "";
        for(; i1 < len; i1++){
            selector += tokens[i1].value;
        }
        return selector;
    }
    function addCombinator(matcher, combinator, base) {
        var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === "parentNode", doneName = done++;
        return combinator.first ? function(elem, context, xml) {
            while(elem = elem[dir]){
                if (elem.nodeType === 1 || checkNonElements) {
                    return matcher(elem, context, xml);
                }
            }
            return false;
        } : function(elem, context, xml) {
            var oldCache, uniqueCache, outerCache, newCache = [
                dirruns,
                doneName
            ];
            if (xml) {
                while(elem = elem[dir]){
                    if (elem.nodeType === 1 || checkNonElements) {
                        if (matcher(elem, context, xml)) {
                            return true;
                        }
                    }
                }
            } else {
                while(elem = elem[dir]){
                    if (elem.nodeType === 1 || checkNonElements) {
                        outerCache = elem[expando] || (elem[expando] = {});
                        uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                        if (skip && skip === elem.nodeName.toLowerCase()) {
                            elem = elem[dir] || elem;
                        } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                            return newCache[2] = oldCache[2];
                        } else {
                            uniqueCache[key] = newCache;
                            if (newCache[2] = matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        };
    }
    function elementMatcher(matchers) {
        return matchers.length > 1 ? function(elem, context, xml) {
            var i1 = matchers.length;
            while(i1--){
                if (!matchers[i1](elem, context, xml)) {
                    return false;
                }
            }
            return true;
        } : matchers[0];
    }
    function multipleContexts(selector, contexts, results) {
        var i1 = 0, len = contexts.length;
        for(; i1 < len; i1++){
            Sizzle(selector, contexts[i1], results);
        }
        return results;
    }
    function condense(unmatched, map, filter, context, xml) {
        var elem, newUnmatched = [], i1 = 0, len = unmatched.length, mapped = map != null;
        for(; i1 < len; i1++){
            if (elem = unmatched[i1]) {
                if (!filter || filter(elem, context, xml)) {
                    newUnmatched.push(elem);
                    if (mapped) {
                        map.push(i1);
                    }
                }
            }
        }
        return newUnmatched;
    }
    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
        if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter);
        }
        if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector);
        }
        return markFunction(function(seed, results, context, xml) {
            var temp, i1, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [
                context
            ] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
            if (matcher) {
                matcher(matcherIn, matcherOut, context, xml);
            }
            if (postFilter) {
                temp = condense(matcherOut, postMap);
                postFilter(temp, [], context, xml);
                i1 = temp.length;
                while(i1--){
                    if (elem = temp[i1]) {
                        matcherOut[postMap[i1]] = !(matcherIn[postMap[i1]] = elem);
                    }
                }
            }
            if (seed) {
                if (postFinder || preFilter) {
                    if (postFinder) {
                        temp = [];
                        i1 = matcherOut.length;
                        while(i1--){
                            if (elem = matcherOut[i1]) {
                                temp.push(matcherIn[i1] = elem);
                            }
                        }
                        postFinder(null, matcherOut = [], temp, xml);
                    }
                    i1 = matcherOut.length;
                    while(i1--){
                        if ((elem = matcherOut[i1]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i1]) > -1) {
                            seed[temp] = !(results[temp] = elem);
                        }
                    }
                }
            } else {
                matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                if (postFinder) {
                    postFinder(null, results, matcherOut, xml);
                } else {
                    push.apply(results, matcherOut);
                }
            }
        });
    }
    function matcherFromTokens(tokens) {
        var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i1 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
            return elem === checkContext;
        }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
            return indexOf(checkContext, elem) > -1;
        }, implicitRelative, true), matchers = [
            function(elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
            }
        ];
        for(; i1 < len; i1++){
            if (matcher = Expr.relative[tokens[i1].type]) {
                matchers = [
                    addCombinator(elementMatcher(matchers), matcher)
                ];
            } else {
                matcher = Expr.filter[tokens[i1].type].apply(null, tokens[i1].matches);
                if (matcher[expando]) {
                    j = ++i1;
                    for(; j < len; j++){
                        if (Expr.relative[tokens[j].type]) {
                            break;
                        }
                    }
                    return setMatcher(i1 > 1 && elementMatcher(matchers), i1 > 1 && toSelector(tokens.slice(0, i1 - 1).concat({
                        value: tokens[i1 - 2].type === " " ? "*" : ""
                    })).replace(rtrim, "$1"), matcher, i1 < j && matcherFromTokens(tokens.slice(i1, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
            }
        }
        return elementMatcher(matchers);
    }
    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
        var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
            var elem, j, matcher, matchedCount = 0, i1 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
            if (outermost) {
                outermostContext = context == document1 || context || outermost;
            }
            for(; i1 !== len && (elem = elems[i1]) != null; i1++){
                if (byElement && elem) {
                    j = 0;
                    if (!context && elem.ownerDocument != document1) {
                        setDocument(elem);
                        xml = !documentIsHTML;
                    }
                    while(matcher = elementMatchers[j++]){
                        if (matcher(elem, context || document1, xml)) {
                            results.push(elem);
                            break;
                        }
                    }
                    if (outermost) {
                        dirruns = dirrunsUnique;
                    }
                }
                if (bySet) {
                    if (elem = !matcher && elem) {
                        matchedCount--;
                    }
                    if (seed) {
                        unmatched.push(elem);
                    }
                }
            }
            matchedCount += i1;
            if (bySet && i1 !== matchedCount) {
                j = 0;
                while(matcher = setMatchers[j++]){
                    matcher(unmatched, setMatched, context, xml);
                }
                if (seed) {
                    if (matchedCount > 0) {
                        while(i1--){
                            if (!(unmatched[i1] || setMatched[i1])) {
                                setMatched[i1] = pop.call(results);
                            }
                        }
                    }
                    setMatched = condense(setMatched);
                }
                push.apply(results, setMatched);
                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                    Sizzle.uniqueSort(results);
                }
            }
            if (outermost) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
            }
            return unmatched;
        };
        return bySet ? markFunction(superMatcher) : superMatcher;
    }
    compile = Sizzle.compile = function(selector, match) {
        var i1, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
        if (!cached) {
            if (!match) {
                match = tokenize(selector);
            }
            i1 = match.length;
            while(i1--){
                cached = matcherFromTokens(match[i1]);
                if (cached[expando]) {
                    setMatchers.push(cached);
                } else {
                    elementMatchers.push(cached);
                }
            }
            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            cached.selector = selector;
        }
        return cached;
    };
    select = Sizzle.select = function(selector, context, results, seed) {
        var i1, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
        results = results || [];
        if (match.length === 1) {
            tokens = match[0] = match[0].slice(0);
            if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                if (!context) {
                    return results;
                } else if (compiled) {
                    context = context.parentNode;
                }
                selector = selector.slice(tokens.shift().value.length);
            }
            i1 = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
            while(i1--){
                token = tokens[i1];
                if (Expr.relative[type = token.type]) {
                    break;
                }
                if (find = Expr.find[type]) {
                    if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                        tokens.splice(i1, 1);
                        selector = seed.length && toSelector(tokens);
                        if (!selector) {
                            push.apply(results, seed);
                            return results;
                        }
                        break;
                    }
                }
            }
        }
        (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
        return results;
    };
    support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
    support.detectDuplicates = !!hasDuplicate;
    setDocument();
    support.sortDetached = assert(function(el) {
        return el.compareDocumentPosition(document1.createElement("fieldset")) & 1;
    });
    if (!assert(function(el) {
        el.innerHTML = "<a href='#'></a>";
        return el.firstChild.getAttribute("href") === "#";
    })) {
        addHandle("type|href|height|width", function(elem, name, isXML) {
            if (!isXML) {
                return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
            }
        });
    }
    if (!support.attributes || !assert(function(el) {
        el.innerHTML = "<input/>";
        el.firstChild.setAttribute("value", "");
        return el.firstChild.getAttribute("value") === "";
    })) {
        addHandle("value", function(elem, _name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === "input") {
                return elem.defaultValue;
            }
        });
    }
    if (!assert(function(el) {
        return el.getAttribute("disabled") == null;
    })) {
        addHandle(booleans, function(elem, name, isXML) {
            var val;
            if (!isXML) {
                return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            }
        });
    }
    var _sizzle = window.Sizzle;
    Sizzle.noConflict = function() {
        if (window.Sizzle === Sizzle) {
            window.Sizzle = _sizzle;
        }
        return Sizzle;
    };
    if (typeof define === "function" && define.amd) {
        define(function() {
            return Sizzle;
        });
    } else if (typeof module !== "undefined" && module.exports) {
        module.exports = Sizzle;
    } else {
        window.Sizzle = Sizzle;
    }
}
const __default15 = (document1)=>{
    const sizzleWindow = {
        document: document1
    };
    SetupSizzle(sizzleWindow);
    const { Sizzle } = sizzleWindow;
    return {
        first (selectors, context) {
            return Sizzle(selectors, context)[0] ?? null;
        },
        select (selectors, context) {
            return Sizzle(selectors, context);
        },
        match (selectors, context) {
            return Sizzle.matchesSelector(context, selectors);
        }
    };
};
let codeGenerationAllowed = null;
function getSelectorEngine() {
    if (codeGenerationAllowed === null) {
        try {
            new Function("");
            codeGenerationAllowed = true;
        } catch (e) {
            codeGenerationAllowed = false;
        }
    }
    if (codeGenerationAllowed) {
        return __default14;
    } else {
        return __default15;
    }
}
var _computedKey, _computedKey1;
_computedKey = Symbol.iterator;
class DOMTokenList {
    #_value = "";
    get #value() {
        return this.#_value;
    }
    set #value(value) {
        this.#_value = value;
        this.#onChange(value);
    }
    #set = new Set();
    #onChange;
    constructor(onChange, key){
        if (key !== CTOR_KEY) {
            throw new TypeError("Illegal constructor");
        }
        this.#onChange = onChange;
    }
    static #invalidToken(token) {
        return token === "" || /[\t\n\f\r ]/.test(token);
    }
    #setIndices() {
        const classes = Array.from(this.#set);
        for(let i1 = 0; i1 < classes.length; i1++){
            this[i1] = classes[i1];
        }
    }
    set value(input) {
        this.#value = input;
        this.#set = new Set(input.trim().split(/[\t\n\f\r\s]+/g).filter(Boolean));
        this.#setIndices();
    }
    get value() {
        return this.#_value;
    }
    get length() {
        return this.#set.size;
    }
    *entries() {
        const array = Array.from(this.#set);
        for(let i1 = 0; i1 < array.length; i1++){
            yield [
                i1,
                array[i1]
            ];
        }
    }
    *values() {
        yield* this.#set.values();
    }
    *keys() {
        for(let i1 = 0; i1 < this.#set.size; i1++){
            yield i1;
        }
    }
    *[_computedKey]() {
        yield* this.#set.values();
    }
    item(index) {
        index = Number(index);
        if (Number.isNaN(index) || index === Infinity) index = 0;
        return this[Math.trunc(index) % 2 ** 32] ?? null;
    }
    contains(element) {
        return this.#set.has(element);
    }
    add(...elements) {
        for (const element of elements){
            if (DOMTokenList.#invalidToken(element)) {
                throw new DOMException("Failed to execute 'add' on 'DOMTokenList': The token provided must not be empty.");
            }
            const { size } = this.#set;
            this.#set.add(element);
            if (size < this.#set.size) {
                this[size] = element;
            }
        }
        this.#updateClassString();
    }
    remove(...elements) {
        const { size } = this.#set;
        for (const element of elements){
            if (DOMTokenList.#invalidToken(element)) {
                throw new DOMException("Failed to execute 'remove' on 'DOMTokenList': The token provided must not be empty.");
            }
            this.#set.delete(element);
        }
        if (size !== this.#set.size) {
            for(let i1 = this.#set.size; i1 < size; i1++){
                delete this[i1];
            }
            this.#setIndices();
        }
        this.#updateClassString();
    }
    replace(oldToken, newToken) {
        if ([
            oldToken,
            newToken
        ].some((v)=>DOMTokenList.#invalidToken(v))) {
            throw new DOMException("Failed to execute 'replace' on 'DOMTokenList': The token provided must not be empty.");
        }
        if (!this.#set.has(oldToken)) {
            return false;
        }
        if (this.#set.has(newToken)) {
            this.remove(oldToken);
        } else {
            this.#set.delete(oldToken);
            this.#set.add(newToken);
            this.#setIndices();
            this.#updateClassString();
        }
        return true;
    }
    supports() {
        throw new Error("Not implemented");
    }
    toggle(element, force) {
        if (force !== undefined) {
            const operation = force ? "add" : "remove";
            this[operation](element);
            return false;
        } else {
            const contains = this.contains(element);
            const operation = contains ? "remove" : "add";
            this[operation](element);
            return !contains;
        }
    }
    forEach(callback) {
        for (const [i1, value] of this.entries()){
            callback(value, i1, this);
        }
    }
    #updateClassString() {
        this.#value = Array.from(this.#set).join(" ");
    }
}
const setNamedNodeMapOwnerElementSym = Symbol();
const setAttrValueSym = Symbol();
class Attr extends Node {
    #namedNodeMap = null;
    #name = "";
    #value = "";
    #ownerElement = null;
    constructor(map, name, value, key){
        if (key !== CTOR_KEY) {
            throw new TypeError("Illegal constructor");
        }
        super(name, NodeType.ATTRIBUTE_NODE, null, CTOR_KEY);
        this.#name = name;
        this.#value = value;
        this.#namedNodeMap = map;
    }
    [setNamedNodeMapOwnerElementSym](ownerElement) {
        this.#ownerElement = ownerElement;
        this.#namedNodeMap = ownerElement?.attributes ?? null;
        if (ownerElement) {
            this._setOwnerDocument(ownerElement.ownerDocument);
        }
    }
    [setAttrValueSym](value) {
        this.#value = value;
    }
    _shallowClone() {
        const newAttr = new Attr(null, this.#name, this.#value, CTOR_KEY);
        newAttr._setOwnerDocument(this.ownerDocument);
        return newAttr;
    }
    cloneNode() {
        return super.cloneNode();
    }
    appendChild() {
        throw new DOMException("Cannot add children to an Attribute");
    }
    replaceChild() {
        throw new DOMException("Cannot add children to an Attribute");
    }
    insertBefore() {
        throw new DOMException("Cannot add children to an Attribute");
    }
    removeChild() {
        throw new DOMException("The node to be removed is not a child of this node");
    }
    get name() {
        return this.#name;
    }
    get localName() {
        return this.#name;
    }
    get value() {
        return this.#value;
    }
    set value(value) {
        this.#value = String(value);
        if (this.#namedNodeMap) {
            this.#namedNodeMap[setNamedNodeMapValueSym](this.#name, this.#value, true);
        }
    }
    get ownerElement() {
        return this.#ownerElement ?? null;
    }
    get specified() {
        return true;
    }
    get prefix() {
        return null;
    }
}
const setNamedNodeMapValueSym = Symbol();
const getNamedNodeMapValueSym = Symbol();
const getNamedNodeMapAttrNamesSym = Symbol();
const getNamedNodeMapAttrNodeSym = Symbol();
const removeNamedNodeMapAttrSym = Symbol();
_computedKey1 = Symbol.iterator;
class NamedNodeMap {
    static #indexedAttrAccess = function(map, index) {
        if (index + 1 > this.length) {
            return undefined;
        }
        const attribute = Object.keys(map).filter((attribute)=>map[attribute] !== undefined)[index]?.slice(1);
        return this[getNamedNodeMapAttrNodeSym](attribute);
    };
    #onAttrNodeChange;
    constructor(ownerElement, onAttrNodeChange, key){
        if (key !== CTOR_KEY) {
            throw new TypeError("Illegal constructor.");
        }
        this.#ownerElement = ownerElement;
        this.#onAttrNodeChange = onAttrNodeChange;
    }
    #attrNodeCache = {};
    #map = {};
    #length = 0;
    #capacity = 0;
    #ownerElement = null;
    [getNamedNodeMapAttrNodeSym](attribute) {
        const safeAttrName = "a" + attribute;
        let attrNode = this.#attrNodeCache[safeAttrName];
        if (!attrNode) {
            attrNode = this.#attrNodeCache[safeAttrName] = new Attr(this, attribute, this.#map[safeAttrName], CTOR_KEY);
            attrNode[setNamedNodeMapOwnerElementSym](this.#ownerElement);
        }
        return attrNode;
    }
    [getNamedNodeMapAttrNamesSym]() {
        const names = [];
        for (const [name, value] of Object.entries(this.#map)){
            if (value !== undefined) {
                names.push(name.slice(1));
            }
        }
        return names;
    }
    [getNamedNodeMapValueSym](attribute) {
        const safeAttrName = "a" + attribute;
        return this.#map[safeAttrName];
    }
    [setNamedNodeMapValueSym](attribute, value, bubble = false) {
        const safeAttrName = "a" + attribute;
        if (this.#map[safeAttrName] === undefined) {
            this.#length++;
            if (this.#length > this.#capacity) {
                this.#capacity = this.#length;
                const index = this.#capacity - 1;
                Object.defineProperty(this, String(this.#capacity - 1), {
                    get: NamedNodeMap.#indexedAttrAccess.bind(this, this.#map, index)
                });
            }
        } else if (this.#attrNodeCache[safeAttrName]) {
            this.#attrNodeCache[safeAttrName][setAttrValueSym](value);
        }
        this.#map[safeAttrName] = value;
        if (bubble) {
            this.#onAttrNodeChange(attribute, value);
        }
    }
    [removeNamedNodeMapAttrSym](attribute) {
        const safeAttrName = "a" + attribute;
        if (this.#map[safeAttrName] !== undefined) {
            this.#length--;
            this.#map[safeAttrName] = undefined;
            this.#onAttrNodeChange(attribute, null);
            const attrNode = this.#attrNodeCache[safeAttrName];
            if (attrNode) {
                attrNode[setNamedNodeMapOwnerElementSym](null);
                this.#attrNodeCache[safeAttrName] = undefined;
            }
        }
    }
    *[_computedKey1]() {
        for(let i1 = 0; i1 < this.length; i1++){
            yield this[i1];
        }
    }
    get length() {
        return this.#length;
    }
    item(index) {
        if (index >= this.#length) {
            return null;
        }
        return this[index];
    }
    getNamedItem(attribute) {
        const safeAttrName = "a" + attribute;
        if (this.#map[safeAttrName] !== undefined) {
            return this[getNamedNodeMapAttrNodeSym](attribute);
        }
        return null;
    }
    setNamedItem(attrNode) {
        if (attrNode.ownerElement) {
            throw new DOMException("Attribute already in use");
        }
        const safeAttrName = "a" + attrNode.name;
        const previousAttr = this.#attrNodeCache[safeAttrName];
        if (previousAttr) {
            previousAttr[setNamedNodeMapOwnerElementSym](null);
            this.#map[safeAttrName] = undefined;
        }
        attrNode[setNamedNodeMapOwnerElementSym](this.#ownerElement);
        this.#attrNodeCache[safeAttrName] = attrNode;
        this[setNamedNodeMapValueSym](attrNode.name, attrNode.value, true);
    }
    removeNamedItem(attribute) {
        const safeAttrName = "a" + attribute;
        if (this.#map[safeAttrName] !== undefined) {
            const attrNode = this[getNamedNodeMapAttrNodeSym](attribute);
            this[removeNamedNodeMapAttrSym](attribute);
            return attrNode;
        }
        throw new DOMException("Node was not found");
    }
}
class Element1 extends Node {
    tagName;
    localName;
    attributes;
    #currentId;
    #classList;
    constructor(tagName, parentNode, attributes, key){
        super(tagName, NodeType.ELEMENT_NODE, parentNode, key);
        this.tagName = tagName;
        this.attributes = new NamedNodeMap(this, (attribute, value)=>{
            if (value === null) {
                value = "";
            }
            switch(attribute){
                case "class":
                    this.#classList.value = value;
                    break;
                case "id":
                    this.#currentId = value;
                    break;
            }
        }, CTOR_KEY);
        this.#currentId = "";
        this.#classList = new DOMTokenList((className)=>{
            if (this.hasAttribute("class") || className !== "") {
                this.attributes[setNamedNodeMapValueSym]("class", className);
            }
        }, CTOR_KEY);
        for (const attr of attributes){
            this.setAttribute(attr[0], attr[1]);
            switch(attr[0]){
                case "class":
                    this.#classList.value = attr[1];
                    break;
                case "id":
                    this.#currentId = attr[1];
                    break;
            }
        }
        this.tagName = this.nodeName = tagName.toUpperCase();
        this.localName = tagName.toLowerCase();
    }
    _shallowClone() {
        const attributes = [];
        for (const attribute of this.getAttributeNames()){
            attributes.push([
                attribute,
                this.getAttribute(attribute)
            ]);
        }
        return new Element1(this.nodeName, null, attributes, CTOR_KEY);
    }
    get childElementCount() {
        return this._getChildNodesMutator().elementsView().length;
    }
    get className() {
        return this.getAttribute("class") ?? "";
    }
    set className(className) {
        this.setAttribute("class", className);
        this.#classList.value = className;
    }
    get classList() {
        return this.#classList;
    }
    get outerHTML() {
        return getOuterOrInnerHtml(this, true);
    }
    set outerHTML(html) {}
    get innerHTML() {
        return getOuterOrInnerHtml(this, false);
    }
    set innerHTML(html) {
        for (const child of this.childNodes){
            child._setParent(null);
        }
        const mutator = this._getChildNodesMutator();
        mutator.splice(0, this.childNodes.length);
        if (html.length) {
            const parsed = fragmentNodesFromString(html);
            for (const child of parsed.childNodes[0].childNodes){
                mutator.push(child);
            }
            for (const child of this.childNodes){
                child._setParent(this);
                child._setOwnerDocument(this.ownerDocument);
            }
        }
    }
    get innerText() {
        return this.textContent;
    }
    set innerText(text) {
        this.textContent = text;
    }
    get children() {
        return this._getChildNodesMutator().elementsView();
    }
    get id() {
        return this.#currentId || "";
    }
    set id(id) {
        this.setAttribute("id", this.#currentId = id);
    }
    getAttributeNames() {
        return this.attributes[getNamedNodeMapAttrNamesSym]();
    }
    getAttribute(name) {
        return this.attributes[getNamedNodeMapValueSym](name.toLowerCase()) ?? null;
    }
    setAttribute(rawName, value) {
        const name = String(rawName?.toLowerCase());
        const strValue = String(value);
        this.attributes[setNamedNodeMapValueSym](name, strValue);
        if (name === "id") {
            this.#currentId = strValue;
        } else if (name === "class") {
            this.#classList.value = strValue;
        }
    }
    removeAttribute(rawName) {
        const name = String(rawName?.toLowerCase());
        this.attributes[removeNamedNodeMapAttrSym](name);
        if (name === "class") {
            this.#classList.value = "";
        }
    }
    hasAttribute(name) {
        return this.attributes[getNamedNodeMapValueSym](String(name?.toLowerCase())) !== undefined;
    }
    hasAttributeNS(_namespace, name) {
        return this.attributes[getNamedNodeMapValueSym](String(name?.toLowerCase())) !== undefined;
    }
    replaceWith(...nodes) {
        this._replaceWith(...nodes);
    }
    remove() {
        this._remove();
    }
    append(...nodes) {
        const mutator = this._getChildNodesMutator();
        mutator.push(...nodesAndTextNodes(nodes, this));
    }
    prepend(...nodes) {
        const mutator = this._getChildNodesMutator();
        mutator.splice(0, 0, ...nodesAndTextNodes(nodes, this));
    }
    before(...nodes) {
        if (this.parentNode) {
            insertBeforeAfter(this, nodes, true);
        }
    }
    after(...nodes) {
        if (this.parentNode) {
            insertBeforeAfter(this, nodes, false);
        }
    }
    get firstElementChild() {
        const elements = this._getChildNodesMutator().elementsView();
        return elements[0] ?? null;
    }
    get lastElementChild() {
        const elements = this._getChildNodesMutator().elementsView();
        return elements[elements.length - 1] ?? null;
    }
    get nextElementSibling() {
        const parent = this.parentNode;
        if (!parent) {
            return null;
        }
        const mutator = parent._getChildNodesMutator();
        const index = mutator.indexOfElementsView(this);
        const elements = mutator.elementsView();
        return elements[index + 1] ?? null;
    }
    get previousElementSibling() {
        const parent = this.parentNode;
        if (!parent) {
            return null;
        }
        const mutator = parent._getChildNodesMutator();
        const index = mutator.indexOfElementsView(this);
        const elements = mutator.elementsView();
        return elements[index - 1] ?? null;
    }
    querySelector(selectors) {
        if (!this.ownerDocument) {
            throw new Error("Element must have an owner document");
        }
        return this.ownerDocument._nwapi.first(selectors, this);
    }
    querySelectorAll(selectors) {
        if (!this.ownerDocument) {
            throw new Error("Element must have an owner document");
        }
        const nodeList = new NodeList();
        const mutator = nodeList[nodeListMutatorSym]();
        for (const match of this.ownerDocument._nwapi.select(selectors, this)){
            mutator.push(match);
        }
        return nodeList;
    }
    matches(selectorString) {
        return this.ownerDocument._nwapi.match(selectorString, this);
    }
    getElementById(id) {
        for (const child of this.childNodes){
            if (child.nodeType === NodeType.ELEMENT_NODE) {
                if (child.id === id) {
                    return child;
                }
                const search = child.getElementById(id);
                if (search) {
                    return search;
                }
            }
        }
        return null;
    }
    getElementsByTagName(tagName) {
        const fixCaseTagName = tagName.toUpperCase();
        if (fixCaseTagName === "*") {
            return this._getElementsByTagNameWildcard([]);
        } else {
            return this._getElementsByTagName(tagName.toUpperCase(), []);
        }
    }
    _getElementsByTagNameWildcard(search) {
        for (const child of this.childNodes){
            if (child.nodeType === NodeType.ELEMENT_NODE) {
                search.push(child);
                child._getElementsByTagNameWildcard(search);
            }
        }
        return search;
    }
    _getElementsByTagName(tagName, search) {
        for (const child of this.childNodes){
            if (child.nodeType === NodeType.ELEMENT_NODE) {
                if (child.tagName === tagName) {
                    search.push(child);
                }
                child._getElementsByTagName(tagName, search);
            }
        }
        return search;
    }
    getElementsByClassName(className) {
        return getElementsByClassName(this, className, []);
    }
    getElementsByTagNameNS(_namespace, localName) {
        return this.getElementsByTagName(localName);
    }
}
class DOMImplementation {
    constructor(key){
        if (key !== CTOR_KEY) {
            throw new TypeError("Illegal constructor.");
        }
    }
    createDocument() {
        throw new Error("Unimplemented");
    }
    createHTMLDocument(titleStr) {
        titleStr += "";
        const doc = new HTMLDocument(CTOR_KEY);
        const docType = new DocumentType("html", "", "", CTOR_KEY);
        doc.appendChild(docType);
        const html = new Element1("html", doc, [], CTOR_KEY);
        html._setOwnerDocument(doc);
        const head = new Element1("head", html, [], CTOR_KEY);
        const body = new Element1("body", html, [], CTOR_KEY);
        const title = new Element1("title", head, [], CTOR_KEY);
        const titleText = new Text(titleStr);
        title.appendChild(titleText);
        doc.head = head;
        doc.body = body;
        return doc;
    }
    createDocumentType(qualifiedName, publicId, systemId) {
        const doctype = new DocumentType(qualifiedName, publicId, systemId, CTOR_KEY);
        return doctype;
    }
}
function nodesFromString(html) {
    const parsed = JSON.parse(parse4(html));
    const node = nodeFromArray(parsed, null);
    return node;
}
class HTMLTemplateElement extends Element1 {
    __contentIsSet = false;
    #content = null;
    constructor(parentNode, attributes, key, content){
        super("TEMPLATE", parentNode, attributes, key);
        this.#content = content;
        this.__contentIsSet = true;
    }
    get content() {
        return this.#content;
    }
    _setOwnerDocument(document1) {
        super._setOwnerDocument(document1);
        if (this.__contentIsSet) {
            this.content._setOwnerDocument(document1);
        }
    }
    _shallowClone() {
        const frag = new DocumentFragment1();
        const attributes = this.getAttributeNames().map((name)=>[
                name,
                this.getAttribute(name)
            ]);
        return new HTMLTemplateElement(null, attributes, CTOR_KEY, frag);
    }
    cloneNode(deep = false) {
        const newNode = super.cloneNode(deep);
        if (deep) {
            const destContent = newNode.content;
            for (const child of this.content.childNodes){
                destContent.appendChild(child.cloneNode(deep));
            }
        }
        return newNode;
    }
    get innerHTML() {
        return getOuterOrInnerHtml(this, false);
    }
    set innerHTML(html) {
        const content = this.content;
        for (const child of content.childNodes){
            child._setParent(null);
        }
        const mutator = content._getChildNodesMutator();
        mutator.splice(0, content.childNodes.length);
        if (html.length) {
            const parsed = fragmentNodesFromString(html);
            mutator.push(...parsed.childNodes[0].childNodes);
            for (const child of content.childNodes){
                child._setParent(content);
                child._setOwnerDocument(content.ownerDocument);
            }
        }
    }
    get outerHTML() {
        return `<template${getElementAttributesString(this)}>${this.innerHTML}</template>`;
    }
}
class DocumentType extends Node {
    #qualifiedName = "";
    #publicId = "";
    #systemId = "";
    constructor(name, publicId, systemId, key){
        super("html", NodeType.DOCUMENT_TYPE_NODE, null, key);
        this.#qualifiedName = name;
        this.#publicId = publicId;
        this.#systemId = systemId;
    }
    get name() {
        return this.#qualifiedName;
    }
    get publicId() {
        return this.#publicId;
    }
    get systemId() {
        return this.#systemId;
    }
    _shallowClone() {
        return new DocumentType(this.#qualifiedName, this.#publicId, this.#systemId, CTOR_KEY);
    }
}
class Document1 extends Node {
    head = null;
    body = null;
    implementation;
    #lockState = false;
    #documentURI = "about:blank";
    #title = "";
    #nwapi = null;
    constructor(){
        super("#document", NodeType.DOCUMENT_NODE, null, CTOR_KEY);
        this.implementation = new DOMImplementation(CTOR_KEY);
    }
    _shallowClone() {
        return new Document1();
    }
    get _nwapi() {
        return this.#nwapi || (this.#nwapi = getSelectorEngine()(this));
    }
    get documentURI() {
        return this.#documentURI;
    }
    get title() {
        return this.querySelector("title")?.textContent || "";
    }
    get cookie() {
        return "";
    }
    set cookie(newCookie) {}
    get visibilityState() {
        return "visible";
    }
    get hidden() {
        return false;
    }
    get compatMode() {
        return "CSS1Compat";
    }
    get documentElement() {
        for (const node of this.childNodes){
            if (node.nodeType === NodeType.ELEMENT_NODE) {
                return node;
            }
        }
        return null;
    }
    get doctype() {
        for (const node of this.childNodes){
            if (node.nodeType === NodeType.DOCUMENT_TYPE_NODE) {
                return node;
            }
        }
        return null;
    }
    get childElementCount() {
        let count = 0;
        for (const { nodeType } of this.childNodes){
            if (nodeType === NodeType.ELEMENT_NODE) {
                count++;
            }
        }
        return count;
    }
    appendChild(child) {
        super.appendChild(child);
        child._setOwnerDocument(this);
        return child;
    }
    createElement(tagName, options) {
        tagName = tagName.toUpperCase();
        switch(tagName){
            case "TEMPLATE":
                {
                    const frag = new DocumentFragment1();
                    const elm = new HTMLTemplateElement(null, [], CTOR_KEY, frag);
                    elm._setOwnerDocument(this);
                    return elm;
                }
            default:
                {
                    const elm = new Element1(tagName, null, [], CTOR_KEY);
                    elm._setOwnerDocument(this);
                    return elm;
                }
        }
    }
    createElementNS(namespace, qualifiedName, options) {
        if (namespace === "http://www.w3.org/1999/xhtml") {
            return this.createElement(qualifiedName, options);
        } else {
            throw new Error(`createElementNS: "${namespace}" namespace unimplemented`);
        }
    }
    createTextNode(data) {
        return new Text(data);
    }
    createComment(data) {
        return new Comment(data);
    }
    createDocumentFragment() {
        const fragment = new DocumentFragment1();
        fragment._setOwnerDocument(this);
        return fragment;
    }
    importNode(node, deep = false) {
        const copy = node.cloneNode(deep);
        copy._setOwnerDocument(this);
        return copy;
    }
    adoptNode(node) {
        if (node instanceof Document1) {
            throw new DOMException("Adopting a Document node is not supported.", "NotSupportedError");
        }
        node._setParent(null);
        node._setOwnerDocument(this);
        return node;
    }
    querySelector(selectors) {
        return this._nwapi.first(selectors, this);
    }
    querySelectorAll(selectors) {
        const nodeList = new NodeList();
        const mutator = nodeList[nodeListMutatorSym]();
        for (const match of this._nwapi.select(selectors, this)){
            mutator.push(match);
        }
        return nodeList;
    }
    getElementById(id) {
        for (const child of this.childNodes){
            if (child.nodeType === NodeType.ELEMENT_NODE) {
                if (child.id === id) {
                    return child;
                }
                const search = child.getElementById(id);
                if (search) {
                    return search;
                }
            }
        }
        return null;
    }
    getElementsByTagName(tagName) {
        if (tagName === "*") {
            return this.documentElement ? this._getElementsByTagNameWildcard(this.documentElement, []) : [];
        } else {
            return this._getElementsByTagName(tagName.toUpperCase(), []);
        }
    }
    _getElementsByTagNameWildcard(node, search) {
        for (const child of this.childNodes){
            if (child.nodeType === NodeType.ELEMENT_NODE) {
                search.push(child);
                child._getElementsByTagNameWildcard(search);
            }
        }
        return search;
    }
    _getElementsByTagName(tagName, search) {
        for (const child of this.childNodes){
            if (child.nodeType === NodeType.ELEMENT_NODE) {
                if (child.tagName === tagName) {
                    search.push(child);
                }
                child._getElementsByTagName(tagName, search);
            }
        }
        return search;
    }
    getElementsByTagNameNS(_namespace, localName) {
        return this.getElementsByTagName(localName);
    }
    getElementsByClassName(className) {
        return getElementsByClassName(this, className, []);
    }
    hasFocus() {
        return true;
    }
}
class HTMLDocument extends Document1 {
    constructor(key){
        if (key !== CTOR_KEY) {
            throw new TypeError("Illegal constructor.");
        }
        super();
    }
    _shallowClone() {
        return new HTMLDocument(CTOR_KEY);
    }
}
__default13.Document = Document1;
__default13.Element = Element1;
function fragmentNodesFromString(html) {
    const parsed = JSON.parse(parseFrag(html));
    const node = nodeFromArray(parsed, null);
    return node;
}
function nodeFromArray(data, parentNode) {
    if (data[1] === "template") {
        const content = nodeFromArray(data[3], null);
        const contentFrag = new DocumentFragment1();
        const fragMutator = contentFrag._getChildNodesMutator();
        for (const child of content.childNodes){
            fragMutator.push(child);
            child._setParent(contentFrag);
        }
        return new HTMLTemplateElement(parentNode, data[2], CTOR_KEY, contentFrag);
    }
    const elm = new Element1(data[1], parentNode, data[2], CTOR_KEY);
    const childNodes = elm._getChildNodesMutator();
    let childNode;
    for (const child of data.slice(3)){
        switch(child[0]){
            case NodeType.TEXT_NODE:
                childNode = new Text(child[1]);
                childNode.parentNode = childNode.parentElement = elm;
                childNodes.push(childNode);
                break;
            case NodeType.COMMENT_NODE:
                childNode = new Comment(child[1]);
                childNode.parentNode = childNode.parentElement = elm;
                childNodes.push(childNode);
                break;
            case NodeType.DOCUMENT_NODE:
            case NodeType.ELEMENT_NODE:
                nodeFromArray(child, elm);
                break;
            case NodeType.DOCUMENT_TYPE_NODE:
                childNode = new DocumentType(child[1], child[2], child[3], CTOR_KEY);
                childNode.parentNode = childNode.parentElement = elm;
                childNodes.push(childNode);
                break;
        }
    }
    return elm;
}
class DOMParser {
    parseFromString(source, mimeType) {
        if (mimeType !== "text/html") {
            throw new Error(`DOMParser: "${mimeType}" unimplemented`);
        }
        const doc = new HTMLDocument(CTOR_KEY);
        const fakeDoc = nodesFromString(source);
        let htmlNode = null;
        let hasDoctype = false;
        for (const child of [
            ...fakeDoc.childNodes
        ]){
            doc.appendChild(child);
            if (child instanceof DocumentType) {
                hasDoctype = true;
            } else if (child.nodeName === "HTML") {
                htmlNode = child;
            }
        }
        if (!hasDoctype) {
            const docType = new DocumentType("html", "", "", CTOR_KEY);
            if (doc.childNodes.length === 0) {
                doc.appendChild(docType);
            } else {
                doc.insertBefore(docType, doc.childNodes[0]);
            }
        }
        if (htmlNode) {
            for (const child of htmlNode.childNodes){
                switch(child.tagName){
                    case "HEAD":
                        doc.head = child;
                        break;
                    case "BODY":
                        doc.body = child;
                        break;
                }
            }
        }
        return doc;
    }
}
const oldHasInstance = Array[Symbol.hasInstance];
Object.defineProperty(Array, Symbol.hasInstance, {
    value (value) {
        switch(value?.constructor){
            case HTMLCollection:
            case NodeList:
                return false;
            default:
                return oldHasInstance.call(this, value);
        }
    },
    configurable: true
});
const oldIsArray = Array.isArray;
Object.defineProperty(Array, "isArray", {
    value: (value)=>{
        switch(value?.constructor){
            case HTMLCollection:
            case NodeList:
                return false;
            default:
                return oldIsArray.call(Array, value);
        }
    },
    configurable: true
});
await init();
register(parse3, parse_frag);
function htmlEscape(value) {
    if (value instanceof SafeHtml) return value.value;
    if (value && typeof value === "object" && Symbol.iterator in value) {
        const rv = [];
        for (const v of value)rv.push(stringify(v));
        return rv.join("");
    }
    return stringify(value).replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll('"', "&quot;").replaceAll("'", "&#39;");
}
function stringify(v) {
    if (v === null || v === undefined || v === false) return "";
    return String(v);
}
class SafeHtml {
    value;
    constructor(value){
        this.value = value;
    }
    toString() {
        return this.value;
    }
}
function serializeDocument(document1) {
    return "<!doctype html>\n" + document1.documentElement.outerHTML;
}
function serializeFragment(fragment) {
    const rv = [];
    for (const node of fragment.childNodes){
        if (node instanceof Element1) rv.push(node.outerHTML);
        else if (node instanceof Text) rv.push(htmlEscape(node.data));
        else if (node instanceof Comment) rv.push("<!--" + node.data + "-->");
        else throw new Error(`Unknown node type: ${node}`);
    }
    return rv.join("");
}
function htmlOutline(document1) {
    const headings = Array.from(document1.querySelectorAll("h1, h2, h3, h4, h5, h6"));
    const rv = [];
    const create = (element)=>({
            title: element.innerHTML,
            id: element.id,
            children: []
        });
    const createNull = ()=>({
            children: []
        });
    const add = (outline, level)=>{
        if (level === 1) {
            rv.push(outline);
            return;
        }
        const lastOutline = rv.at(-1);
        let parentOutline = lastOutline ?? (rv.push(createNull()), rv[0]);
        for(let i1 = level - 2; i1 >= 0; i1--){
            const last = parentOutline.children.at(-1);
            if (last) parentOutline = last;
            else {
                const nul = createNull();
                parentOutline.children.push(nul);
                parentOutline = nul;
            }
        }
        parentOutline.children.push(outline);
    };
    headings.forEach((heading_)=>{
        const heading = heading_;
        const level = parseInt(heading.tagName.charAt(1));
        const outline = create(heading);
        add(outline, level);
    });
    return rv;
}
const builtinTemplates = {
    "division.html": await import("../templates/division.ts"),
    "landing-page.html": await import("../templates/landing-page.ts"),
    "table-of-contents.html": await import("../templates/table-of-contents.ts"),
    "part.html": await import("../templates/part.ts"),
    "copy-ack.html": await import("../templates/copy-ack.ts"),
    "dedication.html": await import("../templates/dedication.ts")
};
const vto = __default12({
    autoescape: false,
    useWith: true
});
vto.filters.htmlOutline = htmlOutline;
vto.filters.formatDate = ()=>"TODO: date formatting";
vto.filters.markdown = render;
const render1 = (template, d, content)=>{
    const context = {
        ...d,
        intl: intl(d.language)
    };
    return vto.runStringSync((builtinTemplates[template] ?? builtinTemplates["division.html"]).default, context);
};
class Division {
    static tableOfContents = {};
    static template = "division.html";
    static htmlClass;
    dependencies = {};
    async buildPhase1(deps, book) {
        this.compiledContent ??= await this.compile(await this.preprocess(await this.load(), deps, book), deps, book);
    }
    async buildPhase2(deps, book) {
        if (typeof this.compiledContent !== "string") {
            throw new Error("Build phase 2 called before phase 1 complete");
        }
        const processed = await this.process(this.compiledContent, deps, book);
        if (this.#didAccessDom) {
            this.compiledContent = serializeFragment(this.#dom);
        } else if (typeof processed === "string") {
            this.compiledContent = processed;
        }
        const laidOut = await this.layout(this.compiledContent, deps, book);
        this.builtContent = laidOut;
        const postprocessed = await this.postprocess(laidOut, deps, book);
        if (this.#didAccessDocument) {
            this.builtContent = serializeDocument(this.document);
        } else {
            this.builtContent = postprocessed;
        }
        return this.builtContent;
    }
    async preprocess(content, deps, book) {
        return content;
    }
    async compile(content, deps, book) {
        return render(content);
    }
    async process(content, deps, book) {
        return content;
    }
    async layout(content, deps, book) {
        const res = await render1(this.contentType.template, this, serializeFragment(this.dom));
        return res.content;
    }
    async postprocess(content, deps, book) {
        return content;
    }
    async load() {
        if (this.content) {
            return this.content;
        } else if (this.file) {
            return Deno.readTextFileSync(this.file);
        } else if (this.title) {
            return Deno.readTextFile(`${makeSlug(this.title)}.md`).catch(()=>"");
        }
        return "";
    }
    #source = null;
    get document() {
        this.#didAccessDocument = true;
        if (this.#document !== null) return this.#document;
        return this.#document = this.#getDocument();
    }
    #getDocument() {
        return new DOMParser().parseFromString(this.builtContent, "text/html");
    }
    #document = null;
    #didAccessDocument = false;
    get dom() {
        this.#didAccessDom = true;
        if (this.#dom !== null) return this.#dom;
        return this.#dom = this.#getDom();
    }
    #getDom() {
        if (this.compiledContent === undefined) {
            console.warn(`Attempted to access DOM of ${this} before compiling content`);
            return new Document1().createDocumentFragment();
        }
        const tmpl = new Document1().createElement("template");
        tmpl.innerHTML = this.compiledContent;
        return tmpl.content;
    }
    #dom = null;
    #didAccessDom = false;
    get language() {
        if (this.lang) return this.lang;
        if (this.parent) return this.parent.language;
        return "en";
    }
    self = this;
    children = [];
    previous;
    next;
    parent;
    url;
    content;
    compiledContent;
    builtContent;
    title;
    lang;
    date;
    file;
    author;
    get contentType() {
        return this.constructor;
    }
    get template() {
        return this.contentType.template;
    }
    get htmlClass() {
        return this.contentType.htmlClass;
    }
    get tocInclude() {
        return this.contentType.tableOfContents.include ?? true;
    }
    get tocIncludeChildren() {
        return this.contentType.tableOfContents.includeChildren ?? true;
    }
    get tocIncludeContent() {
        return this.contentType.tableOfContents.includeContent ?? true;
    }
    getUrl() {
        return (this.url ?? (this.title && "/" + makeSlug(this.title))) || null;
    }
    toString() {
        return "§(" + JSON.stringify(this.title ?? this.file ?? this.contentType.name) + ")";
    }
    *allSubdivisions() {
        for (const child of this.children){
            yield child;
            yield* child.allSubdivisions();
        }
    }
    upward() {
        const parent = this.parent;
        if (!parent) return null;
        if (parent.tocInclude) return parent;
        else return parent.upward();
    }
    forward() {
        const first = this.downward()[Symbol.iterator]().next().value;
        if (first) return first;
        const next = this.next;
        if (!next) {
            return this.parent?.forwardAfterEnd() ?? null;
        }
        if (next.tocInclude) return next;
        else return next.forward();
    }
    forwardAfterEnd() {
        const next = this.next;
        if (!next) {
            return this.parent?.forwardAfterEnd() ?? null;
        }
        if (next.tocInclude) return next;
        else return next.forward();
    }
    backward() {
        const prev = this.previous;
        if (!prev) return this.upward();
        if (prev.tocInclude) return prev;
        else return prev.backward();
    }
    *downward() {
        if (!this.tocIncludeChildren) return;
        for (const child of this.children){
            if (child.tocInclude) yield child;
            else yield* child.downward();
        }
    }
    get book() {
        let rv = this;
        while(rv.parent)rv = rv.parent;
        return rv;
    }
    constructor(title){
        if (typeof title === "string") this.title = title;
    }
    with(...args) {
        for (const arg of args){
            if (Array.isArray(arg)) {
                this.children.push(...arg.flat());
            } else if (arg instanceof Division) {
                this.children.push(arg);
            } else {
                Object.assign(this, arg);
            }
        }
        for (const [i1, child] of this.children.entries()){
            child.parent = this;
            child.previous = this.children[i1 - 1];
            child.next = this.children[i1 + 1];
        }
        return this;
    }
}
const ofType = (...types)=>{
    return {
        type: "ofType",
        contentTypes: types,
        *in (book) {
            for (const div of book.allSubdivisions()){
                if (types.some((type)=>div instanceof type)) {
                    yield div;
                }
            }
        }
    };
};
const all = ()=>ofType(Division);
const none = ()=>{
    return {
        type: "none",
        in: ()=>[]
    };
};
const childrenOf = (parent)=>{
    return {
        type: "children",
        of: parent,
        in: ()=>parent.downward()
    };
};
const mod4 = {
    ofType: ofType,
    all: all,
    none: none,
    childrenOf: childrenOf
};
export { Division as Division };
class Book extends Division {
    static tableOfContents = {
        include: false,
        includeChildren: true
    };
}
class FrontCover extends Division {
    static htmlClass = "front-cover";
}
class BackCover extends Division {
    static htmlClass = "back-cover";
}
class LandingPage extends Division {
    static tableOfContents = {
        include: false,
        includeChildren: false,
        includeContent: false
    };
    static template = "landing-page.html";
    url = "/";
    async compile(content, deps, book) {
        return content;
    }
    async postprocess(content, _, book) {
        this.document.head.innerHTML += book.htmlHead;
        return this.content;
    }
}
class Frontmatter extends Division {
    static tableOfContents = {
        include: false,
        includeChildren: true
    };
}
class Frontispiece extends Division {
    static template = "frontispiece.html";
}
class TitlePage extends Division {
    static template = "title-page.html";
}
class Copyright extends Division {
    static htmlClass = "copyright";
    static template = "copy-ack.html";
}
class Dedication extends Division {
    static htmlClass = "dedication";
    static template = "dedication.html";
}
class TableOfContents extends Division {
    static tableOfContents = {
        include: false
    };
    static htmlClass = "table-of-contents";
    static template = "table-of-contents.html";
    dependencies = {
        chapters: all()
    };
    async compile(content, deps, book) {
        return "";
    }
}
class Part extends Division {
    static htmlClass = "part";
    static template = "part.html";
    static tableOfContents = {
        include: true,
        includeChildren: true,
        includeContent: false,
        numbering: {
            restart: false
        }
    };
    dependencies = {
        children: childrenOf(this)
    };
}
class Chapter extends Division {
    static htmlClass = "chapter";
    static tableOfContents = {
        include: true,
        includeContent: true,
        numbering: {
            restart: false
        }
    };
    async postprocess() {
        this.document.querySelectorAll("em").forEach((em)=>em.classList.add("test"));
        return "";
    }
}
class Foreword extends Chapter {
    static htmlClass = "foreword";
    static tableOfContents = {
        numbering: false
    };
}
class Preface extends Chapter {
    static htmlClass = "preface";
    static tableOfContents = {
        numbering: false
    };
}
class Epigraph extends Chapter {
    static htmlClass = "epigraph";
    static template = "epigraph.html";
    static tableOfContents = {
        numbering: false
    };
}
class Introduction extends Chapter {
    static htmlClass = "chapter introduction";
    static tableOfContents = {
        numbering: false
    };
}
class Prologue extends Chapter {
    static htmlClass = "chapter prologue";
    static tableOfContents = {
        numbering: false
    };
}
class Conclusion extends Chapter {
    static htmlClass = "chapter conclusion";
    static tableOfContents = {
        numbering: false
    };
}
class Afterword extends Chapter {
    static htmlClass = "afterword";
    static tableOfContents = {
        numbering: false
    };
}
class Postscript extends Chapter {
    static htmlClass = "postscript";
    static tableOfContents = {
        numbering: false
    };
}
class Backmatter extends Division {
    static htmlClass = "backmatter";
    static tableOfContents = {
        include: false,
        includeChildren: true
    };
}
class Addendum extends Division {
    static htmlClass = "addendum";
}
const Appendix = Addendum;
class Bibliography extends Division {
    static htmlClass = "bibliography";
    dependencies = {
        chapters: ofType(Chapter)
    };
    build() {
        throw new Error("TODO: build bibliography");
    }
}
const ReferenceList = Bibliography;
class Endnotes extends Division {
    static htmlClass = "endnotes";
    dependencies = {
        chapters: ofType(Chapter)
    };
    build() {
        throw new Error("TODO: build endnotes");
    }
}
class Glossary extends Division {
    static htmlClass = "glossary";
}
class Index extends Division {
    static htmlClass = "index";
    dependencies = {
        chapters: ofType(Chapter)
    };
    build() {
        throw new Error("TODO: build index");
    }
}
class Teaser extends Division {
    static htmlClass = "teaser";
}
class AboutTheAuthor extends Division {
    static htmlClass = "about-the-author";
}
export { Book as Book };
export { FrontCover as FrontCover };
export { BackCover as BackCover };
export { LandingPage as LandingPage };
export { Frontmatter as Frontmatter };
export { Frontispiece as Frontispiece };
export { TitlePage as TitlePage };
export { Copyright as Copyright };
export { Dedication as Dedication };
export { TableOfContents as TableOfContents };
export { Part as Part };
export { Chapter as Chapter };
export { Foreword as Foreword };
export { Preface as Preface };
export { Epigraph as Epigraph };
export { Introduction as Introduction };
export { Prologue as Prologue };
export { Conclusion as Conclusion };
export { Afterword as Afterword };
export { Postscript as Postscript };
export { Backmatter as Backmatter };
export { Addendum as Addendum };
export { Appendix as Appendix };
export { Bibliography as Bibliography };
export { ReferenceList as ReferenceList };
export { Endnotes as Endnotes };
export { Glossary as Glossary };
export { Index as Index };
export { Teaser as Teaser };
export { AboutTheAuthor as AboutTheAuthor };
class DependencyGraph {
    vertices;
    #getEdges;
    constructor(vertices, getEdges){
        this.#getEdges = memoize(getEdges);
        this.vertices = Array.from(vertices);
    }
    size() {
        return this.vertices.length;
    }
    *adjacency(v) {
        for (const ws of Object.values(this.#getEdges(v))){
            for (const w of ws){
                if (w !== v) {
                    yield w;
                }
            }
        }
    }
    async complete(cb) {
        const results = new Map();
        for (const v of this.depthFirstPostorder()){
            const deps = {};
            for (const [key, ws] of Object.entries(this.#getEdges(v))){
                deps[key] = Array.from(ws, (w)=>results.get(w));
            }
            results.set(v, await cb(v, deps));
        }
        return results;
    }
    async parallelComplete(cb) {
        const results = new Map();
        for (const layer of this.parallelizedTopologicalSort()){
            await Promise.all(layer.map(async (v)=>{
                const deps = {};
                for (const [key, ws] of Object.entries(this.#getEdges(v))){
                    deps[key] = Array.from(ws, (w)=>results.get(w));
                }
                results.set(v, await cb(v, deps));
            }));
        }
        return results;
    }
    topologicalSort() {
        const dfs = this.depthFirstPostorder();
        dfs.reverse();
        return dfs;
    }
    depthFirstPostorder(v = this.vertices[0]) {
        const marked = new Set();
        const output = [];
        const rec = (v)=>{
            marked.add(v);
            for (const w of this.adjacency(v)){
                if (!marked.has(w)) rec(w);
            }
            return output.push(v);
        };
        for (const v of this.vertices){
            if (!marked.has(v)) rec(v);
        }
        return output;
    }
    parallelizedTopologicalSort() {
        const marked = new Set();
        const vertexValues = new Map();
        const rec = (v)=>{
            marked.add(v);
            let myValue = 0;
            for (const w of this.adjacency(v)){
                if (!marked.has(w)) {
                    const dependencyValue = rec(w);
                    if (dependencyValue >= myValue) myValue = dependencyValue + 1;
                }
            }
            vertexValues.set(v, myValue);
            return myValue;
        };
        for (const v of this.vertices){
            if (!marked.has(v)) rec(v);
        }
        const layers = [];
        for (const [vertex, value] of vertexValues){
            while(layers.length <= value)layers.push([]);
            layers[value].push(vertex);
        }
        return layers;
    }
}
const memoize = (f)=>{
    const map = new Map();
    return (t)=>{
        if (map.has(t)) return map.get(t);
        const u = f(t);
        map.set(t, u);
        return u;
    };
};
const osType1 = (()=>{
    const { Deno: Deno1 } = globalThis;
    if (typeof Deno1?.build?.os === "string") {
        return Deno1.build.os;
    }
    const { navigator } = globalThis;
    if (navigator?.appVersion?.includes?.("Win")) {
        return "windows";
    }
    return "linux";
})();
const isWindows1 = osType1 === "windows";
const CHAR_FORWARD_SLASH1 = 47;
function assertPath1(path) {
    if (typeof path !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);
    }
}
function isPosixPathSeparator2(code) {
    return code === 47;
}
function isPathSeparator1(code) {
    return isPosixPathSeparator2(code) || code === 92;
}
function isWindowsDeviceRoot1(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString1(path, allowAboveRoot, separator, isPathSeparator) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i1 = 0, len = path.length; i1 <= len; ++i1){
        if (i1 < len) code = path.charCodeAt(i1);
        else if (isPathSeparator(code)) break;
        else code = CHAR_FORWARD_SLASH1;
        if (isPathSeparator(code)) {
            if (lastSlash === i1 - 1 || dots === 1) {} else if (lastSlash !== i1 - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i1;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i1;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path.slice(lastSlash + 1, i1);
                else res = path.slice(lastSlash + 1, i1);
                lastSegmentLength = i1 - lastSlash - 1;
            }
            lastSlash = i1;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function stripTrailingSeparators1(segment, isSep) {
    if (segment.length <= 1) {
        return segment;
    }
    let end = segment.length;
    for(let i1 = segment.length - 1; i1 > 0; i1--){
        if (isSep(segment.charCodeAt(i1))) {
            end = i1;
        } else {
            break;
        }
    }
    return segment.slice(0, end);
}
function posixResolve(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i1 = pathSegments.length - 1; i1 >= -1 && !resolvedAbsolute; i1--){
        let path;
        if (i1 >= 0) path = pathSegments[i1];
        else {
            const { Deno: Deno1 } = globalThis;
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
        }
        assertPath1(path);
        if (path.length === 0) {
            continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = isPosixPathSeparator2(path.charCodeAt(0));
    }
    resolvedPath = normalizeString1(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator2);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function windowsResolve(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i1 = pathSegments.length - 1; i1 >= -1; i1--){
        let path;
        const { Deno: Deno1 } = globalThis;
        if (i1 >= 0) {
            path = pathSegments[i1];
        } else if (!resolvedDevice) {
            if (typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path = Deno1.cwd();
        } else {
            if (typeof Deno1?.env?.get !== "function" || typeof Deno1?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path = Deno1.cwd();
            if (path === undefined || path.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path = `${resolvedDevice}\\`;
            }
        }
        assertPath1(path);
        const len = path.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator1(code)) {
                isAbsolute = true;
                if (isPathSeparator1(path.charCodeAt(1))) {
                    let j = 2;
                    let last = j;
                    for(; j < len; ++j){
                        if (isPathSeparator1(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path.slice(last, j);
                        last = j;
                        for(; j < len; ++j){
                            if (!isPathSeparator1(path.charCodeAt(j))) break;
                        }
                        if (j < len && j !== last) {
                            last = j;
                            for(; j < len; ++j){
                                if (isPathSeparator1(path.charCodeAt(j))) break;
                            }
                            if (j === len) {
                                device = `\\\\${firstPart}\\${path.slice(last)}`;
                                rootEnd = j;
                            } else if (j !== last) {
                                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot1(code)) {
                if (path.charCodeAt(1) === 58) {
                    device = path.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator1(path.charCodeAt(2))) {
                            isAbsolute = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator1(code)) {
            rootEnd = 1;
            isAbsolute = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString1(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator1);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function assertArg4(path) {
    assertPath1(path);
    if (path.length === 0) return ".";
}
function posixNormalize(path) {
    assertArg4(path);
    const isAbsolute = isPosixPathSeparator2(path.charCodeAt(0));
    const trailingSeparator = isPosixPathSeparator2(path.charCodeAt(path.length - 1));
    path = normalizeString1(path, !isAbsolute, "/", isPosixPathSeparator2);
    if (path.length === 0 && !isAbsolute) path = ".";
    if (path.length > 0 && trailingSeparator) path += "/";
    if (isAbsolute) return `/${path}`;
    return path;
}
function windowsNormalize(path) {
    assertArg4(path);
    const len = path.length;
    let rootEnd = 0;
    let device;
    let isAbsolute = false;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            isAbsolute = true;
            if (isPathSeparator1(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator1(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    const firstPart = path.slice(last, j);
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator1(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator1(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return `\\\\${firstPart}\\${path.slice(last)}\\`;
                        } else if (j !== last) {
                            device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path.charCodeAt(1) === 58) {
                device = path.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator1(path.charCodeAt(2))) {
                        isAbsolute = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString1(path.slice(rootEnd), !isAbsolute, "\\", isPathSeparator1);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute) tail = ".";
    if (tail.length > 0 && isPathSeparator1(path.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function windowsIsAbsolute(path) {
    assertPath1(path);
    const len = path.length;
    if (len === 0) return false;
    const code = path.charCodeAt(0);
    if (isPathSeparator1(code)) {
        return true;
    } else if (isWindowsDeviceRoot1(code)) {
        if (len > 2 && path.charCodeAt(1) === 58) {
            if (isPathSeparator1(path.charCodeAt(2))) return true;
        }
    }
    return false;
}
function posixIsAbsolute(path) {
    assertPath1(path);
    return path.length > 0 && isPosixPathSeparator2(path.charCodeAt(0));
}
class AssertionError1 extends Error {
    name = "AssertionError";
    constructor(message){
        super(message);
    }
}
function assert1(expr, msg = "") {
    if (!expr) {
        throw new AssertionError1(msg);
    }
}
function posixJoin(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i1 = 0, len = paths.length; i1 < len; ++i1){
        const path = paths[i1];
        assertPath1(path);
        if (path.length > 0) {
            if (!joined) joined = path;
            else joined += `/${path}`;
        }
    }
    if (!joined) return ".";
    return posixNormalize(joined);
}
function windowsJoin(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i1 = 0; i1 < paths.length; ++i1){
        const path = paths[i1];
        assertPath1(path);
        if (path.length > 0) {
            if (joined === undefined) joined = firstPart = path;
            else joined += `\\${path}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert1(firstPart !== null);
    if (isPathSeparator1(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator1(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator1(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator1(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return windowsNormalize(joined);
}
function assertArgs2(from, to) {
    assertPath1(from);
    assertPath1(to);
    if (from === to) return "";
}
function posixRelative(from, to) {
    assertArgs2(from, to);
    from = posixResolve(from);
    to = posixResolve(to);
    if (from === to) return "";
    let fromStart = 1;
    const fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (!isPosixPathSeparator2(from.charCodeAt(fromStart))) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (!isPosixPathSeparator2(to.charCodeAt(toStart))) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i1 = 0;
    for(; i1 <= length; ++i1){
        if (i1 === length) {
            if (toLen > length) {
                if (isPosixPathSeparator2(to.charCodeAt(toStart + i1))) {
                    return to.slice(toStart + i1 + 1);
                } else if (i1 === 0) {
                    return to.slice(toStart + i1);
                }
            } else if (fromLen > length) {
                if (isPosixPathSeparator2(from.charCodeAt(fromStart + i1))) {
                    lastCommonSep = i1;
                } else if (i1 === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i1);
        const toCode = to.charCodeAt(toStart + i1);
        if (fromCode !== toCode) break;
        else if (isPosixPathSeparator2(fromCode)) lastCommonSep = i1;
    }
    let out = "";
    for(i1 = fromStart + lastCommonSep + 1; i1 <= fromEnd; ++i1){
        if (i1 === fromEnd || isPosixPathSeparator2(from.charCodeAt(i1))) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (isPosixPathSeparator2(to.charCodeAt(toStart))) ++toStart;
        return to.slice(toStart);
    }
}
function windowsRelative(from, to) {
    assertArgs2(from, to);
    const fromOrig = windowsResolve(from);
    const toOrig = windowsResolve(to);
    if (fromOrig === toOrig) return "";
    from = fromOrig.toLowerCase();
    to = toOrig.toLowerCase();
    if (from === to) return "";
    let fromStart = 0;
    let fromEnd = from.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to.length;
    for(; toStart < toEnd; ++toStart){
        if (to.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i1 = 0;
    for(; i1 <= length; ++i1){
        if (i1 === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i1) === 92) {
                    return toOrig.slice(toStart + i1 + 1);
                } else if (i1 === 2) {
                    return toOrig.slice(toStart + i1);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i1) === 92) {
                    lastCommonSep = i1;
                } else if (i1 === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from.charCodeAt(fromStart + i1);
        const toCode = to.charCodeAt(toStart + i1);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i1;
    }
    if (i1 !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i1 = fromStart + lastCommonSep + 1; i1 <= fromEnd; ++i1){
        if (i1 === fromEnd || from.charCodeAt(i1) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function posixToNamespacedPath(path) {
    return path;
}
function windowsToNamespacedPath(path) {
    if (typeof path !== "string") return path;
    if (path.length === 0) return "";
    const resolvedPath = windowsResolve(path);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot1(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path;
}
function assertArg5(path) {
    assertPath1(path);
    if (path.length === 0) return ".";
}
function posixDirname(path) {
    assertArg5(path);
    let end = -1;
    let matchedNonSeparator = false;
    for(let i1 = path.length - 1; i1 >= 1; --i1){
        if (isPosixPathSeparator2(path.charCodeAt(i1))) {
            if (matchedNonSeparator) {
                end = i1;
                break;
            }
        } else {
            matchedNonSeparator = true;
        }
    }
    if (end === -1) {
        return isPosixPathSeparator2(path.charCodeAt(0)) ? "/" : ".";
    }
    return stripTrailingSeparators1(path.slice(0, end), isPosixPathSeparator2);
}
function windowsDirname(path) {
    assertArg5(path);
    const len = path.length;
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator1(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator1(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator1(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator1(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            return path;
                        }
                        if (j !== last) {
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator1(path.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        return path;
    }
    for(let i1 = len - 1; i1 >= offset; --i1){
        if (isPathSeparator1(path.charCodeAt(i1))) {
            if (!matchedSlash) {
                end = i1;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return stripTrailingSeparators1(path.slice(0, end), isPosixPathSeparator2);
}
function stripSuffix1(name, suffix) {
    if (suffix.length >= name.length) {
        return name;
    }
    const lenDiff = name.length - suffix.length;
    for(let i1 = suffix.length - 1; i1 >= 0; --i1){
        if (name.charCodeAt(lenDiff + i1) !== suffix.charCodeAt(i1)) {
            return name;
        }
    }
    return name.slice(0, -suffix.length);
}
function lastPathSegment1(path, isSep, start = 0) {
    let matchedNonSeparator = false;
    let end = path.length;
    for(let i1 = path.length - 1; i1 >= start; --i1){
        if (isSep(path.charCodeAt(i1))) {
            if (matchedNonSeparator) {
                start = i1 + 1;
                break;
            }
        } else if (!matchedNonSeparator) {
            matchedNonSeparator = true;
            end = i1 + 1;
        }
    }
    return path.slice(start, end);
}
function assertArgs3(path, suffix) {
    assertPath1(path);
    if (path.length === 0) return path;
    if (typeof suffix !== "string") {
        throw new TypeError(`Suffix must be a string. Received ${JSON.stringify(suffix)}`);
    }
}
function posixBasename(path, suffix = "") {
    assertArgs3(path, suffix);
    const lastSegment = lastPathSegment1(path, isPosixPathSeparator2);
    const strippedSegment = stripTrailingSeparators1(lastSegment, isPosixPathSeparator2);
    return suffix ? stripSuffix1(strippedSegment, suffix) : strippedSegment;
}
function windowsBasename(path, suffix = "") {
    assertArgs3(path, suffix);
    let start = 0;
    if (path.length >= 2) {
        const drive = path.charCodeAt(0);
        if (isWindowsDeviceRoot1(drive)) {
            if (path.charCodeAt(1) === 58) start = 2;
        }
    }
    const lastSegment = lastPathSegment1(path, isPathSeparator1, start);
    const strippedSegment = stripTrailingSeparators1(lastSegment, isPathSeparator1);
    return suffix ? stripSuffix1(strippedSegment, suffix) : strippedSegment;
}
function posixExtname(path) {
    assertPath1(path);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i1 = path.length - 1; i1 >= 0; --i1){
        const code = path.charCodeAt(i1);
        if (isPosixPathSeparator2(code)) {
            if (!matchedSlash) {
                startPart = i1 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i1 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i1;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function windowsExtname(path) {
    assertPath1(path);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path.length >= 2 && path.charCodeAt(1) === 58 && isWindowsDeviceRoot1(path.charCodeAt(0))) {
        start = startPart = 2;
    }
    for(let i1 = path.length - 1; i1 >= start; --i1){
        const code = path.charCodeAt(i1);
        if (isPathSeparator1(code)) {
            if (!matchedSlash) {
                startPart = i1 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i1 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i1;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path.slice(startDot, end);
}
function _format1(sep, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (base === sep) return dir;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
function assertArg6(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
}
function posixFormat(pathObject) {
    assertArg6(pathObject);
    return _format1("/", pathObject);
}
function windowsFormat(pathObject) {
    assertArg6(pathObject);
    return _format1("\\", pathObject);
}
function posixParse(path) {
    assertPath1(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path.length === 0) return ret;
    const isAbsolute = isPosixPathSeparator2(path.charCodeAt(0));
    let start;
    if (isAbsolute) {
        ret.root = "/";
        start = 1;
    } else {
        start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i1 = path.length - 1;
    let preDotState = 0;
    for(; i1 >= start; --i1){
        const code = path.charCodeAt(i1);
        if (isPosixPathSeparator2(code)) {
            if (!matchedSlash) {
                startPart = i1 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i1 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i1;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute) {
                ret.base = ret.name = path.slice(1, end);
            } else {
                ret.base = ret.name = path.slice(startPart, end);
            }
        }
        ret.base = ret.base || "/";
    } else {
        if (startPart === 0 && isAbsolute) {
            ret.name = path.slice(1, startDot);
            ret.base = path.slice(1, end);
        } else {
            ret.name = path.slice(startPart, startDot);
            ret.base = path.slice(startPart, end);
        }
        ret.ext = path.slice(startDot, end);
    }
    if (startPart > 0) {
        ret.dir = stripTrailingSeparators1(path.slice(0, startPart - 1), isPosixPathSeparator2);
    } else if (isAbsolute) ret.dir = "/";
    return ret;
}
function windowsParse(path) {
    assertPath1(path);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator1(code)) {
            rootEnd = 1;
            if (isPathSeparator1(path.charCodeAt(1))) {
                let j = 2;
                let last = j;
                for(; j < len; ++j){
                    if (isPathSeparator1(path.charCodeAt(j))) break;
                }
                if (j < len && j !== last) {
                    last = j;
                    for(; j < len; ++j){
                        if (!isPathSeparator1(path.charCodeAt(j))) break;
                    }
                    if (j < len && j !== last) {
                        last = j;
                        for(; j < len; ++j){
                            if (isPathSeparator1(path.charCodeAt(j))) break;
                        }
                        if (j === len) {
                            rootEnd = j;
                        } else if (j !== last) {
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot1(code)) {
            if (path.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator1(path.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path;
                            ret.base = "\\";
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator1(code)) {
        ret.root = ret.dir = path;
        ret.base = "\\";
        return ret;
    }
    if (rootEnd > 0) ret.root = path.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i1 = path.length - 1;
    let preDotState = 0;
    for(; i1 >= rootEnd; --i1){
        code = path.charCodeAt(i1);
        if (isPathSeparator1(code)) {
            if (!matchedSlash) {
                startPart = i1 + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i1 + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i1;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path.slice(startPart, end);
        }
    } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
        ret.ext = path.slice(startDot, end);
    }
    ret.base = ret.base || "\\";
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function assertArg7(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol !== "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return url;
}
function posixFromFileUrl(url) {
    url = assertArg7(url);
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function windowsFromFileUrl(url) {
    url = assertArg7(url);
    let path = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname !== "") {
        path = `\\\\${url.hostname}${path}`;
    }
    return path;
}
const WHITESPACE_ENCODINGS1 = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace1(string) {
    return string.replaceAll(/[\s]/g, (c)=>{
        return WHITESPACE_ENCODINGS1[c] ?? c;
    });
}
function posixToFileUrl(path) {
    if (!posixIsAbsolute(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace1(path.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
function windowsToFileUrl(path) {
    if (!windowsIsAbsolute(path)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace1(pathname.replace(/%/g, "%25"));
    if (hostname !== undefined && hostname !== "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const sep3 = "\\";
const delimiter3 = ";";
const mod5 = {
    resolve: windowsResolve,
    normalize: windowsNormalize,
    isAbsolute: windowsIsAbsolute,
    join: windowsJoin,
    relative: windowsRelative,
    toNamespacedPath: windowsToNamespacedPath,
    dirname: windowsDirname,
    basename: windowsBasename,
    extname: windowsExtname,
    format: windowsFormat,
    parse: windowsParse,
    fromFileUrl: windowsFromFileUrl,
    toFileUrl: windowsToFileUrl,
    sep: sep3,
    delimiter: delimiter3
};
const sep4 = "/";
const delimiter4 = ":";
const mod6 = {
    resolve: posixResolve,
    normalize: posixNormalize,
    isAbsolute: posixIsAbsolute,
    join: posixJoin,
    relative: posixRelative,
    toNamespacedPath: posixToNamespacedPath,
    dirname: posixDirname,
    basename: posixBasename,
    extname: posixExtname,
    format: posixFormat,
    parse: posixParse,
    fromFileUrl: posixFromFileUrl,
    toFileUrl: posixToFileUrl,
    sep: sep4,
    delimiter: delimiter4
};
function dirname3(path) {
    return isWindows1 ? windowsDirname(path) : posixDirname(path);
}
function join3(...paths) {
    return isWindows1 ? windowsJoin(...paths) : posixJoin(...paths);
}
const path = isWindows1 ? mod5 : mod6;
const { join: join4, normalize: normalize3 } = path;
isWindows1 ? mod5.delimiter : mod6.delimiter;
const build = async (book)=>{
    const divisions = Array.from(book.allSubdivisions());
    console.log(`Building dependency graph: ${divisions}`);
    const dg = new DependencyGraph(divisions, (division)=>{
        return Object.fromEntries(Object.entries(division.dependencies).map(([name, query])=>[
                name,
                [
                    ...query.in(book)
                ]
            ]));
    });
    console.log(`Built dependency graph: ${dg.topologicalSort()}`);
    console.log("Building divisions");
    await dg.parallelComplete(async (division, deps)=>{
        console.log(`Building ${division} (stage 1)`);
        await division.buildPhase1(deps, book);
        return division;
    });
    await dg.parallelComplete(async (division, deps)=>{
        console.log(`Building ${division} (stage 2)`);
        await division.buildPhase2(deps, book);
        return division;
    });
    return divisions;
};
const write = (results, { directory = "_site" } = {})=>{
    for (const division of results){
        if (division.builtContent !== undefined) {
            const content = division.builtContent;
            let outUrl = division.getUrl();
            if (!outUrl) continue;
            if (outUrl.startsWith("/")) outUrl = outUrl.slice(1);
            let outPath = join3(directory, outUrl);
            if (outPath.endsWith("/") || outUrl === "") {
                outPath = join3(outPath, "index.html");
            }
            console.log("Writing", division.toString(), "into", outPath);
            try {
                Deno.mkdirSync(dirname3(outPath), {
                    recursive: true
                });
            } catch  {}
            Deno.writeTextFileSync(outPath, content);
        }
    }
};
export { build as build, write as write };
export { Division as Division };
export { mod4 as find };
