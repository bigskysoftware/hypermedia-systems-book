#import "lib/definitions.typ": *

#set heading(numbering: none)
== 서론

이것은 하이퍼미디어 시스템을 사용하여 애플리케이션을 구축하는 것에 관한 책입니다. _하이퍼미디어 시스템_이라는 문구는 다소 낯설게 들릴 수 있습니다: 하이퍼미디어가 _시스템_이라는 것은 어떻게 이해해야 할까요? 하이퍼미디어는 단지 문서들을 서로 연결하는 방법이 아닌가요?

HTML처럼, 월드 와이드 웹에서요?

하이퍼미디어 _시스템_이라는 말은 무엇을 뜻합니까?

물론 HTML은 _하나의_ 하이퍼미디어입니다. 하지만 웹이 작동하는 방식은 HTML 그 이상의 것입니다: HTTP, 즉 하이퍼텍스트 전송 프로토콜은 서버에서 클라이언트로 HTML을 전송하며, 여기에 관련된 많은 세부 사항과 기능들이 있습니다: 캐싱, 다양한 헤더, 응답 코드 등을 포함합니다.

그리고 물론, _하이퍼미디어 서버_도 있습니다. 이는 네트워크를 통해 클라이언트에 _하이퍼미디어 API_ (예, _API_)를 제공합니다.

#index[hypermedia client]
#index[web browser]
마지막으로 매우 중요한 _하이퍼미디어 클라이언트_가 있습니다: 사람에게 _하이퍼미디어 응답_을 이해할 수 있도록 렌더링하는 소프트웨어 클라이언트입니다. 이를 통해 사용자는 원격 시스템과 상호작용할 수 있습니다. 가장 널리 알려지고 사용되는 하이퍼미디어 클라이언트는 물론 웹 브라우저입니다.

웹 브라우저는 우리가 사용하는 가장 정교한 소프트웨어 중 하나일 수 있습니다. 이들은 HTML, CSS 및 여러 파일 형식을 이해할 뿐만 아니라 JavaScript 런타임 및 프로그래밍 환경도 제공하여, 웹 개발자들이 _두꺼운 클라이언트_ 즉, 네이티브 애플리케이션과 거의 비슷한 수준의 전체 애플리케이션을 만들 수 있게 해줍니다.

실제로 이 JavaScript 런타임은 매우 강력하여, 오늘날 많은 개발자들은 웹 애플리케이션을 전적으로 JavaScript로 구축하는 데 하이퍼미디어 기능을 무시하고 있습니다. 이렇게 구축된 애플리케이션을 보통 단일 페이지 애플리케이션(SPA)이라고 부릅니다. 이러한 웹 애플리케이션은 페이지 간 탐색 대신 JavaScript를 사용하여 사용자 인터페이스를 직접 업데이트합니다. 서버와 통신할 때 이러한 애플리케이션은 일반적으로 AJAX를 통해 JSON API 호출을 사용합니다. 그리고 종종 "반응형" 스타일의 프론트엔드 JavaScript 라이브러리를 사용하여 사용자 인터페이스를 업데이트합니다.

이러한 애플리케이션에서 HTML은 역사적인 이유로 인해 브라우저에 존재하는 (다소 불편한) 그래픽 인터페이스 설명 언어로 사용됩니다.

이러한 스타일로 구축된 애플리케이션은 _하이퍼미디어 기반_이 아닙니다: 웹의 기본 하이퍼미디어 시스템을 활용하지 않습니다.

하이퍼미디어 기반 애플리케이션이 어떤 모습인지 설명하고, 오늘날의 인기 있는 SPA 접근 방식과의 대조를 위해, 우리는 먼저 웹의 전체 _하이퍼미디어 시스템_을 탐구해야 합니다. HTML에 대한 논의를 넘어, 우리는 웹의 _네트워크 아키텍처_를 살펴봐야 하며, 웹 서버가 하이퍼미디어 API를 제공하는 방법과 하이퍼미디어 _클라이언트_ (예: 브라우저)에서 사용할 수 있는 하이퍼미디어 기능을 효과적으로 활용하는 방법을 살펴봐야 합니다.

이 각각은 효과적인 하이퍼미디어 기반 애플리케이션을 구축하는 데 중요한 측면이며, 전체 _하이퍼미디어 시스템_이 모여 하이퍼미디어를 강력한 아키텍처로 만들어냅니다.

=== 하이퍼미디어 시스템이란? <what-is-a-hypermedia-system>

#index["Fielding, Roy"]
#index[REST]
하이퍼미디어 시스템이 무엇인지 이해하려면, 먼저 _정형화된_ 하이퍼미디어 시스템인 월드 와이드 웹을 깊이 있게 살펴봐야 합니다. 로이 필딩은 초기 웹의 많은 부분을 위한 사양을 만들고 구현하는 데 도움을 준 엔지니어로, REpresentational State Transfer, 또는 REST라는 용어를 제시했습니다. 그의 박사 논문에서 그는 REST를 _네트워크 아키텍처_로 설명하며, 분산 소프트웨어 구축을 위한 초기 접근 방식과 대조를 이룹니다.

#index[hypermedia system]
우리는 _하이퍼미디어 시스템_을 필딩의 _원래_ 의미의 RESTful 네트워크 아키텍처를 준수하는 시스템으로 정의합니다.

불행히도, 오늘날에는 아마도 "REST"라는 용어를 JSON API와 연관 지을 것입니다. 이는 산업에서 일반적으로 사용되는 REST라는 용어의 잘못된 적용입니다. JSON은 하이퍼미디어 제어가 부족하기 때문에 _자연스러운_ 하이퍼미디어가 아닙니다. 하이퍼미디어의 교환은 시스템이 "RESTful"로 간주되기 위한 명시적 요구 사항입니다. 우리가 이곳에 오기까지 REST라는 용어를 그렇게 잘못 사용하게 된 과정은 긴 이야기며, 이 책에서 자세히 다룰 것입니다. 하지만 지금은, REST가 JSON을 의미한다고 생각하신다면, 이 책을 읽는 동안 그 이해를 잠시 내려놓고 새롭게 바라보아 주십시오.

그가 그의 논문에서 설명한 것은 1990년대 후반에 존재했던 월드 와이드 웹이라는 점을 이해하는 것이 중요합니다. 그 당시 웹은 단순히 하이퍼미디어를 교환하는 웹 브라우저의 조합이었습니다. 필딩이 RESTful이라고 부른 시스템은 단순한 링크와 양식으로 이루어져 있었습니다.

JSON API가 웹 개발에서 일반적인 도구가 되기까지는 10년이 더 걸리게 됩니다: REST는 _하이퍼미디어_와 웹 1.0 버전에 관한 것이었습니다.

=== 하이퍼미디어 기반 애플리케이션

#index(text("하이퍼미디어 기반 애플리케이션 (HDA)"))
이 책에서는 하이퍼미디어를 _시스템 아키텍처_로 살펴보고, 하이퍼미디어를 사용하여 웹 애플리케이션을 구축하는 몇 가지 실용적이고 _현대적인_ 접근 방식을 탐구할 것입니다. 우리는 이러한 스타일로 구축된 애플리케이션을 _하이퍼미디어 기반 애플리케이션_ 또는 HDA라고 부르며, 오늘날 사용되는 인기 있는 스타일인 단일 페이지 애플리케이션과 대비할 것입니다.

하이퍼미디어 기반 애플리케이션은 하이퍼미디어 시스템 위에 구축되며, 그 기본 시스템의 하이퍼미디어 기능을 존중하고 활용하는 애플리케이션입니다.

=== 목표

이 책의 목표는 RESTful 하이퍼미디어 시스템 아키텍처가 다른 클라이언트-서버 시스템과 어떻게 _다른지_ 그리고 하이퍼미디어 접근 방식의 강점(및 약점)이 무엇인지에 대한 강한 감각을 제공하는 것입니다. 또한, 우리는 하이퍼미디어 아키텍처가 현대 웹 애플리케이션을 구축하는 개발자에게 _관련성이 있다_는 것을 설득하고자 합니다.

우리는 여러분이 애플리케이션의 요구 사항을 평가하고 다음 질문에 답할 수 있는 도구를 제공하고자 합니다:

"이것을 하이퍼미디어 기반 애플리케이션으로 구축할 수 있을까?"

우리는 많은 애플리케이션에 대해 이 질문의 답이 "예!"가 되기를 바랍니다.

=== 책 구성

이 책은 세 부분으로 나뉘어 있습니다:
- 하이퍼미디어에 대한 소개(또는 재소개)로, HTML과 HTTP에 초점을 맞춥니다. 우리는 연락처를 관리하기 위한 간단한 "웹 1.0" 스타일 애플리케이션인 Contact.app을 만들며 이 핵심 하이퍼미디어 개념을 검토할 것입니다.
- 그다음, 우리는 이 책의 저자들이 만든 하이퍼미디어 지향 JavaScript 라이브러리인 #link("https://htmx.org")[htmx]를 사용하여 Contact.app을 개선하는 방법을 살펴볼 것입니다. htmx를 사용함으로써, 우리 애플리케이션의 대화형 수준을 많은 개발자들이 대규모이자 정교한 프론트엔드 라이브러리가 필요하다고 예상할 수준으로 향상시킬 수 있습니다. htmx 덕분에 우리는 하이퍼미디어를 시스템 아키텍처로 사용하여 이를 실현할 수 있습니다.
- 마지막으로, 우리는 전혀 다른 하이퍼미디어 시스템인 Hyperview를 살펴볼 것입니다. Hyperview는 _모바일_ 하이퍼미디어 시스템으로, 웹과 관련은 있지만 구별되며 이 책의 저자 중 한 명인 아담 스테핀스키가 만들었습니다. 이는 모바일 하이퍼미디어뿐만 아니라 모바일 하이퍼미디어 클라이언트를 제공하여 _모바일 전용_ 기능을 지원합니다. 이러한 새로운 구성 요소는 모든 HTTP 서버와 결합되어 모바일 하이퍼미디어 기반 애플리케이션을 구축할 수 있게 합니다.

각 섹션은 _다소_ 독립적이라는 점에 유의하십시오. 하이퍼미디어에 대해 깊이 있게 알고 있으며 기본 웹 1.0 애플리케이션의 기능을 아는 경우, htmx와 하이퍼미디어를 사용하여 현대 웹 애플리케이션을 구축하는 두 번째 섹션으로 건너뛰고 싶을 수도 있습니다. 마찬가지로, htmx에 능숙하고 새로운 _모바일_ 하이퍼미디어로 뛰어들고 싶다면 Hyperview 섹션으로 건너뛰어도 됩니다.

그렇지만, 이 책은 순서대로 읽도록 설계되었으며 htmx 및 Hyperview 섹션은 첫 번째 섹션 끝에 설명된 웹 1.0 애플리케이션을 기반으로 합니다. 또한, 여러분이 하이퍼미디어와 HTML & HTTP의 모든 개념을 잘 알고 있더라도, 첫 몇 장을 훑어보며 리프레시 하는 것도 충분히 가치가 있을 것입니다.

=== 하이퍼미디어: 새로운 세대

하이퍼미디어는 요즘 자주 논의되는 주제가 아닙니다. 1990년대 후반과 2000년대 초반 웹과 함께 자란 많은 오래된 프로그래머들조차도 이 아이디어에 대해 몇 년간 깊이 생각하지 않았습니다. 많은 젊은 웹 개발자들은 단일 페이지 애플리케이션과 이를 구축하는 데 사용되는 프레임워크 외에는 아무것도 모르는 세대에서 성장했습니다.

특히 많은 젊은 웹 개발자들은 React.js 애플리케이션을 구축하며 경력을 시작했습니다. 이들은 JSON API를 사용해 Node 서버와 상호작용하는 애플리케이션을 만들었으며, 하이퍼미디어라는 시스템에 대해 배우지 못했을 것입니다.

이는 비극이며, 솔직히 말해 웹 개발 커뮤니티의 사고 리더들이 하이퍼미디어 접근 방식을 적절히 전달하고 옹호하지 못한 실패입니다.

하이퍼미디어는 훌륭한 아이디어였습니다! 여전히 그렇습니다!

이 책을 읽고 나면, 여러분은 자신의 애플리케이션에서 이 훌륭한 아이디어를 실현하는 도구와 _언어_를 얻게 될 것입니다. 나아가, 하이퍼미디어 시스템의 아이디어와 개념을 보다 광범위한 웹 개발 커뮤니티에 전파할 수 있게 될 것입니다.

하이퍼미디어는 경쟁할 수 있으며, 하이퍼미디어는 _이길 수 있고_, 하이퍼미디어는 _이겼습니다_, 단일 페이지 애플리케이션 접근 방식에 대한 아키텍처 선택으로서 그렇습니다. 하지만 _오직_ 스마트한 사람들(여러분처럼)이 이에 대해 배우고, 이를 활용하여 세상에 알릴 때 가능합니다.

#blockquote(
  attribution: [Kyle Reese, Terminator 2: Judgement Day],
)[
  메시지를 기억하나요? "미래는 정해져 있지 않습니다. 우리가 스스로를 위해 만들어야 하는 운명 밖에 없습니다."
]

#html-note[하이퍼미디어 실제 사례][
  분명히 HTML은 우리가 여기서 이야기하는 이야기에서 중심적인 역할을 합니다. 각 챕터 끝에서는 하이퍼미디어 기반 웹 애플리케이션을 위한 HTML 작성과 관련하여 우리가 배운 것을 공유할 것입니다.

  시작하기에 앞서, 우리의 웹 애플리케이션이 섬이 아니라는 점을 기억하십시오. 우리는 특정 애플리케이션을 위해 HTML을 작성하는 것이 아니라, 웹의 다른 구성원들과 협력하며 작성하고 있습니다. 하이퍼미디어 _시스템_을 염두에 두고 쓸 때, 우리는 웹에서 제공되는 다양한 기능을 보다 잘 활용할 수 있습니다.

  HTML은 하이퍼미디어 시스템의 모든 구성원에 대해 작성될 때 하이퍼미디어 친화적입니다. 이는 사람들이 브라우저로 우리 사이트를 조회할 때 애플리케이션의 상태를 전달하며, 사이트를 소리로 읽는 스크린 리더를 사용하는 사람들에게도 전달합니다. 또한, 사이트의 내용을 프로그램적으로 스크래핑하는 검색 엔진에도 사이트의 목표를 전달합니다. 다른 개발자에게 최대한 명확하게 동작을 전달할 수 있습니다.

  아니요, 우리는 좋은 HTML로 모든 문제를 해결할 수는 없습니다. HTML이 "기본적으로 접근 가능하다"는 구호는 오해의 소지가 있습니다. JavaScript와 같은 다른 기술을 피하면 중요한 기회를 놓칠 수 있습니다. 또한, 모든 곳에서 예상대로 작동하는지 확인하기 위해 많은 테스트가 필요합니다.

  그러나 좋은 HTML은 브라우저가 우리를 위해 _많은_ 작업을 수행하게 할 수 있습니다.
]
